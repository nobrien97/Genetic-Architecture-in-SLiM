opt
}
# Function to rearrange data into list sorted by variables
mean_gen <- function(dat) {
dat <- dplyr::arrange(dat, gen, tau, seed) # should be modelindex instead of tau in final function
dat <- dplyr::group_split(dat, gen) %>% setNames(unique(dat$gen))
dat <- lapply(dat, function(x) { dplyr::group_split(x, seed) }) # %>% setNames(unique(x$seed))}) Don't need names of seeds
dat <- lapply(dat, function(x) { lapply(x, function(y) {
split(as.matrix(y), row(y))
})
})
dat <- lapply(dat, function(x) {
lapply(x, function(y) {
lapply(y, function(z) {
dat_to_mean(z)
})
})
})
dat
}
# Convert optimums into a list for easier comparison
opt_gen <- function(opt) {
opt <- dplyr::arrange(opt, tau, seed) # should be modelindex instead of tau in final function
opt <- dplyr::group_split(opt, seed) # %>% setNames(unique(opt$seed)) Don't need names of seeds
opt <- lapply(opt, function (x) {
x <- x[,3:10]
split(as.matrix(x), row(x))
})
opt
}
mean_list <- mean_gen(d_tau_nodup)
opt_list <- opt_gen(d_tau_opt)
View(mean_list)
View(opt_list)
rm(dists)
?seq_along
mean_list[[1]][[1]][1]
euc_dist <- function(dat, opt) {
dat <- mean_gen(dat)
opt <- opt_gen(opt)
dists <- lapply(seq_along(dat), function(x) {
lapply(seq_along(dat[[x]]), function(y) {
lapply(seq_along(dat[[x]][[y]]), function(z) {
opt_x <- opt[[y]][[z]] # Get the index of the second level of the list; for use in getting the right opt
dist(dat[[x]][[y]][z], opt_x)
})
})
})
}
euc_test <- euc_dist(d_tau_nodup, d_tau_opt)
euc_dist <- function(dat, opt) {
dat <- mean_gen(dat)
opt <- opt_gen(opt)
dists <- lapply(seq_along(dat), function(x) {
lapply(seq_along(dat[[x]]), function(y) {
lapply(seq_along(dat[[x]][[y]]), function(z) {
opt_x <- opt[[y]][[z]] # Get the index of the second level of the list; for use in getting the right opt
opt_x
dat[[x]][[y]][[z]]
#dist(dat[[x]][[y]][z], opt_x)
})
})
})
}
euc_test <- euc_dist(d_tau_nodup, d_tau_opt)
View(euc_test)
euc_dist <- function(dat, opt) {
dat <- mean_gen(dat)
opt <- opt_gen(opt)
dists <- lapply(seq_along(dat), function(x) {
lapply(seq_along(dat[[x]]), function(y) {
lapply(seq_along(dat[[x]][[y]]), function(z) {
opt_x <- opt[[y]][[z]] # Get the index of the second level of the list; for use in getting the right opt
opt_x
dat[[x]][[y]][[z]]
#dist(dat[[x]][[y]][z], opt_x)
})
})
})
dists
}
euc_test <- euc_dist(d_tau_nodup, d_tau_opt)
View(euc_test)
euc_dist <- function(dat, opt) {
dat <- mean_gen(dat)
opt <- opt_gen(opt)
dists <- lapply(seq_along(dat), function(x) {
lapply(seq_along(dat[[x]]), function(y) {
lapply(seq_along(dat[[x]][[y]]), function(z) {
opt_x <- opt[[y]][[z]] # Get the index of the second level of the list; for use in getting the right opt
dist(rbind(dat[[x]][[y]][z], opt_x))
})
})
})
dists
}
euc_test <- euc_dist(d_tau_nodup, d_tau_opt)
mean_list_lv1 <- mean_list[[1]][[1]]
mean_list_lv2 <- mean_list[[1]][[1]][[1]]
opt_list[[1]][[1]]
mean_list[[1]][[1]][[1]]
euc_dist <- function(dat, opt) {
dat <- mean_gen(dat)
opt <- opt_gen(opt)
dists <- lapply(seq_along(dat), function(x) {
lapply(seq_along(dat[[x]]), function(y) {
lapply(seq_along(dat[[x]][[y]]), function(z) {
opt_x <- as.numeric(opt[[y]][[z]]) # Get the index of the second level of the list; for use in getting the right opt
dist_x <- as.numeric(dat[[x]][[y]][[z]])
dist(rbind(dist_x, opt_x))
})
})
})
dists
}
euc_test <- euc_dist(d_tau_nodup, d_tau_opt)
View(euc_test)
View(euc_test)
View(euc_test)
View(mean_list)
View(euc_test)
View(d_tau_means)
View(d_tau_means)
install.packages("tidyverse")
library(tidyverse)
test_df <- euc_test %>%
map_df(as_tibble(euc_test))
View(euc_test)
View(d_tau_nodup)
test_df <- data.frame(matrix(unlist(euc_test), ncol = max(lengths(euc_test)), byrow = T))
View(test_df)
test_df <- data.frame(matrix(unlist(euc_test), ncol = max(lengths(euc_test)), byrow = F))
View(test_df)
test_df <- data.frame(matrix(unlist(euc_test), ncol = max(lengths(euc_test)), byrow = F))
View(test_df)
test_df <- data.frame(matrix(unlist(euc_test), ncol = max(lengths(euc_test)), byrow = T))
View(test_df)
unique(d_tau_nodup$seed)
unique(d_tau_nodup$tau)
unique(d_tau_nodup$gen)
order(unique(d_tau_nodup$seed))
arrange(unique(d_tau_nodup$seed))
arrange(unique(d_tau_nodup$seed), seed)
ordered(unique(d_tau_nodup$seed))
order(unique(d_tau_nodup$seed))
rearrange(unique(d_tau_nodup$seed))
arrange(unique(d_tau_nodup$seed))
d_tau_nodup <- arrange(d_tau_means %>% distinct(seed, gen, tau, .keep_all = T), gen, tau, seed)
View(d_tau_nodup)
unique(d_tau_nodup$seed)
unique(d_tau_nodup$tau)
mean_list <- mean_gen(d_tau_nodup)
opt_list <- opt_gen(d_tau_opt)
euc_test <- euc_dist(d_tau_nodup, d_tau_opt)
View(euc_test)
test_df <- data.frame(matrix(unlist(euc_test), ncol = max(lengths(euc_test)), byrow = T))
View(test_df)
test_df <- data.frame(
gen = unique(d_tau_nodup$gen),
seed = unique(d_tau_nodup$seed),
modelindex = unique(d_tau_nodup$tau),
distance = unlist(euc_test)
)
View(test_df)
test_df <- data.frame(
gen = rep(unique(d_tau_nodup$gen), length(unique(d_tau_nodup$seed)*length(unique(d_tau_nodup$tau)))),
seed = unique(d_tau_nodup$seed),
modelindex = unique(d_tau_nodup$tau),
distance = unlist(euc_test)
)
View(test_df)
View(test_df)
test_df <- data.frame(
gen = rep(unique(d_tau_nodup$gen), length(unique(d_tau_nodup$seed))))),
seed = unique(d_tau_nodup$seed),
modelindex = unique(d_tau_nodup$tau),
distance = unlist(euc_test)
View(test_df)
?rep
test_df <- data.frame(
gen = rep(unique(d_tau_nodup$gen), each = length(unique(d_tau_nodup$seed)*length(unique(d_tau_nodup$tau)))),
seed = unique(d_tau_nodup$seed),
modelindex = unique(d_tau_nodup$tau),
distance = unlist(euc_test)
)
View(test_df)
length(unique(d_tau_nodup$seed))
test_df <- data.frame(
gen = rep(unique(d_tau_nodup$gen), each = length(unique(d_tau_nodup$seed))*length(unique(d_tau_nodup$tau))),
seed = unique(d_tau_nodup$seed),
modelindex = unique(d_tau_nodup$tau),
distance = unlist(euc_test)
)
View(test_df)
test_df <- data.frame(
gen = rep(unique(d_tau_nodup$gen), each = length(unique(d_tau_nodup$seed))*length(unique(d_tau_nodup$tau))),
seed = rep(unique(d_tau_nodup$seed), each = length(unique(d_tau_nodup$seed))*length(unique(d_tau_nodup$tau))),
modelindex = unique(d_tau_nodup$tau),
distance = unlist(euc_test)
)
test_df <- data.frame(
gen = rep(unique(d_tau_nodup$gen), each = length(unique(d_tau_nodup$seed))*length(unique(d_tau_nodup$tau))),
seed = rep(unique(d_tau_nodup$seed), each = length(unique(d_tau_nodup$tau))),
modelindex = unique(d_tau_nodup$tau),
distance = unlist(euc_test)
)
View(test_df)
test_df <- data.frame(
gen = rep(unique(d_tau_nodup$gen), each = length(unique(d_tau_nodup$seed))*length(unique(d_tau_nodup$tau))),
seed = rep(unique(d_tau_nodup$seed), each = length(unique(d_tau_nodup$tau))),
modelindex = unique(d_tau_nodup$tau),
distance = unlist(euc_test)
)
std.error <-  function(x) {
n <- length(x)
sd <- sd(x)
sd/sqrt(n)
}
test_df_means <- test_df %>%
group_by(gen, tau) %>%
summarise_all(list(groupmean = mean, se = std.error))
test_df_means <- test_df %>%
group_by(gen, modelindex) %>%
summarise_all(list(groupmean = mean, se = std.error))
View(test_df_means)
test_df_means <- test_df[c(1, 3:4)] %>%
group_by(gen, modelindex) %>%
summarise_all(list(groupmean = mean, se = std.error))
View(test_df_means)
euc_plot <- ggplot(test_df, aes(x = gen, y = groupmean, color = modelindex)) +
geom_line()
View(euc_plot)
euc_plot
euc_plot <- ggplot(test_df_means, aes(x = gen, y = groupmean, color = modelindex)) +
geom_line()
euc_plot
euc_plot <- ggplot(test_df_means, aes(x = gen, y = as.factor(groupmean), color = modelindex)) +
geom_line()
euc_plot
euc_plot <- ggplot(test_df_means, aes(x = gen, y = groupmean, color = modelindex)) +
geom_line()
euc_plot
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line()
rm(euc_plot)
plot_euc
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic()
plot_euc
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", legend = "Tau")
plot_euc
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = paste("Tau (", expression(tau), ")"))
plot_euc
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = paste("Tau (", bquote(tau = .(value), ")")))
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = paste("Tau (", bquote(tau == .(value), ")")))
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = expression("tau"))
plot_euc
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = expression(tau))
plot_euc
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = paste("Tau(", expression(tau), ")"))
plot_euc
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = paste0("Tau(", expression(tau), ")"))
plot_euc
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = substitute(paste(t, tau), list(t = "Tau ")))
plot_euc
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = substitute(paste(t[1], tau, t[2]), list(t = "Tau (", ")")))
plot_euc
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = substitute(paste(s, tau, e), list(s = "Tau (", e = ")")))
plot_euc
knitr::opts_chunk$set(echo = TRUE)
dat <- data.frame(
Ne=8000,
locisigma=10.0,
pleiorate=0.5,
delmu=1.0,
rwide=1.241e-4,
pleio_cov=0.5
)
knitr::kable(
dat)
)
dat <- data.frame(
Ne=8000,
locisigma=10.0,
pleiorate=0.5,
delmu=1.0,
rwide=1.241e-4,
pleio_cov=0.5
)
knitr::kable(
dat)
?kable
dat <- data.frame(
Ne=8000,
locisigma=10.0,
pleiorate=0.5,
delmu=1.0,
rwide=1.241e-4,
pleio_cov=0.5
)
knitr::kable(
dat, label = "Table 1: Fixed parameter values for tau value testing.")
dat <- data.frame(
Ne=8000,
locisigma=10.0,
pleiorate=0.5,
delmu=1.0,
rwide=1.241e-4,
pleio_cov=0.5
)
knitr::kable(
dat, caption = "Table 1: Fixed parameter values for tau value testing.")
dat <- data.frame(
Ne=8000,
locisigma=10.0,
pleiorate=0.5,
delmu=1.0,
rwide=1.241e-4,
pleio_cov=0.5
)
knitr::kable(
dat, col.names = c("Population size", "Additive effect size", "Rate of pleiotropy", "Ratio of deleteriousto non-deleterious mutations", "Genome-wide recombination rate", "Mean mutational pleiotropic covariance",  caption = "Table 1: Fixed parameter values for tau value testing.")
dat <- data.frame(
Ne=8000,
locisigma=10.0,
pleiorate=0.5,
delmu=1.0,
rwide=1.241e-4,
pleio_cov=0.5
)
knitr::kable(
dat, col.names = c("Population size", "Additive effect size", "Rate of pleiotropy", "Ratio of deleteriousto non-deleterious mutations", "Genome-wide recombination rate", "Mean mutational pleiotropic covariance"),  caption = "Table 1: Fixed parameter values for tau value testing.")
unique(test_df$seed)
plot_euc
d_tau_means <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/Tau_test/Output/out_8T_stabsel_means.csv", header = F)
d_tau_opt <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/Tau_test/Output/out_8T_stabsel_opt.csv", header = F)
# Names
names(d_tau_means)[1:7] <- c("gen", "seed", "modelindex", "rsd", "rwide", "delmu", "tau")
names(d_tau_means)[8:35] <-  c(paste0("pleiocov_0", 1:7), paste0("pleiocov_1", 2:7), paste0("pleiocov_2", 3:7), paste0("pleiocov_3", 4:7), paste0("pleiocov_4", 5:7), paste0("pleiocov_5", 6:7), paste0("pleiocov_6", 7))
names(d_tau_means)[36:43] <- paste0("mean", 0:7)
names(d_tau_means)[44:51] <- paste0("var", 0:7)
names(d_tau_means)[52:79] <- c(paste0("phenocov_0", 1:7), paste0("phenocov_1", 2:7), paste0("phenocov_2", 3:7), paste0("phenocov_3", 4:7), paste0("phenocov_4", 5:7), paste0("phenocov_5", 6:7), paste0("phenocov_6", 7))
names(d_tau_means)[80:107] <- c(paste0("phenocor_0", 1:7), paste0("phenocor_1", 2:7), paste0("phenocor_2", 3:7), paste0("phenocor_3", 4:7), paste0("phenocor_4", 5:7), paste0("phenocor_5", 6:7), paste0("phenocor_6", 7))
names(d_tau_means)[108] <- "H"
names(d_tau_opt) <- c("seed", "tau", paste0("opt", 0:7))
# Join the frames together
library(dplyr)
d_master <- right_join(d_tau_opt[,2:10], d_tau_means, by = "tau")
#dists <- numeric(length = length(unique(modelindex))*length(unique(seed))* length(unique(gen)))
dists <- numeric(length = 261)
for (i in unique(d_tau_means$seed)) {
for (j in unique(d_tau_means$tau)) {
for (k in unique(d_tau_means$gen)) {
dist_ex <- as.numeric(d_tau_means[d_tau_means$gen == unique(d_tau_means$gen)[k] & d_tau_means$tau == unique(d_tau_means$tau)[j] & d_tau_means$seed == unique(d_tau_means$seed)[i],][36:43])
dists[] <- dist(rbind(dist_ex, as.numeric(d_tau_opt[d_tau_opt$seed == unique(d_tau_opt$seed)[i] & d_tau_opt$tau == unique(d_tau_opt$tau)[j],][3:10])))
}
}
}
d_tau_means <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/Tau_test/Output/out_8T_stabsel_means.csv", header = F)
d_tau_opt <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/Tau_test/Output/out_8T_stabsel_opt.csv", header = F)
# Names
names(d_tau_means)[1:7] <- c("gen", "seed", "modelindex", "rsd", "rwide", "delmu", "tau")
names(d_tau_means)[8:35] <-  c(paste0("pleiocov_0", 1:7), paste0("pleiocov_1", 2:7), paste0("pleiocov_2", 3:7), paste0("pleiocov_3", 4:7), paste0("pleiocov_4", 5:7), paste0("pleiocov_5", 6:7), paste0("pleiocov_6", 7))
names(d_tau_means)[36:43] <- paste0("mean", 0:7)
names(d_tau_means)[44:51] <- paste0("var", 0:7)
names(d_tau_means)[52:79] <- c(paste0("phenocov_0", 1:7), paste0("phenocov_1", 2:7), paste0("phenocov_2", 3:7), paste0("phenocov_3", 4:7), paste0("phenocov_4", 5:7), paste0("phenocov_5", 6:7), paste0("phenocov_6", 7))
names(d_tau_means)[80:107] <- c(paste0("phenocor_0", 1:7), paste0("phenocor_1", 2:7), paste0("phenocor_2", 3:7), paste0("phenocor_3", 4:7), paste0("phenocor_4", 5:7), paste0("phenocor_5", 6:7), paste0("phenocor_6", 7))
names(d_tau_means)[108] <- "H"
names(d_tau_opt) <- c("seed", "tau", paste0("opt", 0:7))
# Function to convert a single line from dataframe to just the mean values
dat_to_mean <- function(dat) {
dat <- as.vector(t(dat))
means <- dat[36:43]
means
}
# Function to rearrange data into list sorted by variables
mean_gen <- function(dat) {
dat <- dplyr::arrange(dat, gen, tau, seed) # should be modelindex instead of tau in final function
dat <- dplyr::group_split(dat, gen) %>% setNames(unique(dat$gen))
dat <- lapply(dat, function(x) { dplyr::group_split(x, seed) }) # %>% setNames(unique(x$seed))}) Don't need names of seeds
dat <- lapply(dat, function(x) { lapply(x, function(y) {
split(as.matrix(y), row(y))
})
})
dat <- lapply(dat, function(x) {
lapply(x, function(y) {
lapply(y, function(z) {
dat_to_mean(z)
})
})
})
dat
}
# Convert optimums into a list for easier comparison
opt_gen <- function(opt) {
opt <- dplyr::arrange(opt, tau, seed) # should be modelindex instead of tau in final function
opt <- dplyr::group_split(opt, seed) # %>% setNames(unique(opt$seed)) Don't need names of seeds
opt <- lapply(opt, function (x) {
x <- x[,3:10]
split(as.matrix(x), row(x))
})
opt
}
# Arrange into ascending order
d_tau_nodup <- arrange(d_tau_means %>% distinct(seed, gen, tau, .keep_all = T), gen, tau, seed)
# Test the functions
mean_list <- mean_gen(d_tau_nodup)
opt_list <- opt_gen(d_tau_opt)
# Euclidean distance: needs to be for each time point, model and seed combo
# Function needs to go into list, lapply level 1 is generation, level 2 is seed, level 3 is model/tau
# So go to level 3, calculate distance between that and the optimum (where optimum value is from another data frame)
euc_dist <- function(dat, opt) {
dat <- mean_gen(dat)
opt <- opt_gen(opt)
dists <- lapply(seq_along(dat), function(x) {
lapply(seq_along(dat[[x]]), function(y) {
lapply(seq_along(dat[[x]][[y]]), function(z) {
opt_x <- as.numeric(opt[[y]][[z]]) # Get the index of the second and third levels of the list (seed, modelindex); for use in getting the right opt
dist_x <- as.numeric(dat[[x]][[y]][[z]]) # Choose the right sampled vector of means (gen, seed, modelindex)
dist(rbind(dist_x, opt_x)) # Euclidean distance calculation between given vector of means and associated optimum vector
})
})
})
dists
}
euc_test <- euc_dist(d_tau_nodup, d_tau_opt)
# Convert to data frame for plotting: need to take outer list as gen, next level as seed, and next level as model
library(tidyverse)
test_df <- data.frame(
gen = rep(unique(d_tau_nodup$gen), each = length(unique(d_tau_nodup$seed))*length(unique(d_tau_nodup$tau))),
seed = rep(unique(d_tau_nodup$seed), each = length(unique(d_tau_nodup$tau))),
modelindex = unique(d_tau_nodup$tau),
distance = unlist(euc_test)
)
# Plot data - mean of seeds, and standard errors
# Simple function to calculate standard error
std.error <-  function(x) {
n <- length(x)
sd <- sd(x)
sd/sqrt(n)
}
test_df_means <- test_df[c(1, 3:4)] %>%
group_by(gen, modelindex) %>%
summarise_all(list(groupmean = mean, se = std.error))
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = substitute(paste(s, tau, e), list(s = "Tau (", e = ")")))
plot_euc
getwd()
