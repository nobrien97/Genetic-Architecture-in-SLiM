plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = paste("Tau(", expression(tau), ")"))
plot_euc
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = paste0("Tau(", expression(tau), ")"))
plot_euc
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = substitute(paste(t, tau), list(t = "Tau ")))
plot_euc
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = substitute(paste(t[1], tau, t[2]), list(t = "Tau (", ")")))
plot_euc
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = substitute(paste(s, tau, e), list(s = "Tau (", e = ")")))
plot_euc
knitr::opts_chunk$set(echo = TRUE)
dat <- data.frame(
Ne=8000,
locisigma=10.0,
pleiorate=0.5,
delmu=1.0,
rwide=1.241e-4,
pleio_cov=0.5
)
knitr::kable(
dat)
)
dat <- data.frame(
Ne=8000,
locisigma=10.0,
pleiorate=0.5,
delmu=1.0,
rwide=1.241e-4,
pleio_cov=0.5
)
knitr::kable(
dat)
?kable
dat <- data.frame(
Ne=8000,
locisigma=10.0,
pleiorate=0.5,
delmu=1.0,
rwide=1.241e-4,
pleio_cov=0.5
)
knitr::kable(
dat, label = "Table 1: Fixed parameter values for tau value testing.")
dat <- data.frame(
Ne=8000,
locisigma=10.0,
pleiorate=0.5,
delmu=1.0,
rwide=1.241e-4,
pleio_cov=0.5
)
knitr::kable(
dat, caption = "Table 1: Fixed parameter values for tau value testing.")
dat <- data.frame(
Ne=8000,
locisigma=10.0,
pleiorate=0.5,
delmu=1.0,
rwide=1.241e-4,
pleio_cov=0.5
)
knitr::kable(
dat, col.names = c("Population size", "Additive effect size", "Rate of pleiotropy", "Ratio of deleteriousto non-deleterious mutations", "Genome-wide recombination rate", "Mean mutational pleiotropic covariance",  caption = "Table 1: Fixed parameter values for tau value testing.")
dat <- data.frame(
Ne=8000,
locisigma=10.0,
pleiorate=0.5,
delmu=1.0,
rwide=1.241e-4,
pleio_cov=0.5
)
knitr::kable(
dat, col.names = c("Population size", "Additive effect size", "Rate of pleiotropy", "Ratio of deleteriousto non-deleterious mutations", "Genome-wide recombination rate", "Mean mutational pleiotropic covariance"),  caption = "Table 1: Fixed parameter values for tau value testing.")
unique(test_df$seed)
plot_euc
d_tau_means <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/Tau_test/Output/out_8T_stabsel_means.csv", header = F)
d_tau_opt <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/Tau_test/Output/out_8T_stabsel_opt.csv", header = F)
# Names
names(d_tau_means)[1:7] <- c("gen", "seed", "modelindex", "rsd", "rwide", "delmu", "tau")
names(d_tau_means)[8:35] <-  c(paste0("pleiocov_0", 1:7), paste0("pleiocov_1", 2:7), paste0("pleiocov_2", 3:7), paste0("pleiocov_3", 4:7), paste0("pleiocov_4", 5:7), paste0("pleiocov_5", 6:7), paste0("pleiocov_6", 7))
names(d_tau_means)[36:43] <- paste0("mean", 0:7)
names(d_tau_means)[44:51] <- paste0("var", 0:7)
names(d_tau_means)[52:79] <- c(paste0("phenocov_0", 1:7), paste0("phenocov_1", 2:7), paste0("phenocov_2", 3:7), paste0("phenocov_3", 4:7), paste0("phenocov_4", 5:7), paste0("phenocov_5", 6:7), paste0("phenocov_6", 7))
names(d_tau_means)[80:107] <- c(paste0("phenocor_0", 1:7), paste0("phenocor_1", 2:7), paste0("phenocor_2", 3:7), paste0("phenocor_3", 4:7), paste0("phenocor_4", 5:7), paste0("phenocor_5", 6:7), paste0("phenocor_6", 7))
names(d_tau_means)[108] <- "H"
names(d_tau_opt) <- c("seed", "tau", paste0("opt", 0:7))
# Join the frames together
library(dplyr)
d_master <- right_join(d_tau_opt[,2:10], d_tau_means, by = "tau")
#dists <- numeric(length = length(unique(modelindex))*length(unique(seed))* length(unique(gen)))
dists <- numeric(length = 261)
for (i in unique(d_tau_means$seed)) {
for (j in unique(d_tau_means$tau)) {
for (k in unique(d_tau_means$gen)) {
dist_ex <- as.numeric(d_tau_means[d_tau_means$gen == unique(d_tau_means$gen)[k] & d_tau_means$tau == unique(d_tau_means$tau)[j] & d_tau_means$seed == unique(d_tau_means$seed)[i],][36:43])
dists[] <- dist(rbind(dist_ex, as.numeric(d_tau_opt[d_tau_opt$seed == unique(d_tau_opt$seed)[i] & d_tau_opt$tau == unique(d_tau_opt$tau)[j],][3:10])))
}
}
}
d_tau_means <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/Tau_test/Output/out_8T_stabsel_means.csv", header = F)
d_tau_opt <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/Tau_test/Output/out_8T_stabsel_opt.csv", header = F)
# Names
names(d_tau_means)[1:7] <- c("gen", "seed", "modelindex", "rsd", "rwide", "delmu", "tau")
names(d_tau_means)[8:35] <-  c(paste0("pleiocov_0", 1:7), paste0("pleiocov_1", 2:7), paste0("pleiocov_2", 3:7), paste0("pleiocov_3", 4:7), paste0("pleiocov_4", 5:7), paste0("pleiocov_5", 6:7), paste0("pleiocov_6", 7))
names(d_tau_means)[36:43] <- paste0("mean", 0:7)
names(d_tau_means)[44:51] <- paste0("var", 0:7)
names(d_tau_means)[52:79] <- c(paste0("phenocov_0", 1:7), paste0("phenocov_1", 2:7), paste0("phenocov_2", 3:7), paste0("phenocov_3", 4:7), paste0("phenocov_4", 5:7), paste0("phenocov_5", 6:7), paste0("phenocov_6", 7))
names(d_tau_means)[80:107] <- c(paste0("phenocor_0", 1:7), paste0("phenocor_1", 2:7), paste0("phenocor_2", 3:7), paste0("phenocor_3", 4:7), paste0("phenocor_4", 5:7), paste0("phenocor_5", 6:7), paste0("phenocor_6", 7))
names(d_tau_means)[108] <- "H"
names(d_tau_opt) <- c("seed", "tau", paste0("opt", 0:7))
# Function to convert a single line from dataframe to just the mean values
dat_to_mean <- function(dat) {
dat <- as.vector(t(dat))
means <- dat[36:43]
means
}
# Function to rearrange data into list sorted by variables
mean_gen <- function(dat) {
dat <- dplyr::arrange(dat, gen, tau, seed) # should be modelindex instead of tau in final function
dat <- dplyr::group_split(dat, gen) %>% setNames(unique(dat$gen))
dat <- lapply(dat, function(x) { dplyr::group_split(x, seed) }) # %>% setNames(unique(x$seed))}) Don't need names of seeds
dat <- lapply(dat, function(x) { lapply(x, function(y) {
split(as.matrix(y), row(y))
})
})
dat <- lapply(dat, function(x) {
lapply(x, function(y) {
lapply(y, function(z) {
dat_to_mean(z)
})
})
})
dat
}
# Convert optimums into a list for easier comparison
opt_gen <- function(opt) {
opt <- dplyr::arrange(opt, tau, seed) # should be modelindex instead of tau in final function
opt <- dplyr::group_split(opt, seed) # %>% setNames(unique(opt$seed)) Don't need names of seeds
opt <- lapply(opt, function (x) {
x <- x[,3:10]
split(as.matrix(x), row(x))
})
opt
}
# Arrange into ascending order
d_tau_nodup <- arrange(d_tau_means %>% distinct(seed, gen, tau, .keep_all = T), gen, tau, seed)
# Test the functions
mean_list <- mean_gen(d_tau_nodup)
opt_list <- opt_gen(d_tau_opt)
# Euclidean distance: needs to be for each time point, model and seed combo
# Function needs to go into list, lapply level 1 is generation, level 2 is seed, level 3 is model/tau
# So go to level 3, calculate distance between that and the optimum (where optimum value is from another data frame)
euc_dist <- function(dat, opt) {
dat <- mean_gen(dat)
opt <- opt_gen(opt)
dists <- lapply(seq_along(dat), function(x) {
lapply(seq_along(dat[[x]]), function(y) {
lapply(seq_along(dat[[x]][[y]]), function(z) {
opt_x <- as.numeric(opt[[y]][[z]]) # Get the index of the second and third levels of the list (seed, modelindex); for use in getting the right opt
dist_x <- as.numeric(dat[[x]][[y]][[z]]) # Choose the right sampled vector of means (gen, seed, modelindex)
dist(rbind(dist_x, opt_x)) # Euclidean distance calculation between given vector of means and associated optimum vector
})
})
})
dists
}
euc_test <- euc_dist(d_tau_nodup, d_tau_opt)
# Convert to data frame for plotting: need to take outer list as gen, next level as seed, and next level as model
library(tidyverse)
test_df <- data.frame(
gen = rep(unique(d_tau_nodup$gen), each = length(unique(d_tau_nodup$seed))*length(unique(d_tau_nodup$tau))),
seed = rep(unique(d_tau_nodup$seed), each = length(unique(d_tau_nodup$tau))),
modelindex = unique(d_tau_nodup$tau),
distance = unlist(euc_test)
)
# Plot data - mean of seeds, and standard errors
# Simple function to calculate standard error
std.error <-  function(x) {
n <- length(x)
sd <- sd(x)
sd/sqrt(n)
}
test_df_means <- test_df[c(1, 3:4)] %>%
group_by(gen, modelindex) %>%
summarise_all(list(groupmean = mean, se = std.error))
plot_euc <- ggplot(test_df_means,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = substitute(paste(s, tau, e), list(s = "Tau (", e = ")")))
plot_euc
getwd()
View(euc_test)
View(euc_test)
d_tau_means2 <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/Tau_test/Tau_test2/Output/out_8T_stabsel_means.csv", header = F)
d_tau_opt2 <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/Tau_test/Tau_test2/Output/out_8T_stabsel_opt.csv", header = F)
View(d_tau_opt)
names(d_tau_means2)[1:7] <- c("gen", "seed", "modelindex", "rsd", "rwide", "delmu", "tau")
names(d_tau_means2)[8:35] <-  c(paste0("pleiocov_0", 1:7), paste0("pleiocov_1", 2:7), paste0("pleiocov_2", 3:7), paste0("pleiocov_3", 4:7), paste0("pleiocov_4", 5:7), paste0("pleiocov_5", 6:7), paste0("pleiocov_6", 7))
names(d_tau_means2)[36:43] <- paste0("mean", 0:7)
names(d_tau_means2)[44:51] <- paste0("var", 0:7)
names(d_tau_means2)[52:79] <- c(paste0("phenocov_0", 1:7), paste0("phenocov_1", 2:7), paste0("phenocov_2", 3:7), paste0("phenocov_3", 4:7), paste0("phenocov_4", 5:7), paste0("phenocov_5", 6:7), paste0("phenocov_6", 7))
names(d_tau_means2)[80:107] <- c(paste0("phenocor_0", 1:7), paste0("phenocor_1", 2:7), paste0("phenocor_2", 3:7), paste0("phenocor_3", 4:7), paste0("phenocor_4", 5:7), paste0("phenocor_5", 6:7), paste0("phenocor_6", 7))
names(d_tau_means2)[108] <- "H"
names(d_tau_opt2) <- c("seed", "tau", paste0("opt", 0:7))
View(d_tau_means2)
d_tau2_nodup <- arrange(d_tau_means2 %>% distinct(seed, gen, tau, .keep_all = T), gen, tau, seed)
d_tau2_nodup <- dplyr::arrange(d_tau_means2 %>% distinct(seed, gen, tau, .keep_all = T), gen, tau, seed)
library(dplyr)
d_tau2_nodup <- arrange(d_tau_means2 %>% distinct(seed, gen, tau, .keep_all = T), gen, tau, seed)
View(d_tau_means2)
means2_list <- mean_gen(d_tau2_nodup)
opt2_list <- opt_gen(d_tau2_opt)
opt2_list <- opt_gen(d_tau_opt2)
euc_test2 <- euc_dist(d_tau2_nodup, d_tau_opt2)
library(tidyverse)
test_df2 <- data.frame(
gen = rep(unique(d_tau2_nodup$gen), each = length(unique(d_tau2_nodup$seed))*length(unique(d_tau2_nodup$tau))),
seed = rep(unique(d_tau2_nodup$seed), each = length(unique(d_tau2_nodup$tau))),
modelindex = unique(d_tau2_nodup$tau),
distance = unlist(euc_test2)
)
test_df_means2 <- test_df[c(1, 3:4)] %>%
group_by(gen, modelindex) %>%
summarise_all(list(groupmean = mean, se = std.error))
plot_euc2 <- ggplot(test_df_means2,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = substitute(paste(s, tau, e), list(s = "Tau (", e = ")")))
plot_euc2
test_df_means2 <- test_df2[c(1, 3:4)] %>%
group_by(gen, modelindex) %>%
summarise_all(list(groupmean = mean, se = std.error))
plot_euc2 <- ggplot(test_df_means2,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = substitute(paste(s, tau, e), list(s = "Tau (", e = ")")))
plot_euc2
d_tau_means2 <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/Tau_test/Tau_test2/Output/out_8T_stabsel_means.csv", header = F)
d_tau_opt2 <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/Tau_test/Tau_test2/Output/out_8T_stabsel_opt.csv", header = F)
names(d_tau_means2)[1:7] <- c("gen", "seed", "modelindex", "rsd", "rwide", "delmu", "tau")
names(d_tau_means2)[8:35] <-  c(paste0("pleiocov_0", 1:7), paste0("pleiocov_1", 2:7), paste0("pleiocov_2", 3:7), paste0("pleiocov_3", 4:7), paste0("pleiocov_4", 5:7), paste0("pleiocov_5", 6:7), paste0("pleiocov_6", 7))
names(d_tau_means2)[36:43] <- paste0("mean", 0:7)
names(d_tau_means2)[44:51] <- paste0("var", 0:7)
names(d_tau_means2)[52:79] <- c(paste0("phenocov_0", 1:7), paste0("phenocov_1", 2:7), paste0("phenocov_2", 3:7), paste0("phenocov_3", 4:7), paste0("phenocov_4", 5:7), paste0("phenocov_5", 6:7), paste0("phenocov_6", 7))
names(d_tau_means2)[80:107] <- c(paste0("phenocor_0", 1:7), paste0("phenocor_1", 2:7), paste0("phenocor_2", 3:7), paste0("phenocor_3", 4:7), paste0("phenocor_4", 5:7), paste0("phenocor_5", 6:7), paste0("phenocor_6", 7))
names(d_tau_means2)[108] <- "H"
View(d_tau_means2)
names(d_tau_opt2) <- c("seed", "tau", paste0("opt", 0:7))
rm(d_tau_means2)
rm(d_tau_opt2)
d_tau_means2 <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/Tau_test/Tau_test2/Output/out_8T_stabsel_means.csv", header = F)
d_tau_opt2 <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/Tau_test/Tau_test2/Output/out_8T_stabsel_opt.csv", header = F)
names(d_tau_means2)[1:7] <- c("gen", "seed", "modelindex", "rsd", "rwide", "delmu", "tau")
names(d_tau_means2)[8:35] <-  c(paste0("pleiocov_0", 1:7), paste0("pleiocov_1", 2:7), paste0("pleiocov_2", 3:7), paste0("pleiocov_3", 4:7), paste0("pleiocov_4", 5:7), paste0("pleiocov_5", 6:7), paste0("pleiocov_6", 7))
names(d_tau_means2)[36:43] <- paste0("mean", 0:7)
names(d_tau_means2)[44:51] <- paste0("var", 0:7)
names(d_tau_means2)[52:79] <- c(paste0("phenocov_0", 1:7), paste0("phenocov_1", 2:7), paste0("phenocov_2", 3:7), paste0("phenocov_3", 4:7), paste0("phenocov_4", 5:7), paste0("phenocov_5", 6:7), paste0("phenocov_6", 7))
names(d_tau_means2)[80:107] <- c(paste0("phenocor_0", 1:7), paste0("phenocor_1", 2:7), paste0("phenocor_2", 3:7), paste0("phenocor_3", 4:7), paste0("phenocor_4", 5:7), paste0("phenocor_5", 6:7), paste0("phenocor_6", 7))
names(d_tau_means2)[108] <- "H"
names(d_tau_opt2) <- c("seed", "tau", paste0("opt", 0:7))
library(tidyverse)
# Arrange in ascending order and get rid of duplicate entries
d_tau2_nodup <- arrange(d_tau_means2 %>% distinct(seed, gen, tau, .keep_all = T), gen, tau, seed)
# Euclidean distances
euc_test2 <- euc_dist(d_tau2_nodup, d_tau_opt2)
test_df2 <- data.frame(
gen = rep(unique(d_tau2_nodup$gen), each = length(unique(d_tau2_nodup$seed))*length(unique(d_tau2_nodup$tau))),
seed = rep(unique(d_tau2_nodup$seed), each = length(unique(d_tau2_nodup$tau))),
modelindex = unique(d_tau2_nodup$tau),
distance = unlist(euc_test2)
)
test_df_means2 <- test_df2[c(1, 3:4)] %>%
group_by(gen, modelindex) %>%
summarise_all(list(groupmean = mean, se = std.error))
plot_euc2 <- ggplot(test_df_means2,
aes(x = gen, y = groupmean, color = as.factor(modelindex))) +
geom_ribbon(aes(ymin = (groupmean - se), ymax = (groupmean + se)), alpha=0.3, show.legend = F, linetype=0) +
geom_line() +
theme_classic() +
labs(x = "Generation", y = "Distance from optimum", color = substitute(paste(s, tau, e), list(s = "Tau (", e = ")")))
plot_euc2
null_chr512 <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/final_runs/Nimrod/Simplified/AIM1/Output/out_8T_null_chr_512.csv", header = F)
names(null_chr512)[1:2] <- c("modelindex", "seed")
null_chr512 <- null_chr512[c(1:2)]
null_chr512$seed <- as.character(null_chr512$seed)
View(null_chr512)
library(plyr)
models <- count(null_chr512$modelindex)
models <- models$x[models$freq < 100]
seeds <- count(null_chr512$seed)
seeds <- seeds$x[seeds$freq < 256]
seeds <- seeds$x[seeds$freq < 256]
seeds
count(null_chr512$seed)
seeds <- count(null_chr512$seed)
seeds <- seeds$x[seeds$freq < 256]
seeds <- count(null_chr512$seed)
seeds[seeds$freq < 256]
seeds[,seeds$freq < 256]
seeds[seeds$freq < 256,]
seeds <- seeds$x[seeds$freq < 256,]
seeds <- seeds[seeds$freq < 256,]$x
seeds <- count(null_chr512$seed)
seeds <- seeds[seeds$freq < 256,]
seeds$x
seeds <- seeds[seeds$freq < 256,]$x
seeds
id <- null_chr512
for (i in models) {
for (j in seeds) {
if (null_chr512[null_chr512$modelindex == i & null_chr512$seeds == j])
id[id$modelindex == i & id$seeds == j]$modseed <- -1
}
}
null_chr512[null_chr512$modelindex == 256 & null_chr512$seeds == "1062596789"]
null_chr512[null_chr512$modelindex == 256 & null_chr512$seeds == 1062596789]
null_chr512 <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/final_runs/Nimrod/Simplified/AIM1/Output/out_8T_null_chr_512.csv", header = F)
names(null_chr512)[1:2] <- c("modelindex", "seed")
null_chr512 <- null_chr512[c(1:2)]
models <- count(null_chr512$modelindex)
models <- models$x[models$freq < 100]
seeds <- count(null_chr512$seed)
seeds <- seeds[seeds$freq < 256,]$x
id <- null_chr512
for (i in models) {
for (j in seeds) {
if (null_chr512[null_chr512$modelindex == i & null_chr512$seeds == j])
id[id$modelindex == i & id$seeds == j]$modseed <- -1
}
}
null_chr512[null_chr512$modelindex == 256 & null_chr512$seeds == 1062596789]
null_chr512[null_chr512$modelindex == 256 & null_chr512$seed == 1062596789]
View(null_chr512)
null_chr512[null_chr512$modelindex == 256 & null_chr512$seed == 1140555014]
null_chr512[null_chr512$modelindex == 411 & null_chr512$seed == 1140555014]
null_chr512[null_chr512$modelindex == 411 && null_chr512$seed == 1140555014]
subset(null_chr512, modelindex == 411, seed == 1140555014)
?subset
subset(null_chr512, c(modelindex == 411, seed == 1140555014))
subset(null_chr512, modelindex == 411)
subset(null_chr512, seed == 1140555014)
subset(null_chr512, seed == 1140555014)
length(subset(null_chr512, seed == 1140555014))
nrow(subset(null_chr512, seed == 1140555014))
nrow(subset(null_chr512, model == 411, seed == 1140555014))
nrow(subset(null_chr512, modelindex == 411, seed == 1140555014))
nrow(subset(null_chr512, modelindex == 411 & seed == 1140555014))
id <- null_chr512
for (i in models) {
for (j in seeds) {
if (nrow(subset(null_chr512, modelindex == i & seed == j)) != 1)
id[id$modelindex == i & id$seeds == j]$modseed <- -1
}
}
id[id$modelindex == 411 & id$seed == 1140555014]
id[id$modelindex == 411 && id$seed == 1140555014]
id[id$modelindex == 411 &&& id$seed == 1140555014]
id[id$modelindex == 411]
id[id$modelindex == 411 & id$seed == 1140555014,]
id <- null_chr512
for (i in models) {
for (j in seeds) {
if (nrow(subset(null_chr512, modelindex == i & seed == j)) != 1)
id[id$modelindex == i & id$seed == j,]$modseed <- -1
}
}
id$modseed <- 0
for (i in models) {
for (j in seeds) {
if (nrow(subset(null_chr512, modelindex == i & seed == j)) != 1)
id[id$modelindex == i & id$seed == j,]$modseed <- -1
}
}
View(id)
id[id$modelindex == 411 & id$seed == 2776977750,]
seeds
nrow(subset(null_chr512, modelindex == 263 & seed == 283359780))
nrow(subset(null_chr512, modelindex == 263 & seed == 2414432728))
id <- data.frame (modelindex = rep(0, 25), seed = rep(0, 25))
id <- data.frame (modelindex = rep(0, 25), seed = rep(0, 25))
for (i in models) {
for (j in seeds) {
if (nrow(subset(null_chr512, modelindex == i & seed == j)) == 0)
id[match(i, models)]$modelindex <- i
id[match(i, models)]$seed <- j
}
}
View(id)
id[1]
id[1,]
id <- data.frame (modelindex = rep(0, 25), seed = rep(0, 25))
for (i in models) {
for (j in seeds) {
if (nrow(subset(null_chr512, modelindex == i & seed == j)) == 0)
id[match(i, models),]$modelindex <- i
id[match(i, models),]$seed <- j
}
}
View(id)
seeds
null_chr512[null_chr512$modelindex == 263 & null_chr512$seed == 2414432768,]
seeds
null_chr512[null_chr512$modelindex == 263 & null_chr512$seed == 283359780,]
null_chr512[null_chr512$modelindex == "411" & null_chr512$seed == 283359780,]
null_chr512[null_chr512$modelindex == "263" & null_chr512$seed == 283359780,]
null_chr512[null_chr512$modelindex == "263" & null_chr512$seed == 2414432728,]
null_chr512[null_chr512$modelindex == 263 & null_chr512$seed == 2414432728,]
null_chr512[null_chr512$modelindex == "278" & null_chr512$seed == 2414432728,]
null_chr512[null_chr512$modelindex == "278" & null_chr512$seed == 283359780,]
null_chr512[null_chr512$modelindex == 275 & null_chr512$seed == 283359780,]
null_chr512[null_chr512$modelindex == 275 & null_chr512$seed == 2414432728,]
null_chr512[null_chr512$modelindex ==498 & null_chr512$seed == 2414432728,]
null_chr512[null_chr512$modelindex == 496 & null_chr512$seed == 2414432728,]
null_chr512[null_chr512$modelindex == 470 & null_chr512$seed == 2414432728,]
id <- data.frame (modelindex = rep(0, 25), seed = rep(0, 25))
for (i in models) {
for (j in seeds) {
if (nrow(subset(null_chr512, modelindex == i & seed == j)) == 0)
id[match(i, models),]$modelindex <- i
id[match(i, models),]$seed <- j
}
}
View(id)
seeds
View(id)
nrow(subset(null_chr512, modelindex == 263 & seed == 2414432728))
id <- data.frame (modelindex = rep(0, 25), seed = rep(0, 25))
for (i in models) {
for (j in seeds) {
if (nrow(subset(null_chr512, modelindex == i & seed == j)) != 1)
id[match(i, models),]$modelindex <- i
id[match(i, models),]$seed <- j
}
}
View(id)
id <- data.frame (modelindex = rep(0, 25), seed = rep(0, 25))
for (i in seq_along(models)) {
for (j in seq_along(seeds)) {
if (nrow(subset(null_chr512, modelindex == modelindex[i] & seed == seed[j])) != 1)
id[i,]$modelindex <- i
id[i,]$seed <- j
}
}
View(id)
(nrow(subset(null_chr512, modelindex == modelindex[1] & seed == seed[1]))
)
(nrow(subset(null_chr512, modelindex == models[1] & seed == seeds[1])))
id <- data.frame (modelindex = rep(0, 25), seed = rep(0, 25))
for (i in seq_along(models)) {
for (j in seq_along(seeds)) {
if (nrow(subset(null_chr512, modelindex == models[i] & seed == seeds[j])) != 1) {
id[i,]$modelindex <- i
id[i,]$seed <- j
}
}
}
View(id)
id <- data.frame (modelindex = rep(0, 25), seed = rep(0, 25))
for (i in seq_along(models)) {
for (j in seq_along(seeds)) {
if (nrow(subset(null_chr512, modelindex == models[i] & seed == seeds[j])) != 1) {
id[i,]$modelindex <- models[i]
id[i,]$seed <- seeds[j]
}
}
}
View(id)
id
plot_euc2
?write.csv
write.csv(id, "AIM1_supp_combos.csv")
id[,]
id[,1]
id[1,]
nrow(id)
id[1,]
combo$modelindex
id$modelindex
as.character(id[match(470, combo),]$seed)
as.character(id[match(470, id),]$seed)
as.character(id[match(470, id$modelindex),]$seed)
