i <- i
ggplot(dplot_null_cat,
aes_string(x = "delmu.cat", y = var_iter)) +
geom_col(fill = "white", colour = "black") +
geom_errorbar(aes_string(ymin = paste(var_iter, '-', var_iterse), ymax = paste(var_iter, '+', var_iterse)), width = 0.2) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "Background selection", y = paste0("Variance (Trait ", i, ")"))
})
rm(var_iter)
rm(var_iterse)
}
library(tidyverse)
for (i in 0:7) {
message(i)
var_iter <- paste0("var", i, "_groupmean")
var_iterse <- paste0("var", i, "_se")
var_plots[[i]] <- local({
var_iter <- var_iter
var_iterse <- var_iterse
i <- i
ggplot(dplot_null_cat,
aes_string(x = "delmu.cat", y = var_iter)) +
geom_col(fill = "white", colour = "black") +
geom_errorbar(aes_string(ymin = paste(var_iter, '-', var_iterse), ymax = paste(var_iter, '+', var_iterse)), width = 0.2) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "Background selection", y = paste0("Variance (Trait ", i, ")"))
})
rm(var_iter)
rm(var_iterse)
}
source("src_plot.R")
View(dplot_null_cat)
colnames(dplot_null_cat[,2:9])
colnames(dplot_null_cat[2:9])
colnames(dplot_null_cat[1])
View(dplot_null_cat)
9+26
colnames(dplot_null_cat[35])
colnames(dplot_null_cat[39])
colnames(dplot_null_cat[47])
colnames(dplot_null_cat[45])
colnames(dplot_null_cat[46])
colnames(dplot_null_cat[39:46])
source("src_plot.R")
var_plots <- lapply(colnames(dplot_null_cat[2:9]), plot_data_column, data = dplot_null_cat,
x_dat = colnames(dplot_null_cat[1]), columnse = colnames(dplot_null_cat[39:46]),
xlabel = "Background selection")
source("src_plot.R")
var_plots <- lapply(colnames(dplot_null_cat[2:9]), plot_data_column, data = dplot_null_cat,
x_dat = colnames(dplot_null_cat[1]),
xlabel = "Background selection")
print(var_plots[[1]])
print(var_plots[[2]])
var_plots <- lapply(colnames(dplot_null_cat[2:9]), plot_data_column, data = dplot_null_cat,
x_dat = colnames(dplot_null_cat[1]), columnse = colnames(dplot_null_cat[39:46]),
xlabel = "Background selection")
source("src_plot.R")
var_plots <- lapply(colnames(dplot_null_cat[2:9]), plot_data_column, data = dplot_null_cat,
x_dat = colnames(dplot_null_cat[1]), columnse = colnames(dplot_null_cat[39:46]),
xlabel = "Background selection")
SEs <- colnames(dplot_null_cat[39:46])
var_plots <- lapply(colnames(dplot_null_cat[2:9]), plot_data_column, data = dplot_null_cat,
x_dat = colnames(dplot_null_cat[1]), columnse = SEs,
xlabel = "Background selection")
vars_names <- matrix(c(colnames(dplot_null_cat[2:9]), colnames(dplot_null_cat[39:46])), nrow = 8)
vars_names
vars_names <- matrix(c(colnames(dplot_null_cat[2:9]), colnames(dplot_null_cat[39:46])), nrow = 8, bycol = T)
vars_names <- matrix(c(colnames(dplot_null_cat[2:9]), colnames(dplot_null_cat[39:46])), nrow = 8, byrow = T)
vars_names
vars_names <- matrix(c(colnames(dplot_null_cat[2:9]), colnames(dplot_null_cat[39:46])), nrow = 8, byrow = F)
vars_names
source("src_plot.R")
var_plots <- lapply(vars_names, plot_data_column, data = dplot_null_cat,
x_dat = colnames(dplot_null_cat[1]),
xlabel = "Background selection")
?apply
var_plots <- apply(vars_names, 1, plot_data_column, data = dplot_null_cat,
x_dat = colnames(dplot_null_cat[1]),
xlabel = "Background selection")
?mapply
vars_names <- matrix(c(colnames(dplot_null_cat[2:9]), colnames(dplot_null_cat[39:46])), nrow = 8, byrow = F)
var_plots <- mapply(FUN = plot_data_column, vars_names, MoreArgs = list(data = dplot_null_cat,
x_dat = colnames(dplot_null_cat[1]),
xlabel = "Background selection"))
source("src_plot.R")
var_plots <- mapply(FUN = plot_data_column, column = colnames(dplot_null_cat[2:9]), columnse = colnames(dplot_null_cat[39:46]), MoreArgs = list(data = dplot_null_cat,
x_dat = colnames(dplot_null_cat[1]),
xlabel = "Background selection"))
print(var_plots[[1]])
var_plots[[1]]
var_plots[1]
print(var_plots[1])
print(var_plots[1])
source("src_plot.R")
var_plots <- lapply(vars_names, plot_data_column, data = dplot_null_cat,
x_dat = colnames(dplot_null_cat[1]),
xlabel = "Background selection")
var_plots[[1]]
var_plots[1]
source("src_plot.R")
var_plots <- lapply(vars_names, plot_data_column, data = dplot_null_cat,
x_dat = colnames(dplot_null_cat[1]),
xlabel = "Background selection")
var_plots[[1]]
var_plots[[2]]
var_plots[[8]]
var_plots <- lapply(colnames(dplot_null_cat[2:9]), plot_data_column, data = dplot_null_cat,
x_dat = colnames(dplot_null_cat[1]),
xlabel = "Background selection")
var_plots[[1]]
View(d_null)
dplot_nullcov_cat <- d_null[,c(108, 51:78, 107)] %>%
group_by(delmu.cat) %>%
summarise_all(list(groupmean = mean, se = std.error))
View(dplot_nullcov_cat)
dplot_nullcov_cat <- d_null[,c(108, 51:78)] %>%
group_by(delmu.cat) %>%
summarise_all(list(groupmean = mean, se = std.error))
colnames(dplot_nullcov_cat[28])
colnames(dplot_nullcov_cat[29])
colnames(dplot_nullcov_cat[30])
View(dplot_null_cat)
colnames(dplot_null_cat[10])
colnames(dplot_null_cat[37])
cov_plots <- lapply(colnames(dplot_null_cat[10:37]), plot_data_column, data = dplot_null_cat,
x_dat = colnames(dplot_null_cat[1]),
xlabel = "Background selection")
cov_plots[[1]]
cov_plots[[2]]
cov_plots[[3]]
cov_plots[[16]]
colnames(dplot_null_cat[38])
het_plot <-  ggplot(dplot_null_cat, aes_string(x = delmu.cat, y = H_groupmean)) +
geom_col(fill = "white", colour = "black") +
geom_errorbar(aes_string(ymin = paste(H_groupmean, '-', H_se), ymax = paste(H_groupmean, '+', H_se)), width = 0.2) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "Background selection", y = "Genome-wide heterozygosity")
het_plot <-  ggplot(dplot_null_cat, aes(x = delmu.cat, y = H_groupmean)) +
geom_col(fill = "white", colour = "black") +
geom_errorbar(aes_string(ymin = paste(H_groupmean, '-', H_se), ymax = paste(H_groupmean, '+', H_se)), width = 0.2) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "Background selection", y = "Genome-wide heterozygosity")
het_plot <-  ggplot(dplot_null_cat, aes(x = delmu.cat, y = H_groupmean)) +
geom_col(fill = "white", colour = "black") +
geom_errorbar(aes(ymin = H_groupmean - H_se, ymax = H_groupmean + H_se), width = 0.2) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "Background selection", y = "Genome-wide heterozygosity")
het_plot
# Cut delmu into a categorical variable: have to do this to average out effects of other parameters, which are approximately uniformally distributed in any given bin of delmu
d_null$delmu.cat <- cut(d_null$delmu, breaks = 8)
# Get means and standard errors of data for plotting variance
dplot_null_cat <- d_null[,c(108, 43:78, 107)] %>%
group_by(delmu.cat) %>%
summarise_all(list(groupmean = mean, se = std.error))
dplot_null <- d_null[,c(6, 43:78, 107)] %>%
group_by(delmu) %>%
summarise_all(list(groupmean = mean, se = std.error))
rm(dplot_nullcov_cat)
var_plots <- lapply(colnames(dplot_null_cat[2:9]), plot_data_column, data = dplot_null_cat,
x_dat = colnames(dplot_null_cat[1]),
xlabel = "Background selection")
var_plots[[1]]
cov_plots <- lapply(colnames(dplot_null_cat[10:37]), plot_data_column, data = dplot_null_cat,
x_dat = colnames(dplot_null_cat[1]),
xlabel = "Background selection")
het_plot <-  ggplot(dplot_null_cat, aes(x = delmu.cat, y = H_groupmean)) +
geom_col(fill = "white", colour = "black") +
geom_errorbar(aes(ymin = H_groupmean - H_se, ymax = H_groupmean + H_se), width = 0.2) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "Background selection", y = "Genome-wide heterozygosity")
het_plot
source("src_G_mat.R")
source("src_plot.R")
Het_line <- ggplot(dplot_null_cat, aes(x = delmu.cat, y = H_groupmean)) +
geom_line() +
geom_errorbar(aes(ymin = H_groupmean - H_se, ymax = H_groupmean + H_se), width = 0.2) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "Background selection", y = "Genome-wide heterozygosity")
Het_line
Het_line <- ggplot(dplot_null_cat, aes(x = delmu.cat, y = H_groupmean)) +
geom_path() +
geom_errorbar(aes(ymin = H_groupmean - H_se, ymax = H_groupmean + H_se), width = 0.2) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "Background selection", y = "Genome-wide heterozygosity")
Het_line
rm(Het_line)
install.packages("rrapply")
H <- d_null[107]
H[1]
H[2]
H
H[,2]
H[1,]
H[2,]
source("src_G_mat.R")
source("src_G_mat.R")
rm(H)
het_plot[[1]]
het_plot
het_plot <-  ggplot(dplot_null_cat, aes(x = delmu.cat, y = H_groupmean)) +
geom_line(fill = "white", colour = "black") +
geom_errorbar(aes(ymin = H_groupmean - H_se, ymax = H_groupmean + H_se), width = 0.2) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "Background selection", y = "Genome-wide heterozygosity")
library(tidyverse)
het_plot <-  ggplot(dplot_null_cat, aes(x = delmu.cat, y = H_groupmean)) +
geom_line(fill = "white", colour = "black") +
geom_errorbar(aes(ymin = H_groupmean - H_se, ymax = H_groupmean + H_se), width = 0.2) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "Background selection", y = "Genome-wide heterozygosity")
het_plot <-  ggplot(dplot_null_cat, aes(x = delmu.cat, y = H_groupmean)) +
geom_line() +
geom_errorbar(aes(ymin = H_groupmean - H_se, ymax = H_groupmean + H_se), width = 0.2) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "Background selection", y = "Genome-wide heterozygosity")
het_plot
het_plot <-  ggplot(dplot_null_cat, aes(x = delmu.cat, y = H_groupmean)) +
geom_path() +
geom_errorbar(aes(ymin = H_groupmean - H_se, ymax = H_groupmean + H_se), width = 0.2) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "Background selection", y = "Genome-wide heterozygosity")
het_plot
het_plot <-  ggplot(dplot_null_cat, aes(x = delmu.cat, y = H_groupmean, group = 1)) +
geom_line() +
geom_errorbar(aes(ymin = H_groupmean - H_se, ymax = H_groupmean + H_se), width = 0.2) +
theme_classic() +
theme(legend.position = "none") +
labs(x = "Background selection", y = "Genome-wide heterozygosity")
het_plot
source("src_plot.R")
var_plots <- lapply(colnames(dplot_null_cat[2:9]), plot_data_line, data = dplot_null_cat,
x_dat = colnames(dplot_null_cat[1]),
xlabel = "Background selection")
var_plots[[1]]
var_plots[[2]]
var_plots[[3]]
var_plots[[4]]
var_plots[[5]]
var_plots[[6]]
var_plots[[7]]
var_plots[[8]]
cov_plots <- lapply(colnames(dplot_null_cat[10:37]), plot_data_line, data = dplot_null_cat,
x_dat = colnames(dplot_null_cat[1]),
xlabel = "Background selection")
cov_plots[[8]]
cov_plots[[1]]
cov_plots[[2]]
cov_plots[[3]]
cov_plots[[4]]
cov_plots[[5]]
cov_plots[[6]]
cov_plots[[7]]
var_plots[[1]]
var_plots[[2]]
var_plots[[3]]
var_plots[[8]]
cov_plots[[1]]
cov_plots[[2]]
cov_plots[[15]]
cov_plots[[17]]
cov_plots[[18]]
het_plot
View(dplot_null_cat)
View(dplot_null)
write.table(dplot_null, "d_vars_H.csv")
getwd()
write.table(dplot_null, "d_vars_H.csv", sep = ",")
View(d_null)
dplot_null <- d_null[,c(3, 5:6, 43:78, 107)] %>%
group_by(modelindex) %>%
summarise_all(list(groupmean = mean, se = std.error))
library(tidyverse)
dplot_null <- d_null[,c(3, 5:6, 43:78, 107)] %>%
group_by(modelindex) %>%
summarise_all(list(groupmean = mean, se = std.error))
View(dplot_null)
dplot_null <- d_null[,c(3, 5:6, 43:78, 107)] %>%
group_by(modelindex, delmu, rwide) %>%
summarise_all(list(groupmean = mean, se = std.error))
View(d_null)
View(dplot_null)
write.table(dplot_null, "d_means.csv", sep = ",")
write.table(dplot_null, "d_means.csv", sep = ",", row.names = F)
# Add actual pleiocov line (value from the latin hypercube)
ls_combos <- data.frame("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/R/pilot_runs/Pilot_Project/lscombos_null.csv")
View(ls_combos)
# Add actual pleiocov line (value from the latin hypercube)
ls_combos <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/R/pilot_runs/Pilot_Project/lscombos_null.csv")
View(ls_combos)
View(dplot_null)
View(dplot_null)
lscombos[1:256]
ls_combos[1:256]
ls_combos[1:256,]
dplot_null$pleiocov <- ls_combos[1:256,]$pleiocov
dplot_null$locisigma <- ls_combos[1:256,]$locisigma
dplot_null$pleiorate <- ls_combos[1:256,]$pleiocov
head(dplot_null[,80]
)
head(dplot_null[,76])
head(dplot_null[,77])
head(dplot_null[,78])
head(dplot_null[,79])
dplot_null <- dplot_null[,c(1:3, 78, 80, 79, 4:77)]
View(dplot_null)
dplot_null$pleiorate <- ls_combos[1:256,]$pleiorate
dplot_null$locisigma <- ls_combos[1:256,]$locisigma
dplot_null$pleiocov <- ls_combos[1:256,]$pleiocov
View(dplot_null)
d_null2 <- d_null[order(modelindex),]
View(d_null2)
d_null <- d_null[order(modelindex),]
rm(d_null2)
d_null$pleiocov <- rep(ls_combos[1:256,]$pleiocov, each = 100) # Repeat each by 100 seeds
d_null$locisigma <- rep(ls_combos[1:256,]$locisigma, each = 100)
d_null$pleiorate <- rep(ls_combos[1:256,]$pleiorate, each - 100)
View(d_null)
d_null <- d_null[,c(1:6, 108, 110, 109, 7:107)]
View(d_null)
d_null[1,110]
d_null[1,109]
d_null$pleiorate <- rep(ls_combos[1:256,]$pleiorate, each - 100)
d_null$pleiorate <- rep(ls_combos[1:256,]$pleiorate, each = 100)
d_null <- d_nul[,c(1:6, 111, 7:110)]
d_null <- d_null[,c(1:6, 111, 7:110)]
d_null[1,111]
d_null[1,47]
d_null[1,82]
dplot_null <- d_null[,c(3, 5:7, 9:10, 47:82, 111)] %>%
group_by(modelindex, delmu, rwide, pleiocov, pleiorate, locisigma) %>%
summarise_all(list(groupmean = mean, se = std.error))
View(dplot_null)
write.table(dplot_null, "d_means.csv", sep = ",", row.names = F)
max(c(1, 2, 3, 2))
max(c(1, 2, 3, 3))
# Import data
sel_chr112 <- read.csv("F:/Uni/AIM3/OUTPUT/out_8T_stabsel_chr_112.csv", header = F)
names(sel_chr112)[1:2] <- c("modelindex", "seed")
length(unique(sel_chr112$modelindex)) # Yep, we're missing stuff: 25 stuffs to be precise
length(unique(sel_chr112$seed))
# Chop the dataframe to something more manageable, we only need seeds and models
# Then identify which models and seeds have stuff missing
sel_chr112 <- sel_chr112[c(1:2)]
library(plyr)
models <- count(sel_chr112$modelindex)
models <- models$x[models$freq < 100] # Which models have been repeated less than 100 times (there are 100 seeds)?
seeds <- count(sel_chr112$seed)
seeds <- seeds[seeds$freq < 16,]$x # which seeds have been repeated less than 16 times (there are 16 models)?
# Set up new frame to store our 25 rogue combinations in
id <- data.frame (modelindex = rep(0, 25), seed = rep(0, 25))
# For each combination of model and seed, figure out which combinations don't have an entry in null_chr512, then
# put them in id
for (i in seq_along(models)) {
for (j in seq_along(seeds)) {
if (nrow(subset(sel_chr112, modelindex == models[i] & seed == seeds[j])) != 1) {
id[i,]$modelindex <- models[i]
id[i,]$seed <- seeds[j]
}
}
}
id
models
seeds
nrow(subset(sel_chr112, modelindex == models[i] & seed == seeds[j]))
# For each combination of model and seed, figure out which combinations don't have an entry in sel_chr112, then
# put them in id
for (i in seq_along(seeds)) {
for (j in seq_along(models)) {
if (nrow(subset(sel_chr112, modelindex == models[i] & seed == seeds[j])) != 1) {
id[i,]$modelindex <- models[j]
id[i,]$seed <- seeds[i]
}
}
}
id
rm(id)
rm(i)
rm(j)
models <- count(sel_chr112$modelindex)
models <- models$x[models$freq < 100] # Which models have been repeated less than 100 times (there are 100 seeds)?
seeds <- count(sel_chr112$seed)
seeds <- seeds[seeds$freq < 16,]$x # which seeds have been repeated less than 16 times (there are 16 models)?
# Set up new frame to store our 24 rogue combinations in
id <- data.frame (modelindex = rep(0, 24), seed = rep(0, 24))
# For each combination of model and seed, figure out which combinations don't have an entry in sel_chr112, then
# put them in id
for (i in seq_along(seeds)) {
for (j in seq_along(models)) {
if (nrow(subset(sel_chr112, modelindex == models[i] & seed == seeds[j])) != 1) {
id[i,]$modelindex <- models[j]
id[i,]$seed <- seeds[i]
}
}
}
id
models
seeds
library(tidyverse)
modseeds <- crossing(models, seeds)
modseeds
modseeds$models[1]
# Set up new frame to store our 24 rogue combinations in
id <- data.frame(matrix(ncol = 2, nrow = 0))
names(id) <- c("model", "seed")
View(id)
# Set up new frame to store our 24 rogue combinations in
id <- data.frame(matrix(ncol = 2, nrow = 0))
names(id) <- c("model", "seed")
# For each combination of model and seed, figure out which combinations don't have an entry in sel_chr112, then
# put them in id
for (i in seq_along(modseeds)) {
if (nrow(subset(sel_chr112, modelindex == modseeds$models[i] & seed == modseeds$seeds[i])) != 1)
missing_new <- data.frame(modseeds[i]$models, modseeds[i]$seeds)
names(missing_new) <- c("model", "seed")
id <- rbind(id, missing_new)
}
# For each combination of model and seed, figure out which combinations don't have an entry in sel_chr112, then
# put them in id
for (i in seq_along(modseeds)) {
if (nrow(subset(sel_chr112, modelindex == modseeds$models[i] & seed == modseeds$seeds[i])) != 1) {
missing_new <- data.frame(modseeds[i]$models, modseeds[i]$seeds)
names(missing_new) <- c("model", "seed")
id <- rbind(id, missing_new)
}
}
View(id)
# For each combination of model and seed, figure out which combinations don't have an entry in sel_chr112, then
# put them in id
for (i in seq_along(modseeds)) {
if (nrow(subset(sel_chr112, modelindex == modseeds$models[i] & seed == modseeds$seeds[i])) != 1) {
missing_new <- data.frame(model = modseeds[i]$models, seed = modseeds[i]$seeds)
id <- rbind(id, missing_new)
}
}
# Set up new frame to store our 24 rogue combinations in
id <- data.frame(model = 1, seed, 1)
# Set up new frame to store our 24 rogue combinations in
id <- data.frame(model = 1, seed = 1)
# For each combination of model and seed, figure out which combinations don't have an entry in sel_chr112, then
# put them in id
for (i in seq_along(modseeds)) {
if (nrow(subset(sel_chr112, modelindex == modseeds$models[i] & seed == modseeds$seeds[i])) != 1) {
missing_new <- data.frame(model = modseeds[i]$models, seed = modseeds[i]$seeds)
id <- rbind(id, missing_new)
}
}
seq_along(modseeds)
seq_along(modseeds$models)
seq_len(modseeds)
# For each combination of model and seed, figure out which combinations don't have an entry in sel_chr112, then
# put them in id
for (i in seq_along(modseeds$models)) {
if (nrow(subset(sel_chr112, modelindex == modseeds$models[i] & seed == modseeds$seeds[i])) != 1) {
missing_new <- data.frame(model = modseeds[i]$models, seed = modseeds[i]$seeds)
id <- rbind(id, missing_new)
}
}
modseeds$models[7]
modseeds$seeds[7]
# Set up new frame to store our 24 rogue combinations in
id <- data.frame(model = 1, seed = 1)
# For each combination of model and seed, figure out which combinations don't have an entry in sel_chr112, then
# put them in id
for (i in seq_along(modseeds$models)) {
if (nrow(subset(sel_chr112, modelindex == modseeds$models[i] & seed == modseeds$seeds[i])) != 1) {
missing_new <- data.frame(model = modseeds$models[i], seed = modseeds$seeds[i])
id <- rbind(id, missing_new)
}
}
View(id)
id[1,]
id <- id[-1,]
View(id)
id <- id
View(id)
id
row.names(id) <- NULL
id
write.csv(id, "AIM3_supp_combos.csv")
id <- read.csv("AIM3_supp_combos.csv")
id
tau
tau(1)
id[,1]$seed
id[1,]$seed
id[1,]$model
id$X
id$x
id$X
install.packages(c("ggforce", "shape"))
View(d_null)
d_null[1,43]
d_null[1,48]
d_null[1,47]
d_null[1,82]
d_null[1,83]
d_null[1,109]
d_null[1,110]
d_null[1,111]
d_null[1,6]
