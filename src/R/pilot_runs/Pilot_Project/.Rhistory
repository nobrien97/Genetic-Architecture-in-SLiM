RandomSkewers(G_null_mat)
library(evolqg)
G_null_mat
d_null <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/pilot_runs/Output/out_8T_null_means.csv", header = F)
d_null <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/pilot_runs/Output/out_8T_null_means.csv", header = F)
names(d_null)[1:7]<- c("gen", "seed", "modelindex", "rsd", "rwide", "delmu", "nloci")
# pleiocov terms
names(d_null)[8:35] <-  c(paste0("pleiocov_0", 1:7), paste0("pleiocov_1", 2:7), paste0("pleiocov_2", 3:7), paste0("pleiocov_3", 4:7), paste0("pleiocov_4", 5:7), paste0("pleiocov_5", 6:7), paste0("pleiocov_6", 7))
names(d_null)[36] <- "Ne"
names(d_null)[37:44] <- paste0("mean", 0:7)
names(d_null)[45:52] <- paste0("var", 0:7)
names(d_null)[53:80] <- c(paste0("phenocov_0", 1:7), paste0("phenocov_1", 2:7), paste0("phenocov_2", 3:7), paste0("phenocov_3", 4:7), paste0("phenocov_4", 5:7), paste0("phenocov_5", 6:7), paste0("phenocov_6", 7))
names(d_null)[81:108] <- c(paste0("phenocor_0", 1:7), paste0("phenocor_1", 2:7), paste0("phenocor_2", 3:7), paste0("phenocor_3", 4:7), paste0("phenocor_4", 5:7), paste0("phenocor_5", 6:7), paste0("phenocor_6", 7))
names(d_null)[109:118] <- paste0("H_chr", 0:9)
library(dplyr)
d_sbstfinal_null <- as_tibble(d_null[d_null$gen == 150000,])
d_null_mat <- select(d_sbstfinal_null, gen, seed, modelindex, paste0("var", 0:7), c(paste0("phenocov_0", 1:7), paste0("phenocov_1", 2:7), paste0("phenocov_2", 3:7), paste0("phenocov_3", 4:7), paste0("phenocov_4", 5:7), paste0("phenocov_5", 6:7), paste0("phenocov_6", 7)))
View(d_null_mat)
mat_mean(mat_gen(d_null_mat))
G_null_mat <- d_null_mat %>%
group_by(gen, modelindex) %>%
summarise_all(list(matmean = mat_mean(mat_gen), matse = mat_se(mat_gen)))
G_null_mat <- d_null_mat %>%
group_by(gen, modelindex) %>%
summarise_all(list(mats = mat_gen))
G_null_mat <- d_null_mat %>%
group_by(gen, modelindex) %>%
summarise_all(mats = mat_gen)
d_null_mat <- as_tibble(d_null_mat)
G_null_mat <- d_null_mat %>%
group_by(gen, modelindex) %>%
summarise_all(list(mats = mat_gen))
G_null_mat <- d_null_mat %>%
group_by(gen, modelindex)
View(G_null_mat)
length(d_null)
length(G_null_mat)
nrow(G_null_mat)
?assign
mat_analyse <- function(dat) {
seeds <- length(unique(dat$seed))
n <- nrow(dat)
tapply(dat$modelindex, FUN=mat_mean(mat_gen))
}
mat_analyse(d_null_mat)
mat_analyse <- function(dat) {
seeds <- length(unique(dat$seed))
n <- nrow(dat)
tapply(dat$modelindex, FUN=mat_mean)
}
mat_analyse(d_null_mat)
d_null$seed <- as.factor(d_null$seed)
d_sbstfinal_null <- as_tibble(d_null[d_null$gen == 150000,])
d_null_mat <- select(d_sbstfinal_null, gen, seed, modelindex, paste0("var", 0:7), c(paste0("phenocov_0", 1:7), paste0("phenocov_1", 2:7), paste0("phenocov_2", 3:7), paste0("phenocov_3", 4:7), paste0("phenocov_4", 5:7), paste0("phenocov_5", 6:7), paste0("phenocov_6", 7)))
mat_analyse <- function(dat) {
seeds <- length(unique(dat$seed))
n <- nrow(dat)
tapply(dat, dat$modelindex, mat_mean)
}
mat_analyse(d_null_mat)
View(G_null_mat)
mat_gen(d_null_mat)
?split
mat_analyse <- function(dat, seeds=nrow(unique(dat$seed))) {
dat <- split(as.matrix(dat), seeds)
matlist <- lapply(dat, dat_to_mat)
matmean <- lapply(matlist, mat_mean)
matmean
}
mat_analyse(d_null_mat)
mat_analyse(d_null_mat, 3)
mat_analyse <- function(dat, seeds=nrow(unique(dat$seed))) {
dat <- split(as.matrix(dat), seeds)
matlist <- lapply(dat, dat_to_mat)
matlist
}
mat_analyse(d_null_mat, 3)
mat_analyse <- function(dat, seeds=nrow(unique(dat$seed))) {
dat <- split(as.matrix(dat), row(dat$seed))
matlist <- lapply(dat, dat_to_mat)
matlist
}
mat_analyse(d_null_mat, 3)
mat_analyse <- function(dat, seeds=nrow(unique(dat$seed))) {
dat <- split(as.matrix(dat), dat$modelindex)
matlist <- lapply(dat, dat_to_mat)
matlist
}
mat_analyse(d_null_mat, 3)
mat_analyse <- function(dat, seeds=nrow(unique(dat$seed))) {
dat <- split(as.matrix(dat), interaction(dat$modelindex, dat$seed))
matlist <- lapply(dat, dat_to_mat)
matlist
}
mat_analyse <- function(dat, seeds=nrow(unique(dat$seed))) {
dat <- split(as.matrix(dat), dat$modelindex)
matlist <- lapply(dat, dat_to_mat)
matlist
}
mat_analyse(d_null_mat, 3)
mat_analyse <- function(dat, seeds=nrow(unique(dat$seed))) {
dat <- split(as.matrix(dat), dat$modelindex)
dat <- split(as.matrix(dat), row(dat))
matlist <- lapply(dat, dat_to_mat)
matlist
}
mat_analyse(d_null_mat, 3)
mat_analyse <- function(dat, seeds=nrow(unique(dat$seed))) {
dat <- split(as.matrix(dat), dat$modelindex)
dat <- lapply(dat, split(as.matrix(dat), row(dat)))
matlist <- lapply(dat, dat_to_mat)
matlist
}
mat_analyse(d_null_mat, 3)
mat_analyse <- function(dat, seeds=nrow(unique(dat$seed))) {
dat <- split(as.matrix(dat), list(dat$modelindex, dat$row))
matlist <- lapply(dat, dat_to_mat)
matlist
}
mat_analyse(d_null_mat, 3)
mat_analyse <- function(dat, seeds=nrow(unique(dat$seed))) {
dat <- split(as.matrix(dat), list(dat$modelindex, row(dat)))
matlist <- lapply(dat, dat_to_mat)
matlist
}
mat_analyse(d_null_mat, 3)
mat_analyse <- function(dat, seeds=nrow(unique(dat$seed))) {
dat <- split(as.matrix(dat), dat$modelindex)
matlist <- lapply(dat, dat_to_mat)
matlist
}
mat_analyse <- function(dat, seeds=nrow(unique(dat$seed))) {
dat <- split(as.matrix(dat), dat$modelindex)
matlist <- lapply(dat, mat_gen)
matlist
}
mat_analyse(d_null_mat, 3)
mat_analyse <- function(dat) {
datm <- split(as.matrix(dat), dat$modelindex)
matlist <- lapply(datm, mat_gen)
matlist
}
mat_analyse(d_null_mat)
mat_analyse <- function(dat) {
datm <- as.array(split(as.matrix(dat), dat$modelindex))
matlist <- lapply(datm, mat_gen)
matlist
}
mat_analyse(d_null_mat)
datm <- split(as.matrix(d_null_mat), d_null_mat$modelindex)
View(datm)
datm[1]
str(datm)
str(datm[1])
is.data.frame(datm)
is.data.frame(datm[1])
d_sbstfinal_null <- d_null[d_null$gen == 150000,]
d_null_mat <- select(d_sbstfinal_null, gen, seed, modelindex, paste0("var", 0:7), c(paste0("phenocov_0", 1:7), paste0("phenocov_1", 2:7), paste0("phenocov_2", 3:7), paste0("phenocov_3", 4:7), paste0("phenocov_4", 5:7), paste0("phenocov_5", 6:7), paste0("phenocov_6", 7)))
datm <- split(as.matrix(d_null_mat), d_null_mat$modelindex)
is.data.frame(datm[1])
datm[1]
d_sbstfinal_null <- as_tibble(d_null[d_null$gen == 150000,])
d_null_mat <- select(d_sbstfinal_null, gen, seed, modelindex, paste0("var", 0:7), c(paste0("phenocov_0", 1:7), paste0("phenocov_1", 2:7), paste0("phenocov_2", 3:7), paste0("phenocov_3", 4:7), paste0("phenocov_4", 5:7), paste0("phenocov_5", 6:7), paste0("phenocov_6", 7)))
datm <- group_split(d_null_mat, modelindex)
str(datm[[1]])
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen)
matlist
}
mat_analyse
mat_analyse(d_null_mat)
datm <- mat_analyse(d_null_mat)
datm[[1]]
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen)
lapply(matlist, mat_mean)
}
mat_analyse(d_null_mat)
mat_mean(G_null_mat)
mat_mean(G_null_mat)
mat_mean(G_null_mat_mi2)
mat_mean <- function(mats) {
n <- length(mats)
mats <- array(unlist(mats), c(8, 8, n))
rowMeans(mats, dim = 2)
}
mat_mean(G_null_mat_mi2)
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen)
lapply(matlist, mat_mean)
}
mat_analyse(d_null_mat)
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen)
matlist
}
datm <- mat_analyse(d_nul_mat)
datm <- mat_analyse(d_null_mat)
View(datm)
mat_mean <- function(mats) {
n <- length(mats)
mats <- array(as.numeric(unlist(mats)), c(8, 8, n))
rowMeans(mats, dim = 2)
}
mat_mean(datm)
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen)
lapply(datm, mat_mean)
}
mat_analyse(d_null_mat)
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen)
matlist
#  lapply(datm, mat_mean)
}
datm <- mat_analyse(d_null_mat)
n <- length(datm)
mats <- array(as.numeric(unlist(datm)), c(8, 8, n))
mats
n <- length(datm[1])
datm[1]
n <- length(datm[[1]])
mats <- array(as.numeric(unlist(datm[[1]])), c(8, 8, n))
mats
rowMeans(mats, dims = 2)
mat_mean <- function(mats) {
n <- length(mats)
mats <- array(as.numeric(unlist(mats)), c(8, 8, n))
rowMeans(mats, dims = 2)
}
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen)
lapply(datm, mat_mean)
}
mat_analyse(d_null_mat)
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen)
lapply(datm, mat_mean)
}
mat_mean <- function(mats) {
n <- length(mats)
mats <- array(as.numeric(unlist(mats)), c(8, 8, n))
rowMeans(mats, dims = 2)
}
mat_analyse(d_null_mat)
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen)
matlist
}
mat_analyse(d_null_mat)
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- as.numeric(lapply(datm, mat_gen))
matlist
}
mat_analyse(d_null_mat)
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(as.numeric(datm, mat_gen))
matlist
}
mat_analyse(d_null_mat)
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(as.numeric(datm), mat_gen)
matlist
}
mat_analyse(d_null_mat)
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(as.numeric(datm), mat_gen)
matlist
}
mat_analyse(d_null_mat)
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen))
matlist
}
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen)
matlist
}
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen))
matlist
}
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen)
matlist
}
mat_analyse(d_null_mat)
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen)
matlist
}
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen)
lapply(matlist, function(x) { lapply(x, mat_mean) } )
}
mat_analyse(d_null_mat)
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen)
lapply(matlist, function(x) { lapply(matlist[[x]], mat_mean) } )
}
mat_analyse(d_null_mat)
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen)
lapply(matlist, function(x) { lapply(matlist[x], mat_mean) } )
}
mat_analyse(d_null_mat)
setwd("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/R/pilot_runs")
rsample <- as.character(runif(20, 1, (2^62 - 1)))
write.table(rbind(rsample), file = "seeds.csv", row.names = FALSE, col.names = FALSE, sep=",")
write.table(rbind(rsample), file = "seeds.csv", row.names = FALSE, col.names = FALSE, sep=",")
write.table(cbind(rsample), file = "seeds.csv", row.names = FALSE, col.names = FALSE, sep=",")
rsample <- read.csv("seeds.csv", header = F)
write.table(rbind(rsample), file = "seeds.csv", row.names = FALSE, col.names = FALSE, sep=",")
rsample <- read.csv("seeds.csv", header = F)
write.table(rbind(rsample), file = "seeds.csv", row.names = FALSE, col.names = FALSE, sep=",")
rsample <- as.character(as.vector(t(rsample)))
write.table(cbind(rsample), file = "seeds.csv", row.names = FALSE, col.names = FALSE, sep=",")
rsample <- read.csv("seeds.csv", header = F)
rsample <- as.character(as.vector(t(rsample)))
length(datm)
lengths(datm)
lengths(datm)[1]
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen) # mat_gen splits each model into its seed rows, stores them as a list
outlen <- length(matlist)
inlen <- lengths(matlist)[1] # Assumes equal replicates per group!
prod <- outlen*inlen
matunlist <- unlist(matlist, F)
lapply(1:inlen, function(x) {
Reduce('+', matunlist[seq(x, prod, by = inlen)])/outlen    # Thanks to https://stackoverflow.com/questions/14440904/how-to-calculate-the-mean-of-list-of-list-of-matrices-in-r
})
}
mat_analyse(d_null_mat)
mat_mean <- function(mats) {
n <- length(mats)
mats <- array(as.numeric(unlist(mats)), c(8, 8, n))
rowMeans(mats, dims = 2)
}
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen) # mat_gen splits each model into its seed rows, stores them as a list
outlen <- length(matlist)
inlen <- lengths(matlist)[1] # Assumes equal replicates per group!
prod <- outlen*inlen
matunlist <- unlist(matlist, F)
lapply(1:inlen, function(x) {
Reduce('+', matunlist[seq(x, prod, by = inlen)])/outlen    # Thanks to https://stackoverflow.com/questions/14440904/how-to-calculate-the-mean-of-list-of-list-of-matrices-in-r
})
}
mat_analyse(d_null_mat)
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen) # mat_gen splits each model into its seed rows, stores them as a list
outlen <- length(matlist)
inlen <- lengths(matlist)[1] # Assumes equal replicates per group!
prod <- outlen*inlen
matunlist <- as.numeric(unlist(matlist, F))
lapply(1:inlen, function(x) {
Reduce('+', matunlist[seq(x, prod, by = inlen)])/outlen    # Thanks to https://stackoverflow.com/questions/14440904/how-to-calculate-the-mean-of-list-of-list-of-matrices-in-r
})
}
mat_analyse(d_null_mat)
mat_gen <- function(dat) {
dat <- split(as.matrix(dat), row(dat))
apply(dat, 1, dat_to_mat)
}
mat_gen(d_null_mat)
mat_gen <- function(dat) {
dat <- split(as.matrix(dat), row(dat))
apply(dat, 2, dat_to_mat)
}
mat_gen(d_null_mat)
mat_gen <- function(dat) {
dat <- split(as.matrix(dat), row(dat))
lapply(dat, dat_to_mat)
}
mat_gen(d_null_mat)
?split
dat_to_mat <- function(dat) {
dat <- as.vector(t(dat))
vars <- dat[4:11]
covs <- dat[12:39]
M <- matrix(data = c(
vars[1], covs[1:7],
covs[1], vars[2], covs[8:13],
covs[c(2, 8)], vars[3], covs[14:18],
covs[c(3, 9, 14)], vars[4], covs[19:22],
covs[c(4, 10, 15, 19)], vars[5], covs[23:25],
covs[c(5, 11, 16, 20, 23)], vars[6], covs[26:27],
covs[c(6, 12, 17, 21, 24, 26)], vars[7], covs[28],
covs[c(7, 13, 18, 22, 25, 27, 28)], vars[8]), nrow = 8, byrow = T
)
as.numeric(M)
}
mat_gen <- function(dat) {
dat <- split(as.matrix(dat), row(dat))
lapply(dat, dat_to_mat)
}
mat_gen(d_null_mat)
dat_to_mat <- function(dat) {
dat <- as.vector(t(dat))
vars <- dat[4:11]
covs <- dat[12:39]
M <- matrix(data = c(
vars[1], covs[1:7],
covs[1], vars[2], covs[8:13],
covs[c(2, 8)], vars[3], covs[14:18],
covs[c(3, 9, 14)], vars[4], covs[19:22],
covs[c(4, 10, 15, 19)], vars[5], covs[23:25],
covs[c(5, 11, 16, 20, 23)], vars[6], covs[26:27],
covs[c(6, 12, 17, 21, 24, 26)], vars[7], covs[28],
covs[c(7, 13, 18, 22, 25, 27, 28)], vars[8]), nrow = 8, byrow = T
)
mode(M) = "numeric"
M
}
mat_gen(d_null_mat)
mat_gen(d_null_mat)
mat_analyse(d_null_mat)
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen) # mat_gen splits each model into its seed rows, stores them as a list
outlen <- length(matlist)
inlen <- lengths(matlist)[1] # Assumes equal replicates per group!
prod <- outlen*inlen
matunlist <- unlist(matlist), F)
lapply(1:inlen, function(x) {
Reduce('+', matunlist[seq(x, prod, by = inlen)])/outlen    # Thanks to https://stackoverflow.com/questions/14440904/how-to-calculate-the-mean-of-list-of-list-of-matrices-in-r
})
}
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen) # mat_gen splits each model into its seed rows, stores them as a list
outlen <- length(matlist)
inlen <- lengths(matlist)[1] # Assumes equal replicates per group!
prod <- outlen*inlen
matunlist <- unlist(matlist, F)
lapply(1:inlen, function(x) {
Reduce('+', matunlist[seq(x, prod, by = inlen)])/outlen    # Thanks to https://stackoverflow.com/questions/14440904/how-to-calculate-the-mean-of-list-of-list-of-matrices-in-r
})
}
mat_analyse(d_null_mat)
length(datm)
lengths(datm)
lengths(datm)[1]
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen) # mat_gen splits each model into its seed rows, stores them as a list
matlist
}
datm <- mat_analyse(d_null_mat)
datm[1]
mat_analyse <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen) # mat_gen splits each model into its seed rows, stores them as a list
lapply(matlist, mat_mean)
}
mat_analyse(d_null_mat)
matmean_construct <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen) # mat_gen splits each model into its seed rows, stores them as a list
lapply(matlist, mat_mean) # apply mat_mean to each model
}
rm(mat_analyse())
rm(mat_analyse
)
G_null_mat <- matmean_construct(d_null_mat)
G_null_mat <- as.array(matmean_construct(d_null_mat))
library(evolqg)
EigenTensorDecomposition(G_null_mat)
matse_construct <- function(dat) {
datm <- group_split(dat, modelindex)
matlist <- lapply(datm, mat_gen) # mat_gen splits each model into its seed rows, stores them as a list
lapply(matlist, mat_se) # apply mat_mean to each model
}
mat_se(datm)
G_null_se <- as.array(matse_construct(d_null_mat))
G_null_se
?EigenTensorDecomposition
(8*(8+1)/2)
G_null_mean <- as.array(matmean_construct(d_null_mat))
EigenTensorDecomposition(G_null_mean)
mat_mean(d_null_mat)
mat_mean <- function(mats) {
n <- length(mats)
mats <- array(as.numeric(unlist(mats)), c(8, 8, n))
rowMeans(mats, dims = 2)
}
mat_mean(mat_gen(d_null_mat))
mat_se(mat_gen(d_null_mat))
