matlist <- mat_gen(dat) # mat_gen splits each model into its seed rows and generation, stores them as a list
lapply(matlist, function(x) {
lapply(x, mat_mean) # apply mat_mean to each model
})
}
matstruc_test <- matmean_construct(d_null_mat)
View(matstruc_test)
View(matstruc_test)
View(matstruc_test)
View(ET_Decomp_Gnull)
ET_Decomp_Gnull
ET_Decomp_Gnull$matrices[1:2]
ET_Decomp_Gnull$matrices[[1:2]]
ET_Decomp_Gnull$matrices[1]
ET_Decomp_Gnull$matrices[[1]]
ET_Decomp_Gnull$matrices[,,1:2]
?eigen
?data.frame
?array
View(E_Decomp_ETnull)
Gmean_ET <- function(G) {
output <- array(dim = c(1, 2, length(G)))
Gmax <- lapply(G, function(x) {
lapply(x, function(y) {
evolqg::EigenTensorDecomposition(y, return.projection = F)$matrices[,,1:2]
})
})
Es <- lapply(Gmax, function(x) {
eigen(x, symmetric = T, only.values = T)
})
Es
}
Gmean_ET(matstruc_test)
View(matstruc_test)
G_null_mean <- simplify2array(matmean_construct(matstruc_test))
??arrange
mat_gen <- function(dat) {
dat <- dplyr::arrange(dat, gen, modelindex, seed)
dat <- group_split(dat, gen)
dat <- lapply(dat, function(x) { group_split(x, modelindex)})
dat <- lapply(dat, function(x) { lapply(x, function(y) {
split(as.matrix(y), row(y))
})
})
dat <- lapply(dat, function(x) {
lapply(x, function(y) {
lapply(y, function(z) {
dat_to_mat(z)
})
})
})
}
G_null_mean <- simplify2array(matstruc_test)
View(G_null_mean)
Gmean_ET <- function(G) {
Gmax <- lapply(G, function(x) {
lapply(x, function(y) {
evolqg::EigenTensorDecomposition(simplify2array(y), return.projection = F)$matrices[,,1:2]
})
})
Es <- lapply(Gmax, function(x) {
eigen(x, symmetric = T, only.values = T)
})
Es
}
Gmean_ET(matstruc_test)
Gmean_ET <- function(G) {
Gmax <- lapply(G, function(x) {
evolqg::EigenTensorDecomposition(simplify2array(x), return.projection = F)$matrices[,,1:2]
})
Es <- lapply(Gmax, function(x) {
eigen(x, symmetric = T, only.values = T)
})
Es
}
Gmean_ET(matstruc_test)
Gmean_ET <- function(G) {
Gmax <- lapply(G, function(x) {
evolqg::EigenTensorDecomposition(x, return.projection = F)$matrices[,,1:2]
})
Es <- lapply(Gmax, function(x) {
eigen(x, symmetric = T, only.values = T)
})
Es
}
Gmean_ET(matstruc_test)
View(matstruc_test)
Gmax_test <- lapply(matstruc_test, function(x) {
evolqg::EigenTensorDecomposition(x, return.projection = F)$matrices[,,1:2]
})
library(DoE.wrapper)
lscombos_imp <- lhs.design(
nruns = 100, # this drastically increases the amount of runs: nruns * nseeds is the total. Also generating the LHC takes forever with more of these
nfactors = 9,
seed = 1370976025, #sampled from 1:2147483647
type = "improved",
factor.names = list(
Ne = c(10, 8000),
rwide = c(0.0, 1.241e-4),
nloci = c(10, 500),
locisigma = c(0.1, 10),
pleiorate = c(0.0, 0.5),
delmu = c(0.0, 1.0),
pleiocov = c(0.0, 0.5), # More even sampling, going from -0.5 to 0.5 rather than 0 to 0.5
delchr = c(0, 10),
wsd = c(0.1, 10))
)
lscombos_opt <- lhs.design(
nruns = 100, # this drastically increases the amount of runs: nruns * nseeds is the total. Also generating the LHC takes forever with more of these
nfactors = 9,
seed = 1370976025, #sampled from 1:2147483647
type = "optimum",
factor.names = list(
Ne = c(10, 10000),
rwide = c(0.0, 1.241e-4),
nloci = c(10, 500),
locisigma = c(0.1, 10),
pleiorate = c(0.0, 0.5),
delmu = c(0.0, 1.0),
pleiocov = c(0.0, 0.5), # More even sampling, going from -0.5 to 0.5 rather than 0 to 0.5
delchr = c(0, 10),
wsd = c(0.1, 10))
)
plot(lscombos_opt)
cor(lscombos_opt)
max(abs(cor(lscombos_opt)[cor(lscombos_opt) != 1]))
lscombos_nul_opt <- lhs.design(
nruns = 100, # this drastically increases the amount of runs: nruns * nseeds is the total. Also generating the LHC takes forever with more of these
nfactors = 8,
seed = 1370976025, #sampled from 1:2147483647
type = "optimum",
factor.names = list(
Ne = c(10, 10000),
rwide = c(0.0, 1.241e-4),
nloci = c(10, 500),
locisigma = c(0.1, 10),
pleiorate = c(0.0, 0.5),
delmu = c(0.0, 1.0),
pleiocov = c(0.0, 0.5), # More even sampling, going from 0 to 0.5 to avoid non-positive-definite errors
delchr = c(0, 10))
)
getwd()
system(sprintf("wsl slim -s %s test.slim", as.character(123), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(125), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(666), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(666), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(666666666666666666666), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(666666666666666666667), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(666666666666666667), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(666666666666666666), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(666666666666666), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(666666666666667), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(666666666666666), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(666666666666667), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(666666666666666), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(666666666666667), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(666666), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(666667), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(666666667), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(666666666), intern=T))
rsample
system(sprintf("wsl slim -s %s test.slim", as.character(4519072079550611456), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(30237523246579712), intern=T))
system(sprintf("wsl slim -s %s test.slim", as.character(2455805271277043712), intern=T))
system(sprintf("wsl slim -s %f test.slim", 2455805271277043712, intern=T))
system(sprintf("wsl slim -s %i test.slim", 2455805271277043712, intern=T))
system(sprintf("wsl slim -s %f test.slim", 2455805271277043712, intern=T))
system(sprintf("wsl slim -s %f test.slim", 24558052712, intern=T))
system(sprintf("wsl slim -s %f test.slim", 2455805271211, intern=T))
system(sprintf("wsl slim -s %f test.slim", 2455805271212, intern=T))
system(sprintf("wsl slim -s %f test.slim", 2455805271215, intern=T))
system(sprintf("wsl slim -s %f test.slim", 24558052712151, intern=T))
system(sprintf("wsl slim -s %f test.slim", 24558052712152, intern=T))
system(sprintf("wsl slim -s %f test.slim", 2455805271277043712, intern=T))
system(sprintf("wsl slim -s %f test.slim", 2455805271277043713, intern=T))
system(sprintf("wsl slim -s %f test.slim", 2355805271277043713, intern=T))
system(sprintf("wsl slim -s %f test.slim", 23425805271277043713, intern=T))
rsample
system(sprintf("wsl slim -s %f test.slim", 4519072079550611456, intern=T))
system(sprintf("wsl slim -s %f test.slim", 30237523246579712, intern=T))
system(sprintf("wsl slim -s %f test.slim", 2455805271277043712, intern=T))
rsample_test <- as.character(runif(3, 1, (2^40)))
rsample_test
system(sprintf("wsl slim -s %f test.slim", 1008716989440, intern=T))
system(sprintf("wsl slim -s %f test.slim", 950304710144, intern=T))
system(sprintf("wsl slim -s %f test.slim", 799737392384, intern=T))
rsample
system(sprintf("wsl slim -s %f test.slim", rsample[1], intern=T))
system(sprintf("wsl slim -s %s test.slim", rsample[1], intern=T))
system(sprintf("wsl slim -s %s test.slim", rsample[2], intern=T))
system(sprintf("wsl slim -s %s test.slim", rsample[3], intern=T))
system(sprintf("wsl slim -s %s test.slim", rsample[2], intern=T))
system(sprintf("wsl slim -s %s test.slim", rsample[2], intern=T))
system(sprintf("wsl slim -s %s test.slim", rsample[2], intern=T))
system(sprintf("wsl slim -s %s test.slim", rsample[3], intern=T))
r
rsample <- as.character(runif(3, 1, (2^32 - 1))) # Pull from 32 bit integer range for now to reduce problems, below
rsample <- as.integer(runif(3, 1, (2^32 - 1))) # Pull from 32 bit integer range for now to reduce problems, below
rsample <- as.character(round(runif(3, 1, (2^32 - 1)))) # Pull from 32 bit integer range for now to reduce problems, below
write.table(c("Seed", rsample), file = "seeds_pilot.csv", row.names = FALSE, col.names = FALSE, sep=",")
rsample <- as.character(round(runif(50, 1, (2^32 - 1)))) # Pull from 32 bit integer range for now to reduce problems, below
# Seems to be a problem with the seeds themselves:
# they are treated as the same if too large, even though they are below 64 bit limit
# They are above the 32 bit limit though, which is the strange thing: may be a bug?
# Mutation information and G matrices are still different among seeds, may be a problem with sample()
write.table(c("Seed", rsample), file = "seeds.csv", row.names = FALSE, col.names = FALSE, sep=",")
plot(lscombos_nul_opt)
write.csv(lscombos_opt, "lscombos_sel.csv")
write.csv(lscombos_nul_opt, "lscombos_null.csv")
rsample <- as.character(round(runif(3, 1, (2^62 - 1)))) # Pull from 32 bit integer range for now to reduce problems, below
rsample <- as.character(round(runif(50, 1, (2^62 - 1)))) # Pull from 32 bit integer range for now to reduce problems, below
rsample
?mclapply
View(matstruc_test)
View(matgentest)
MCG_ET <- function(G, cores) {
Gmax <- parallel::mclapply(G, function(x) {
lapply(x, function(y) {
evolqg::EigenTensorDecomposition(y, return.projection = F)$matrices[,,1:2]
})
}, mc.cores = cores)
Es <- parallel::mclapply(Gmax, function(x) {
lapply(x, function(y) {
eigen(y, symmetric = T, only.values = T)
})
}, mc.cores = cores)
Es
}
MCmat_gen <- function(dat, cores) {
dat <- dplyr::arrange(dat, gen, modelindex, seed)
dat <- group_split(dat, gen)
dat <- parallel::mclapply(dat, function(x) { group_split(x, modelindex)}, mc.cores = cores)
dat <- parallel::mclapply(dat, function(x) { lapply(x, function(y) {
split(as.matrix(y), row(y))
})
}, mc.cores = cores)
dat <- parallel::mclapply(dat, function(x) {
lapply(x, function(y) {
lapply(y, function(z) {
dat_to_mat(z)
})
})
}, mc.cores = cores)
}
matstruc_test <- MCmat_gen(d_null_mat, 3)
MCmat_gen <- function(dat, cores) {
dat <- dplyr::arrange(dat, gen, modelindex, seed)
dat <- dplyr::group_split(dat, gen)
dat <- parallel::mclapply(dat, function(x) { group_split(x, modelindex)}, mc.cores = cores)
dat <- parallel::mclapply(dat, function(x) { lapply(x, function(y) {
split(as.matrix(y), row(y))
})
}, mc.cores = cores)
dat <- parallel::mclapply(dat, function(x) {
lapply(x, function(y) {
lapply(y, function(z) {
dat_to_mat(z)
})
})
}, mc.cores = cores)
}
matstruc_test <- MCmat_gen(d_null_mat, 3)
d_null_32bit <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/pilot_runs/Output/32bit_seed/out_8T_null_means.csv", header = F)
setwd("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/R/pilot_runs")
d_null_32bit <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/pilot_runs/Output/32bit_seed/out_8T_null_means.csv", header = F)
d_null_32bit <- read.csv("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/nimrod_tests/Output/32bit_seed/out_8T_null_means.csv", header = F)
names(d_null_32bit)[1:7]<- c("gen", "seed", "modelindex", "rsd", "rwide", "delmu", "nloci")
# pleiocov terms
names(d_null_32bit)[8:35] <-  c(paste0("pleiocov_0", 1:7), paste0("pleiocov_1", 2:7), paste0("pleiocov_2", 3:7), paste0("pleiocov_3", 4:7), paste0("pleiocov_4", 5:7), paste0("pleiocov_5", 6:7), paste0("pleiocov_6", 7))
names(d_null_32bit)[36] <- "Ne"
names(d_null_32bit)[37:44] <- paste0("mean", 0:7)
names(d_null_32bit)[45:52] <- paste0("var", 0:7)
names(d_null_32bit)[53:80] <- c(paste0("phenocov_0", 1:7), paste0("phenocov_1", 2:7), paste0("phenocov_2", 3:7), paste0("phenocov_3", 4:7), paste0("phenocov_4", 5:7), paste0("phenocov_5", 6:7), paste0("phenocov_6", 7))
names(d_null_32bit)[81:108] <- c(paste0("phenocor_0", 1:7), paste0("phenocor_1", 2:7), paste0("phenocor_2", 3:7), paste0("phenocor_3", 4:7), paste0("phenocor_4", 5:7), paste0("phenocor_5", 6:7), paste0("phenocor_6", 7))
names(d_null_32bit)[109:118] <- paste0("H_chr", 0:9)
d_null_32bit$seed <- as.factor(d_null_32bit$seed)
View(d_null_32bit)
unique(d_null_32bit$modelindex)
sort(unique(d_null_32bit$modelindex))
8*3
24*201
sort(unique(d_null_32bit$seed))
?else if
dnorm((10-5), 0, 10)
View(d_null_mat)
View(d_null)
rsample <- as.character(round(runif(100, 1, (2^32 - 1)))) # Pull from 32 bit integer range for now to reduce problems, below
# Seems to be a problem with the seeds themselves:
# they are treated as the same if too large, even though they are below 64 bit limit
# They are above the 32 bit limit though, which is the strange thing: may be a bug?
# Mutation information and G matrices are still different among seeds, may be a problem with sample()
write.table(c("Seed", rsample), file = "seeds.csv", row.names = FALSE, col.names = FALSE, sep=",")
lscombos_nul_maxi <- lhs.design(
nruns = 512, # this drastically increases the amount of runs: nruns * nseeds is the total. Also generating the LHC takes forever with more of these
nfactors = 5,
seed = 1370976025, #sampled from 1:2147483647
type = "maximin",
factor.names = list(
rwide = c(0.0, 1.241e-4),
locisigma = c(0.1, 10),
pleiorate = c(0.0, 0.5),
delmu = c(0.0, 1.0),
pleiocov = c(0.0, 0.5)) # going from 0 to 0.5 to avoid non-positive-definite errors
)
library(DoE.wrapper)
lscombos_nul_maxi <- lhs.design(
nruns = 512, # this drastically increases the amount of runs: nruns * nseeds is the total. Also generating the LHC takes forever with more of these
nfactors = 5,
seed = 1370976025, #sampled from 1:2147483647
type = "maximin",
factor.names = list(
rwide = c(0.0, 1.241e-4),
locisigma = c(0.1, 10),
pleiorate = c(0.0, 0.5),
delmu = c(0.0, 1.0),
pleiocov = c(0.0, 0.5)) # going from 0 to 0.5 to avoid non-positive-definite errors
)
plot(lscombos_nul_maxi)
max(abs(cor(lscombos_nul_maxi)[cor(lscombos_nul_maxi) != 1]))
hist(lscombos_nul_maxi[1:128])
hist(lscombos_nul_maxi[1:128]$rwide)
hist(lscombos_nul_maxi[1:128]$delmu)
hist(lscombos_nul_maxi[1:512]$delmu)
hist(lscombos_nul_maxi[1:128]$locisigma)
hist(lscombos_nul_maxi[1:512]$locisigma)
51200/(40*24)
lscombos_nul_maxi <- lhs.design(
nruns = 1024, # this drastically increases the amount of runs: nruns * nseeds is the total. Also generating the LHC takes forever with more of these
nfactors = 5,
seed = 1370976025, #sampled from 1:2147483647
type = "maximin",
factor.names = list(
rwide = c(0.0, 1.241e-4),
locisigma = c(0.1, 10),
pleiorate = c(0.0, 0.5),
delmu = c(0.0, 1.0),
pleiocov = c(0.0, 0.5)) # going from 0 to 0.5 to avoid non-positive-definite errors
)
plot(lscombos_nul_maxi)
cor(lscombos_nul_maxi)
max(abs(cor(lscombos_nul_maxi)[cor(lscombos_nul_maxi) != 1]))
hist(lscombos_nul_maxi[1:128]$locisigma)
hist(lscombos_nul_maxi$locisigma)
write.csv(lscombos_nul_maxi, "lscombos_null.csv")
rsample <- as.character(round(runif(100, 1, (2^32 - 1)))) # Pull from 32 bit integer range for now to reduce problems, below
# Seems to be a problem with the seeds themselves:
# they are treated as the same if too large, even though they are below 64 bit limit
# They are above the 32 bit limit though, which is the strange thing: may be a bug?
# Mutation information and G matrices are still different among seeds, may be a problem with sample()
write.table(c("Seed", rsample), file = "seeds.csv", row.names = FALSE, col.names = FALSE, sep=",")
getwd()
library(binaryLogic)
intToBits(rsample)
intToBits(rsample[0])
intToBits(rsample[1])
intToBits(rsample[2])
intToBits(rsample[3])
intToBits(rsample[4])
intToBits(as.integer(rsample[4]))
as.integer(rsample[1])
intToBits(as.integer(rsample[1]))
intToBits(as.integer(rsample[2]))
as.integer(rsample[2])
str(3992150825)
is.integer(3992150825)
hist(rsample)
hist(rsample$seed)
hist(as.numeric(rsample))
rsample <- as.character(round(runif(1000, 1, (2^32 - 1)))) # Pull from 32 bit integer range for now to reduce problems, below
hist(as.numeric(rsample))
rsample <- as.character(round(runif(10000, 1, (2^32 - 1)))) # Pull from 32 bit integer range for now to reduce problems, below
hist(as.numeric(rsample))
simplif_seltime <- read.table("simplif_seltime.txt", header=T)
getwd()
simplif_seltime <- read.table("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/Speedtests/Simplif/simplif_seltime.txt", header=T)
plot_simplifseltime <- ggplot(simplif_seltime,
aes(x=gen, y=time)) +
geom_line()
library(ggplot2)
plot_simplifseltime <- ggplot(simplif_seltime,
aes(x=gen, y=time)) +
geom_line()
plot_simplifseltime
simplif_selonly <- subset(simplif_seltime, gen <= 50000)
simplif_selonly <- subset(simplif_seltime, gen > 50000)
lm(time ~ gen, data = simplif_selonly)
simplif_selonly <- subset(simplif_seltime, gen > 50000)
lm(time ~ gen, data = simplif_selonly)
1.081*150000 - 52832.816
30.37/960
0.03163542*51200
0.03163542*25600
0.03163542*12800
(0.03163542*12800)/24
(0.03163542*19200)/24
(0.03163542*12800)/24
60
(0.03163542*16000)/24
plot_rsample <- hist(as.numeric(rsample))
plot_rsample
plot_rsample$density
?hist
hist(as.numeric(rsample)
)
10e5
10e4
as.integer(10e4)
as.integer(10e5)
as.integer(10e3)
as.integer(10e2)
library(DoE.wrapper)
?lhs.design
?lhs::maximinLHS
simplif_seltime_comp <- read.table("Z:/Documents/GitHub/Genetic-Architecture-in-SLiM/src/Cluster_jobs/Speedtests/Simplif/simplif_seltime_comp.txt", header=T)
library(ggplot2)
plot_simplifselcomp <- ggplot(simplif_seltime_comp,
aes(x=gen, y=time)) +
geom_line()
plot_simplifselcomp
plot_simplifseltime
citation("LHS")
citation("lhs")
G_null_mat
View(G_null_mat)
View(dattest)
is.positive.definite(testGs[[1]][[1]][,,1])
library(matrixcalc)
is.positive.definite(testGs[[1]][[1]][,,1])
sample(1, 1:2147483647)
sample(1:2147483647, 1)
lscombos_sel_maxi <- lhs.design(
nruns = 192, # this drastically increases the amount of runs: nruns * nseeds is the total. Also generating the LHC takes forever with more of these
nfactors = 6,
seed = 1782079225, #sampled from 1:2147483647
type = "maximin",
factor.names = list(
rwide = c(0.0, 1.241e-4),
locisigma = c(0.1, 10),
pleiorate = c(0.0, 0.5),
delmu = c(0.0, 1.0),
pleiocov = c(0.0, 0.5), # More even sampling, going from -0.5 to 0.5 rather than 0 to 0.5
tau = c(10, 1000)) # From virtually no selection (very weak, weaker than drift) to very strong
)
library(DoE.wrapper)
lscombos_sel_maxi <- lhs.design(
nruns = 192, # this drastically increases the amount of runs: nruns * nseeds is the total. Also generating the LHC takes forever with more of these
nfactors = 6,
seed = 1782079225, #sampled from 1:2147483647
type = "maximin",
factor.names = list(
rwide = c(0.0, 1.241e-4),
locisigma = c(0.1, 10),
pleiorate = c(0.0, 0.5),
delmu = c(0.0, 1.0),
pleiocov = c(0.0, 0.5), # More even sampling, going from -0.5 to 0.5 rather than 0 to 0.5
tau = c(10, 1000)) # From virtually no selection (very weak, weaker than drift) to very strong
)
write.csv(lscombos_sel_maxi, "lscombos_sel.csv")
plot(lscombos_sel_maxi[1:128])
plot(lscombos_sel_maxi)
hist(lscombos_sel_maxi$tau[1:128])
hist(lscombos_sel_maxi$tau)
lscombos_sel_maxi <- lhs.design(
nruns = 128, # this drastically increases the amount of runs: nruns * nseeds is the total. Also generating the LHC takes forever with more of these
nfactors = 6,
seed = 1782079225, #sampled from 1:2147483647
type = "maximin",
factor.names = list(
rwide = c(0.0, 1.241e-4),
locisigma = c(0.1, 10),
pleiorate = c(0.0, 0.5),
delmu = c(0.0, 1.0),
pleiocov = c(0.0, 0.5), # More even sampling, going from -0.5 to 0.5 rather than 0 to 0.5
tau = c(10, 1000)) # From virtually no selection (very weak, weaker than drift) to very strong
)
hist(lscombos_sel_maxi$tau)
plot(lscombos_sel_maxi)
lscombos_sel_maxi <- lhs.design(
nruns = 128, # this drastically increases the amount of runs: nruns * nseeds is the total. Also generating the LHC takes forever with more of these
nfactors = 6,
seed = 1782079225, #sampled from 1:2147483647
type = "maximin",
factor.names = list(
rwide = c(0.0, 1.241e-4),
locisigma = c(0.1, 10),
pleiorate = c(0.0, 0.5),
delmu = c(0.0, 1.0),
pleiocov = c(0.0, 0.5), # More even sampling, going from -0.5 to 0.5 rather than 0 to 0.5
tau = c(10, 1000)) # From virtually no selection (very weak, weaker than drift) to very strong
)
library(DoE.wrapper)
lscombos_sel_maxi <- lhs.design(
nruns = 128, # this drastically increases the amount of runs: nruns * nseeds is the total. Also generating the LHC takes forever with more of these
nfactors = 6,
seed = 1782079225, #sampled from 1:2147483647
type = "maximin",
factor.names = list(
rwide = c(0.0, 1.241e-4),
locisigma = c(0.1, 10),
pleiorate = c(0.0, 0.5),
delmu = c(0.0, 1.0),
pleiocov = c(0.0, 0.5), # More even sampling, going from -0.5 to 0.5 rather than 0 to 0.5
tau = c(10, 1000)) # From virtually no selection (very weak, weaker than drift) to very strong
)
plot(lscombos_sel_maxi)
hist(lscombos_sel_maxi$tau)
write.csv(lscombos_sel_maxi, "lscombos_sel.csv")
lscombos_nul_maxi[1,]$rwide
lscombos_nul_maxi[263,]$rwide
1000101
intToBits(69)
?require
