dim(G_null_mean)[[3]]
mat.sq.dist(G_null_mean, dist. = "Euclidean")
G_null_mean <- list2array(matmean_construct(d_null_mat))
G_null_mean <- simplify2array(matmean_construct(d_null_mat))
G_null_mean
mat.sq.dist(G_null_mean, dist. = "Euclidean")
eigen(mat.sq.dist(G_null_mean, dist. = "Euclidean"))
EigenTensorDecomposition(G_null_mean)
library(evolqg)
EigenTensorDecomposition(G_null_mean)
ET_Decomp_Gnull <- EigenTensorDecomposition(G_null_mean)
ET_Decomp_Gnull$matrices[1]
ET_Decomp_Gnull$matrices[[1]]
ET_Decomp_Gnull$matrices
ET_Decomp_Gnull$matrices[ET1]
ET_Decomp_Gnull$matrices$ET1
dim(ET_Decomp_Gnull$matrices)
ET_Decomp_Gnull$matrices[,,1]
E_Decomp_ETnull <- eigen(ET_Decomp_Gnull$matrices[,,1])
E_Decomp_ETnull
sum(E_Decomp_ETnull$values)
E_Decomp_ETnull$values[1:2] / sum(E_Decomp_ETnull$values)
sum(E_Decomp_ETnull$values[1:2]) / sum(E_Decomp_ETnull$values)
RandomSkewers(as.list(G_null_mat))
mat_gen <- function(dat, group) {
dat <- split(as.matrix(dat), dat$group)
dat <- split(as.matrix(dat), row(dat))
lapply(dat, dat_to_mat)
}
library(dplyr)
d_null_mat <- select(as_tibble(d_null), gen, seed, modelindex, paste0("var", 0:7), c(paste0("phenocov_0", 1:7), paste0("phenocov_1", 2:7), paste0("phenocov_2", 3:7), paste0("phenocov_3", 4:7), paste0("phenocov_4", 5:7), paste0("phenocov_5", 6:7), paste0("phenocov_6", 7)))
View(d_null_mat)
mat_gen <- function(dat, groups) {
dat <- split(as.matrix(dat), dat$groups)
dat <- split(as.matrix(dat), row(dat))
lapply(dat, dat_to_mat)
}
mat_gen(d_null_mat, gen)
split(as.matrix(d_null_mat), d_null_mat$gen)
mat_gen <- function(dat, groups) {
dat <- split(split(as.matrix(dat), dat$groups), row(dat))
#  dat <- split(as.matrix(dat), row(dat))
lapply(dat, dat_to_mat)
}
View(G_null_mat)
View(d_null_mat)
mat_gen(d_null_mat, gen)
mat_gen <- function(dat, groups) {
dat <- split(dplyr::group_split(as.matrix(dat), dat$groups), row(dat))
#  dat <- split(as.matrix(dat), row(dat))
lapply(dat, dat_to_mat)
}
mat_gen(d_null_mat, gen)
mat_gen <- function(dat, groups) {
dat <- split(dplyr::group_split((dat), dat$groups), row(dat))
#  dat <- split(as.matrix(dat), row(dat))
lapply(dat, dat_to_mat)
}
mat_gen(d_null_mat, gen)
mat_gen <- function(dat, groups) {
dat <- split(dplyr::group_split((dat), groups), row(dat))
#  dat <- split(as.matrix(dat), row(dat))
lapply(dat, dat_to_mat)
}
mat_gen(d_null_mat, gen)
mat_gen <- function(dat, groups) {
dat <- split(dplyr::group_split((dat), gen), row(dat))
#  dat <- split(as.matrix(dat), row(dat))
lapply(dat, dat_to_mat)
}
mat_gen(d_null_mat, gen)
mat_gen <- function(dat, g) {
dat <- split(as.matrix(dat), dat$g))
dat <- split(as.matrix(dat), row(dat))
lapply(dat, dat_to_mat)
}
mat_gen <- function(dat, g) {
dat <- split(as.matrix(dat), dat$g)
dat <- split(as.matrix(dat), row(dat))
lapply(dat, dat_to_mat)
}
mat_gen(d_null_mat, gen)
mat_gen <- function(dat, g) {
dat <- split(as.matrix(dat), as.factor(dat$g))
dat <- split(as.matrix(dat), row(dat))
lapply(dat, dat_to_mat)
}
mat_gen(d_null_mat, gen)
mat_gen <- function(dat, g) {
dat <- split(as.matrix(dat), as.factor(dat${g}))
dat <- split(as.matrix(dat), row(dat))
lapply(dat, dat_to_mat)
}
mat_gen <- function(dat, g) {
dat <- split(as.matrix(dat), as.factor(dat$gen))
dat <- split(as.matrix(dat), row(dat))
lapply(dat, dat_to_mat)
}
mat_gen <- function(dat, g) {
dat <- split(as.matrix(dat), as.factor(dat$gen))
dat <- split(as.matrix(dat), row(dat))
lapply(dat, dat_to_mat)
}
mat_gen(d_null_mat, gen)
# Split by generation
dattest <- split(as.matrix(d_null_mat), as.factor(d_null_mat$gen))
View(dattest)
# Split by generation
dattest <- group_split(as.matrix(d_null_mat), as.factor(d_null_mat$gen))
# Split by generation
dattest <- group_split(d_null_mat, as.factor(d_null_mat$gen))
View(dattest)
# Split by generation
dattest <- group_split(d_null_mat, d_null_mat$gen)
View(dattest)
# Split by generation
dattest <- group_split(d_null_mat, gen)
View(dattest)
dattest <- lapply(dattest, function(x) {
split(as.matrix(x), row(x))
})
View(dattest)
# Split by generation
dattest <- group_split(d_null_mat, c(gen, modelindex))
View(d_null_mat)
mat_gen <- function(dat, g) {
dat <- group_split(dat, g)
dat <- lapply(dattest, function(x) {
split(as.matrix(x), row(x))
})
lapply(dat, dat_to_mat)
}
matgentest <- mat_gen(d_null_mat)
matgentest <- mat_gen(d_null_mat, "gen")
matgentest <- mat_gen(d_null_mat, gen)
mat_gen <- function(dat) {
dat <- group_split(dat, gen)
dat <- lapply(dattest, function(x) {
split(as.matrix(x), row(x))
})
lapply(dat, dat_to_mat)
}
matgentest <- mat_gen(d_null_mat)
# Split by generation
dattest <- group_split(d_null_mat, gen)
dattest <- lapply(dattest, function(x) {
split(as.matrix(x), row(x))
})
mat_gen <- function(dat) {
dat <- group_split(dat, gen)
dat <- lapply(dat, function(x) {
split(as.matrix(x), row(x))
})
lapply(dat, dat_to_mat)
}
matgentest <- mat_gen(d_null_mat)
dat_to_mat <- function(dat) {
dat <- as.vector(t(dat))
vars <- dat[4:11]
covs <- dat[12:39]
M <- matrix(data = c(
vars[1], covs[1:7],
covs[1], vars[2], covs[8:13],
covs[c(2, 8)], vars[3], covs[14:18],
covs[c(3, 9, 14)], vars[4], covs[19:22],
covs[c(4, 10, 15, 19)], vars[5], covs[23:25],
covs[c(5, 11, 16, 20, 23)], vars[6], covs[26:27],
covs[c(6, 12, 17, 21, 24, 26)], vars[7], covs[28],
covs[c(7, 13, 18, 22, 25, 27, 28)], vars[8]), nrow = 8, byrow = T
)
#  mode(M) = "numeric"
M
}
matgentest <- mat_gen(d_null_mat)
View(matgentest)
dattest <- lapply(dattest, function(x) {
split(as.matrix(x), row(x))
})
# Split by generation
dattest <- group_split(d_null_mat, gen)
dattest <- lapply(dattest, function(x) {
split(as.matrix(x), row(x))
})
View(dattest)
mat_gen <- function(dat) {
dat <- group_split(dat, gen)
dat <- lapply(dat, function(x) {
split(as.matrix(x), row(x))
})
lapply(dat, function(x) { lapply(x, dat_to_mat) })
}
matgentest <- mat_gen(d_null_mat)
View(matgentest)
dat_to_mat <- function(dat) {
dat <- as.vector(t(dat))
vars <- dat[4:11]
covs <- dat[12:39]
M <- matrix(data = c(
vars[1], covs[1:7],
covs[1], vars[2], covs[8:13],
covs[c(2, 8)], vars[3], covs[14:18],
covs[c(3, 9, 14)], vars[4], covs[19:22],
covs[c(4, 10, 15, 19)], vars[5], covs[23:25],
covs[c(5, 11, 16, 20, 23)], vars[6], covs[26:27],
covs[c(6, 12, 17, 21, 24, 26)], vars[7], covs[28],
covs[c(7, 13, 18, 22, 25, 27, 28)], vars[8]), nrow = 8, byrow = T
)
mode(M) = "numeric"
M
}
mat_gen <- function(dat) {
dat <- group_split(dat, gen)
dat <- lapply(dat, function(x) {
split(as.matrix(x), row(x))
})
lapply(dat, function(x) { lapply(x, dat_to_mat) })
}
matgentest <- mat_gen(d_null_mat)
View(matgentest)
matgentest[[1]]
View(d_null_mat)
d_null_mat[var0 == 0]
d_null_mat[d_null_mat$var0 == 0]
d_null_mat[,d_null_mat$var0 == 0]
d_null_mat[d_null_mat$var0 == 0,]
View(d_null_mat)
# Split by generation
dattest <- group_split(d_null_mat, gen)
View(dattest)
dattest <- lapply(dattest, function(x) {
split(as.matrix(x), row(x))
})
View(dattest)
# Split by generation
dattest <- group_split(d_null_mat, gen)
dattest <- dattest[order(gen, modelindex)]
dattest <- dattest[order(dattest$gen, dattest$modelindex)]
dattest <- arrange(dattest, gen, modelindex)
# Split by generation
dattest <- arrange(d_null_mat, gen, modelindex)
View(dattest)
# Split by generation
dattest <- arrange(d_null_mat, gen, modelindex, seed)
dattest <- group_split(dattest, gen)
dattest <- lapply(dattest, function(x) {
split(as.matrix(x), row(x))
})
View(dattest)
mat_gen <- function(dat) {
dat <- arrange(dat, gen, modelindex, seed)
dat <- group_split(dat, gen)
dat <- lapply(dat, function(x) {
split(as.matrix(x), row(x))
})
lapply(dat, function(x) { lapply(x, dat_to_mat) })
}
dat_to_mat <- function(dat) {
dat <- as.vector(t(dat))
vars <- dat[4:11]
covs <- dat[12:39]
M <- matrix(data = c(
vars[1], covs[1:7],
covs[1], vars[2], covs[8:13],
covs[c(2, 8)], vars[3], covs[14:18],
covs[c(3, 9, 14)], vars[4], covs[19:22],
covs[c(4, 10, 15, 19)], vars[5], covs[23:25],
covs[c(5, 11, 16, 20, 23)], vars[6], covs[26:27],
covs[c(6, 12, 17, 21, 24, 26)], vars[7], covs[28],
covs[c(7, 13, 18, 22, 25, 27, 28)], vars[8]), nrow = 8, byrow = T
)
mode(M) = "numeric"
M
}
mat_gen <- function(dat) {
dat <- arrange(dat, gen, modelindex, seed)
dat <- group_split(dat, gen)
dat <- lapply(dat, function(x) {
split(as.matrix(x), row(x))
})
lapply(dat, function(x) { lapply(x, dat_to_mat) })
}
dat_to_mat <- function(dat) {
dat <- as.vector(t(dat))
vars <- dat[4:11]
covs <- dat[12:39]
M <- matrix(data = c(
vars[1], covs[1:7],
covs[1], vars[2], covs[8:13],
covs[c(2, 8)], vars[3], covs[14:18],
covs[c(3, 9, 14)], vars[4], covs[19:22],
covs[c(4, 10, 15, 19)], vars[5], covs[23:25],
covs[c(5, 11, 16, 20, 23)], vars[6], covs[26:27],
covs[c(6, 12, 17, 21, 24, 26)], vars[7], covs[28],
covs[c(7, 13, 18, 22, 25, 27, 28)], vars[8]), nrow = 8, byrow = T
)
mode(M) = "numeric"
M
}
mat_gen(d_null_mat)
matgentest <- mat_gen(d_null_mat)
View(matgentest)
matmean_construct <- function(dat) {
dat <- arrange(dat, gen, modelindex, seed)
dat <- dplyr::group_split(dat, gen)
matlist <- lapply(datm, mat_gen) # mat_gen splits each model into its seed rows, stores them as a list
lapply(matlist, mat_mean) # apply mat_mean to each model
}
matmean_construct <- function(dat) {
dat <- arrange(dat, gen, modelindex, seed)
dat <- dplyr::group_split(dat, gen)
dat <- dplyr::group_split(dat, modelindex)
matlist <- lapply(dat, function(x) {lapply(x, mat_gen)}) # mat_gen splits each model into its seed rows, stores them as a list
lapply(matlist, mat_mean) # apply mat_mean to each model
}
mat_gen <- function(dat) {
dat <- lapply(dat, function(x) {
split(as.matrix(x), row(x))
})
lapply(dat, function(x) { lapply(x, dat_to_mat) })
}
matmean_construct(d_null_mat)
View(d_null_mat)
d_null_mat <- select(as_tibble(d_null), gen, seed, modelindex, paste0("var", 0:7), c(paste0("phenocov_0", 1:7), paste0("phenocov_1", 2:7), paste0("phenocov_2", 3:7), paste0("phenocov_3", 4:7), paste0("phenocov_4", 5:7), paste0("phenocov_5", 6:7), paste0("phenocov_6", 7)))
matmean_construct(d_null_mat)
mat_gen <- function(dat) {
dat <- arrange(dat, gen, modelindex, seed)
dat <- group_split(dat, gen)
dat <- lapply(dat, function(x) {
split(as.matrix(x), row(x))
})
lapply(dat, function(x) { lapply(x, dat_to_mat) })
}
matgentest <- mat_gen(d_null_mat)
View(matgentest)
mat_gen <- function(dat) {
dat <- arrange(dat, gen, modelindex, seed)
dat <- group_split(dat, gen)
dat <- group_split(dat, modelindex)
dat <- lapply(dat, function(x) {
split(as.matrix(x), row(x))
})
lapply(dat, function(x) { lapply(x, dat_to_mat) })
}
matgentest <- mat_gen(d_null_mat)
mat_gen <- function(dat) {
dat <- arrange(dat, gen, modelindex, seed)
dat <- group_split(dat, gen)
dat <- lapply(dat, function(x) { group_split(x, modelindex)})
dat <- lapply(dat, function(x) {
split(as.matrix(x), row(x))
})
lapply(dat, function(x) { lapply(x, dat_to_mat) })
}
matgentest <- mat_gen(d_null_mat)
# Split by generation tests
dattest <- arrange(d_null_mat, gen, modelindex, seed)
dattest <- group_split(dattest, gen)
dattest <- lapply(dattest, function(x) { group_split(x, modelindex)})
View(dattest)
dattest <- lapply(dattest, function(x) { lapply(x, function(y) {
split(as.matrix(x), row(x))})
})
View(dattest)
View(dattest)
dattest <- lapply(dattest, function(x) { lapply(x, function(y) {
split(as.matrix(y), row(y))
})
})
View(dattest)
dattest <- lapply(dattest, function(x) { lapply(x, function(y) { dat_to_mat }) })
View(dattest)
dattest[[1]]
dattest <- lapply(dattest, function(x) { lapply(x, function(y) { dat_to_mat(y) }) })
# Split by generation tests
dattest <- arrange(d_null_mat, gen, modelindex, seed)
dattest <- group_split(dattest, gen)
dattest <- lapply(dattest, function(x) { group_split(x, modelindex)})
dattest <- lapply(dattest, function(x) { lapply(x, function(y) {
split(as.matrix(y), row(y))
})
})
View(dattest)
dattest <- lapply(dattest, function(x) {
lapply(x, function(y) {
dat_to_mat(y)
})
})
# Split by generation tests
dattest <- arrange(d_null_mat, gen, modelindex, seed)
dattest <- group_split(dattest, gen)
dattest <- lapply(dattest, function(x) { group_split(x, modelindex)})
dattest <- lapply(dattest, function(x) { lapply(x, function(y) {
split(as.matrix(y), row(y))
})
})
dattest <- lapply(dattest, function(x) {
lapply(x, function(y) {
lapply(y, function(z) {
dat_to_mat(z)
})
})
})
View(dattest)
mat_gen <- function(dat) {
dat <- arrange(dat, gen, modelindex, seed)
dat <- group_split(dat, gen)
dat <- lapply(dat, function(x) { group_split(x, modelindex)})
dat <- lapply(dat, function(x) { lapply(x, function(y) {
split(as.matrix(y), row(y))
})
})
dat <- lapply(dat, function(x) {
lapply(x, function(y) {
lapply(y, function(z) {
dat_to_mat(z)
})
})
})
}
matgentest <- mat_gen(d_null_mat)
View(matgentest)
matmean_construct <- function(dat) {
matlist <- mat_gen(dat) # mat_gen splits each model into its seed rows and generation, stores them as a list
lapply(matlist, function(x) {
lapply(x, mat_mean) # apply mat_mean to each model
})
}
matstruc_test <- matmean_construct(d_null_mat)
View(matstruc_test)
View(matstruc_test)
View(matstruc_test)
View(ET_Decomp_Gnull)
ET_Decomp_Gnull
ET_Decomp_Gnull$matrices[1:2]
ET_Decomp_Gnull$matrices[[1:2]]
ET_Decomp_Gnull$matrices[1]
ET_Decomp_Gnull$matrices[[1]]
ET_Decomp_Gnull$matrices[,,1:2]
?eigen
?data.frame
?array
View(E_Decomp_ETnull)
Gmean_ET <- function(G) {
output <- array(dim = c(1, 2, length(G)))
Gmax <- lapply(G, function(x) {
lapply(x, function(y) {
evolqg::EigenTensorDecomposition(y, return.projection = F)$matrices[,,1:2]
})
})
Es <- lapply(Gmax, function(x) {
eigen(x, symmetric = T, only.values = T)
})
Es
}
Gmean_ET(matstruc_test)
View(matstruc_test)
G_null_mean <- simplify2array(matmean_construct(matstruc_test))
??arrange
mat_gen <- function(dat) {
dat <- dplyr::arrange(dat, gen, modelindex, seed)
dat <- group_split(dat, gen)
dat <- lapply(dat, function(x) { group_split(x, modelindex)})
dat <- lapply(dat, function(x) { lapply(x, function(y) {
split(as.matrix(y), row(y))
})
})
dat <- lapply(dat, function(x) {
lapply(x, function(y) {
lapply(y, function(z) {
dat_to_mat(z)
})
})
})
}
G_null_mean <- simplify2array(matstruc_test)
View(G_null_mean)
Gmean_ET <- function(G) {
Gmax <- lapply(G, function(x) {
lapply(x, function(y) {
evolqg::EigenTensorDecomposition(simplify2array(y), return.projection = F)$matrices[,,1:2]
})
})
Es <- lapply(Gmax, function(x) {
eigen(x, symmetric = T, only.values = T)
})
Es
}
Gmean_ET(matstruc_test)
Gmean_ET <- function(G) {
Gmax <- lapply(G, function(x) {
evolqg::EigenTensorDecomposition(simplify2array(x), return.projection = F)$matrices[,,1:2]
})
Es <- lapply(Gmax, function(x) {
eigen(x, symmetric = T, only.values = T)
})
Es
}
Gmean_ET(matstruc_test)
Gmean_ET <- function(G) {
Gmax <- lapply(G, function(x) {
evolqg::EigenTensorDecomposition(x, return.projection = F)$matrices[,,1:2]
})
Es <- lapply(Gmax, function(x) {
eigen(x, symmetric = T, only.values = T)
})
Es
}
Gmean_ET(matstruc_test)
View(matstruc_test)
Gmax_test <- lapply(matstruc_test, function(x) {
evolqg::EigenTensorDecomposition(x, return.projection = F)$matrices[,,1:2]
})
