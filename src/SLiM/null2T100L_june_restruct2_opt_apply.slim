// set up a simple neutral simulation, mu = mutation rate, Ne = eff pop size
// increasing complexity: not all mutations are pleiotropic, pleiotropy rate given by pleio: this is the percentage of mutations that should be pleiotropic
// Also output for all mutations - their effects, frequencies, origin generation and positions. Can get a measurement of linkage by their distance, whether they are 
// in the same region etc. 
// Model now puts neutral mutations which have fixed into substitution objects and adds the effects of substitutions correctly into the phenotypes. These 
// substitutions are also put in the mutation output (freq = 1)
// Mutation file gets massive, possibly need to compress it with writeFile(compress = T), but that will add performance overhead + lots more RAM usage as it will 
// likely keep each line in memory while it appends them and compresses
// Alternative solution (which I've done here) is to get the mutation output less frequently, but this results in missing a lot of the micro-evolution going on 
// through losses of mutations, which are likely to be missed
// We've set the total number of generations to 100,000 to track evolution over longer periods - this may be too long for Awoonga, it is 2.2x longer per run! 
// Although should handle this long period better now since we're converting everything to substitutions - but not by a massive amount

// New genome structure: 10 genomic regions, each of 100 QTL loci: these loci can be synonymous (m1), or nonsynonymous (m3, m4, m5), being either pleiotropic (m3), or randomly chosen from the non-pleiotropic mutations (m4, m5). Perhaps I should change this: so we have QTL loci for each trait.

// Further changes to genome: each bp is treated as an individual locus/gene now - as to be consistent with the definition of our mutations being QTLs. This means mutation rate/recombination rate is actually chance of mutation/recombination per locus per generation. This means these rates will need to be changed to be normalised to this: perhaps average number of base pairs per gene, add those probabilities to get to the per gene rate.

// Genome size:

// Genome size taken as an average of the number of protein-coding genes in a variety of eukaryotes - ten taken from each group of metazoans (non-vertebrate), plants, protists, vertebrates and fungi, and averaged to the genome size 19869. All data taken from Ensembl.
// ALTERNATIVE - Elliott and Gregory 2015, found averages for many more species: average 9953 for Fungi, 18943 for animals, 35577 for plants: grand average of 21491 genes in a theoretical eukaryote
// Hou and Lin 2009 had their own table of gene counts across species of eukaryotes, but the data is a bit dated -  contains animals, plants, fungi; averages to 13264.22 protein-coding genes - I think exclude this
// What about regulatory regions - assumed they are grouped in with the protein-coding gene, they must be somewhere controlling it, so think of a mutation in the model not necessarily being a mutation on th locus itself, but a mutation at any place in a genome that affects that locus's function (at least in the case of QTL or deleterious mutations; neutral would be the same but without affecting function)

// Average my data with that of Elliott and Gregory for a combined estimate: 20680


// Recombination rate now is recombination between genes, so a more direct look at distance between loci
// I think set it for one genomic region now, and rregion/recombination between will be the recombination rate to the right of each QTL locus - simulating how close/far away they are from each other on an actual genome
// rwide, correct for size of each locus, on average 1346bp (0.001346 Mbp) length for eukaryotic coding sequences, highly conserved (Xu et al. 2006)
// rwide should therefore be whatever the value is * 1346
// mutation rate is the same - 1.29e-8 * 1346

// genome-wide mutation rate: should now be mutations per locus, so we need a better estimate: 2.2x10-9*1346 from Kumar and Subramanian 2002; 6.3x10-6 from Schug et al. 1997; 2.4e-4 Thuillet et al. 2002; 1.246e-3 Zhang et al. 2018; 4.6e-9*1346 Smeds et al. 2016; 
// Averages to 2.943e-4

// genome-wide recombination rate: Sidhu and Gill 2005: in wheat, varies from 2e-9 to 7e-8; Lynch 2005, humans: 5e-4

// Stacking policy: both mutations should simultaneously be there, as this signifies multiple mutations within a locus, each with a separate effect


// AIM 1: Null model: rregion should be FIXED - independent assortment isn't a treatment for here.




initialize() {
	setCfgParam("seed", asInteger(round(runif(1, 1, 2^62 - 1))));	// random seed
	setSeed(asInteger(seed));			// sets the seed from either a command line input, -d seed=i, or from the above CfgParam
	catn("Actual seed: " + asInteger(seed));
	setCfgParam("mu", 6.3e-6); // Genome-wide mutation rate per locus, Schug et al. 1996, as above
	setCfgParam("Ne", 100); // Population size
	setCfgParam("pleiorate", 0.44); // Proportion of QTL mutations that should be pleiotropic - given by Chesmore et al. 2017, based on human disease GWAS studies!
	setCfgParam("del_mean", -0.03); // Mean used for the gamma distribution that deleterious mutations are pulled function
	setCfgParam("del_shape", 0.2); // Shape parameter for gamma distribution used for deleterious mutations
	setCfgParam("delmu", 0.0); // Proportion of deleterious mutations compared to others (relative to others, 0.1 compared to 1 of neutral)
	setCfgParam("rregion", 0.0); // Recombination rate between genomic regions
	setCfgParam("rwide", 1.346e-5); // Recombination rate across the whole genome (aside from the between genomic regions rate)
	setCfgParam("nloci", 100); // Number of QTL positions along the chromosome - where QTL mutations can appear, sampled from sample()
	setCfgParam("genomelength", 20680); // Taken from my own analysis from Ensembl, and from Elliott and Gregory 2015 
	
	setCfgParam("outname", 'out_2T100L_means.csv'); // Output filename/path for the trait means/variance
	setCfgParam("outnamemuts", 'out_2T100L_muts.csv'); //Output filename/path for the mutation information
//	setCfgParam("phenooutname", 'out_2T100L_pheno.csv'); // Output filename/path for the final phenotypes of all individuals
	setCfgParam("segsitesoutname", 'out_2T100L_segsites'); // Output filename for genomes - the 0s and 1s for whether a mutation is present at a certain position
	setCfgParam("zygosoutname", 'out_2T100L_zygosity'); // Output filename for zygosity of mutations for each individual for each locus position	
	setCfgParam("sizefxoutname", 'out_2T100L_sizefx'); // Output filename for size effects table of mutations and substitutions
	
	setCfgParam("modelindex", 1); // Identifier for the combination of predictors used in latin square: this is the row number in the lscombos.csv file
	
	//	defineConstant("varmu", -0.2^2); // expected mutation variance
	//	defineConstant("eqvar", 2*Ne*varmu); // expected variance under mutation-drift equilibrium
	
	initializeMutationRate(mu);
	
	initializeMutationType("m1", 0.5, "f", 0.0); // Neutral, non-trait-affecting mutations: remove these?
	
	//m2 mutation type: deleterious/background selection
	initializeMutationType("m2", 0.5, "g", del_mean, del_shape);  // del_mean and del_shape are defined in the batch run script, or the rwide script
	m2.color = "red";
	
	//m3 mutation type: pleiotropic QTL for both traits, fixed, we pull effects from rmvnorm
	initializeMutationType("m3", 0.5, "f", 0.0);
	//	m3.convertToSubstitution = F;
	m3.color = "green";
	
	//m4 mutation type: QTL for phenotype 0 only
	initializeMutationType("m4", 0.5, "n", 0.0, 1.0);
	//	m4.convertToSubstitution = F;
	m4.color = "blue";
	
	//m5 mutation type: QTL for phenotype 1 only
	initializeMutationType("m5", 0.5, "n", 0.0, 1.0);
	//	m5.convertToSubstitution = F;
	m5.color = "gray";
	
	
	// g1 genomic element type: uses m1 and m2 for all mutations - get other effects only if determined for m1 
	initializeGenomicElementType("g1", c(m1, m2), c(1, delmu));
	
	//g2 genomic element type: includes QTLS - pleiotropic is at a different rate to regular mutations
	initializeGenomicElementType("g2", c(m1, m2, m3, m4, m5), c(1, delmu, pleiorate, 1, 1));
	
	
	// Chromosome set up with 10 genomic regions, where there are 200 potential QTL sites, the rest are neutral sites (m1, m2)
	initializeGenomicElement(g1, 0, genomelength - 1);
	
	recomseq = seq(0, genomelength - 1, by = 0.1*genomelength);
	ends = asInteger(round(recomseq[1:9])); 	// Convert to int from float
	ends = c(sort(c(ends, ends+1)), genomelength);
	rbtwnQTL = c(rep(rregion, length(ends)));
	rgenome = c(rep(rwide, length(ends))); 
	rates = c(rbind(rgenome, rbtwnQTL), rwide);
	rates = rates[0:(length(ends) - 1)];
	
	initializeRecombinationRate(rates, ends); // We set this later, when we get the positions of QTLs
	
	
	// QTL constants
	
	setCfgParam("QTL_mu", c(0, 0)); // mean distribution value for multivariate normal we are pulling effects of both traits from
	setCfgParam("QTL_cov", 0.0); // covariance between the pulls in the multivariate normal (pleiotropic correlation between traits)
	setCfgParam("QTL_sigma", matrix(c(1, QTL_cov, QTL_cov, 1), nrow=2)); // sigma used in multivariate normal pull - variance covariance matrix, where variance of each trait = 1
	
	catn("\nQTL DFE means: ");
	print(QTL_mu);
	catn("\nQTL DFE variance-covariance matrix (M matrix): ");
	print(QTL_sigma);
}

// This M matrix defines the direction of pleiotropy via the covariance. Covariance between traits at the end 
// of the simulation is due to a combination of this covariance term, random effects of drift, recombination,
// and deleterious mutation on the population. 


function (void) setCfgParam (s$ name, ifls value) // setup function for automating constant definitions between gui and command line
{
	if (!exists(name))
		defineConstant(name, value);
}


// create a population of Ne individuals
1 {
	sim.addSubpop("p1", Ne);
	chr_QTL = sort(sample(1:(sim.chromosome.lastPosition-1), nloci));
	//	chr_QTL = NULL;
	//	for (chr in sim.chromosome.genomicElements) { chr_QTL = c(chr_QTL, rdunif(ploci, chr.startPosition, chr.endPosition)); } // for each genomic element, get 100 random positions from a discrete uniform distribution and store them as QTL positions
	sim.setValue("chr_QTL", chr_QTL); //store these positions in a sim value
	
}

// Set fitness of m4 and m5 to be neutral
fitness(m4) {
	return 1.0;
}

fitness(m5) {
	return 1.0;
}

// Check if the m1 mutation's position is at a chr_QTL position, if it is than redraw the mutationType

mutation(m1) {
	if (any(mut.position == sim.getValue("chr_QTL"))) { // If the mutation falls in any of our defined QTL loci within a region, transform it to pleiotropic, or non-pleiotropic QTL - the chance of the QTL still being null/synonymous is implicit in the mean QTL value being 0
		
		pleio = rbinom(1, 1, pleiorate); // Redraw the mutation type, determining whether the nonsyn mutation should be pleiotropic or not 	
		
		if (pleio == 1) {
			mut.setMutationType(m3);
			effects = rmvnorm(1, QTL_mu, QTL_sigma);		// Calculate effects for m3 here since a mutation callback won't be called since it isn't autogenerated
			mut.setValue("e0", effects[0]);
			mut.setValue("e1", effects[1]);
			mut.setValue("fe", 0.0); //fitness effect
		}
		else {
			type = rdunif(1, 3, (length(sim.mutationTypes) - 1)); // If it isn't pleiotropic, randomly choose one of the phenotypes for the QTL to affect
			mut.setMutationType(sim.mutationTypes[type]);
			mut.setSelectionCoeff(mut.mutationType.drawSelectionCoefficient(1));
			
			if (mut.mutationType == m4)	{
				mut.setValue("e0", mut.selectionCoeff);				// Calculate effects for each, since it isn't 
				mut.setValue("e1", 0.0);
				mut.setValue("fe", 0.0); //fitness effect
			}
			
			if (mut.mutationType == m5) {
				mut.setValue("e0", 0.0);
				mut.setValue("e1", mut.selectionCoeff);
				mut.setValue("fe", 0.0); //fitness effect	
			}
		}
		return T;
	}
	else
		
		return T;
}

// For non-pleiotropic mutations, set their e0 and e1 values so we can have standardised output in that format

mutation(m2) {
	mut.setValue("e0", 0.0);
	mut.setValue("e1", 0.0);
	mut.setValue("fe", mut.selectionCoeff); // fitness effect
	
	return T;

}

// Output and phenotype calculation
//1:100000 late() {
//	
//	if (sim.generation % 500 != 0) // !CHECK THIS! Grab a sample every 500 generations: results in 200 time points per run, just like old model, file size should be the same as before
//		return;
//	// For each individual, grab the mutation effects and store them as a phenotype value for each phenotype, summing the effects of m3, m4, and/or, m5. This is additive!
//	
//	// First, collect the substitutions to apply to all individuals' phenotypes
//	inds = sim.subpopulations.individuals;
//	fixed = sim.substitutions;
//	sizem3 = size(fixed[fixed.mutationType == m3]);
//	sizem4 = size(fixed[fixed.mutationType == m4]);
//	sizem5 = size(fixed[fixed.mutationType == m5]);
//	
//	fixedfx0 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e0")) else 0.0 + sizem4 ? sum(fixed[fixed.mutationType == m4].getValue("e0")) else 0.0;
//	
//	fixedfx1 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e1")) else 0.0 + sizem5 ? sum(fixed[fixed.mutationType == m5].getValue("e1")) else 0.0;
//	
//	
//	for (ind in sim.subpopulations.individuals)
//	{
//		muts = ind.genomes.mutationsOfType(m3);
//		mutscount = size(muts);
//		
//		phenotype0 = (mutscount ? sum(muts.getValue("e0")) else 0.0);
//		phenotype0 = phenotype0 + (ind.sumOfMutationsOfType(m4)) + (fixedfx0); // add non-pleiotropic effects and fixed effects
//		
//		phenotype1 = (mutscount ? sum(muts.getValue("e1")) else 0.0);
//		phenotype1 = phenotype1 + (ind.sumOfMutationsOfType(m5)) + (fixedfx1); // add non-pleiotropic effects and fixed effects
//		
//		ind.setValue("phenotype0", phenotype0);
//		ind.setValue("phenotype1", phenotype1);
//	}
//	// Get the values for output: mean trait values, variance of those trait values, covariance and correlation coefficients
//	//	inds = sim.subpopulations.individuals;
//	pheno0mean = mean(inds.getValue("phenotype0"));
//	pheno1mean = mean(inds.getValue("phenotype1"));
//	pheno0var = var(inds.getValue("phenotype0"));
//	pheno1var = var(inds.getValue("phenotype1"));
//	phenocov = cov(inds.getValue("phenotype0"), inds.getValue("phenotype1"));
//	phenocor = cor(inds.getValue("phenotype0"), inds.getValue("phenotype1"));
//	
//	// Stick those values in the output, along with predictors
//	meanline = paste0(c(sim.generation, ", ", asString(getSeed()), ", ", modelindex, ", ", rregion, ", ", rwide, ", ", delmu, ", ", QTL_cov, ", ", Ne, ", ", nloci, ", ", pheno0mean, ", ", pheno0var, ", ", pheno1mean, ", ", pheno1var, ", ", phenocov, ", ", phenocor, ""));
//	file = paste(meanline, "");
//	
//	// Write the file
//	writeFile(outname, file, append = T);
//	
//	
//	// Mutation output: only do this once every 25000 generations: missing a lot of micro-evolution, but we keep fixations, and the files get too big otherwise	
//	
//	if (sim.generation % 25000 != 0)
//		return;
//	
//	// Output for mutations
//	
//	// Store vectors of unique mutations, sorted by the generation in which they originated
//	muts = sortBy(c(sim.mutationsOfType(m2), sim.mutationsOfType(m3), sim.mutationsOfType(m4), sim.mutationsOfType(m5)), "originGeneration");
//	
//	// same for substitutions
//	subs = sortBy(c(sim.substitutions[sim.substitutions.mutationType != m1]), "originGeneration");
//	
//	// Set up an empty output to store all our mutations' information for this generation
//	mutsLines = NULL;
//	revmuts = rev(muts); // Reverse of the vector: the first value in this is the last mutation in the original list
//	revsubs = rev(subs); // could instead call muts.size() and use if mut == muts[muts.size() - 1] to check, maybe uses less memory, probably same speed
//	
//	// Put information on these unique mutations into a separate mutations file	
//	
//	// Check if there are any substitutions, if not we need to fix the output lines	by not including the \n character at the end of the last mutation line
//	
//	if (size(subs))
//		for (mut in muts) {
//			mutFreq = mean(sim.subpopulations.genomes.containsMutations(mut));
//			mutType = mut.mutationType.id;
//			mutsLine = paste(c(sim.generation, ", ", getSeed(), ", ", modelindex, ", ", rregion, ", ", rwide, ", ", delmu, ", ", QTL_cov, ", ", Ne, ", ", mutType, ", ", mut.id, ", ", mut.position, ", ", mut.originGeneration, ", ", mut.getValue("e0"), ", ", mut.getValue("e1"), ", ", mut.getValue("fe"), ", ", mutFreq, ", ", "N/A", "\n"), "");
//			
//			mutsLines = c(mutsLines, mutsLine);
//		}
//	else
//		for (mut in muts) {
//			mutFreq = mean(sim.subpopulations.genomes.containsMutations(mut));
//			mutType = mut.mutationType.id;
//			if (mut != revmuts[0]) // Quality hack
//				mutsLine = paste(c(sim.generation, ", ", asString(getSeed()), ", ", modelindex, ", ", rregion, ", ", rwide, ", ", delmu, ", ", QTL_cov, ", ", Ne, ", ", mutType, ", ", mut.id, ", ", mut.position, ", ", mut.originGeneration, ", ", mut.getValue("e0"), ", ", mut.getValue("e1"), ", ", mut.getValue("fe"), ", ", mutFreq, ", ", "N/A", "\n"), "");
//			else
//				mutsLine = paste(c(sim.generation, ", ", asString(getSeed()), ", ", modelindex, ", ", rregion, ", ", rwide, ", ", delmu, ", ", QTL_cov, ", ", Ne, ", ", mutType, ", ", mut.id, ", ", mut.position, ", ", mut.originGeneration, ", ", mut.getValue("e0"), ", ", mut.getValue("e1"), ", ", mut.getValue("fe"), ", ", mutFreq, ", ", "N/A", ""), "");
//			mutsLines = c(mutsLines, mutsLine);
//		}
//	
//	
//	
//	for (sub in subs) {
//		subFreq = 1.0;
//		subType = sub.mutationType.id;
//		
//		if (sub != revsubs[0]) // THIS IS THE HACK THAT I MUST RESORT TO THANKS TO NO \b OR REPLACE() 	GOSH BLESS EIDOS
//			subLine = paste(c(sim.generation, ", ", asString(getSeed()), ", ", modelindex, ", ", rregion, ", ", rwide, ", ", delmu, ", ", QTL_cov, ", ", Ne, ", ", subType, ", ", sub.id, ", ", sub.position, ", ", sub.originGeneration, ", ", sub.getValue("e0"), ", ", sub.getValue("e1"), ", ", sub.getValue("fe"), ", ", subFreq, ", ", sub.fixationGeneration, "\n"), "");
//		else
//			subLine = paste(c(sim.generation, ", ", asString(getSeed()), ", ", modelindex, ", ", rregion, ", ", rwide, ", ", delmu, ", ", QTL_cov, ", ", Ne, ", ", subType, ", ", sub.id, ", ", sub.position, ", ", sub.originGeneration, ", ", sub.getValue("e0"), ", ", sub.getValue("e1"), ", ", sub.getValue("fe"), ", ", subFreq, ", ", sub.fixationGeneration, ""), "");
//		
//		mutsLines = c(mutsLines, subLine); // Add substitutions to mutation output
//	
//	}
//	
//	mutsFile = paste0(mutsLines); // n.b. does \b exist in eidos? Would make it easier
//	
//	// Write the mutations file
//	// Fail safe in case there are no mutations at some point and the for loop doesn't run
//	if (exists('mutsLine'))
//		writeFile(outnamemuts, mutsFile, append = T);
//	
//	
//	// SLiMGUI test output 	
//	//	catn(paste(c("Generation: ", sim.generation, " Phenotype 0 Mean: ", pheno0mean, " Phenotype 1 Mean: ", pheno1mean, " covariance: ", phenocov)));
//	
//	// Final output at last generation for all individuals' phenotypes
////	if (sim.generation % 1000 != 0)
////		return;
////	
//
//}









// Genome output: We have to do this for each trait! So Trait 1 uses mutation types m3 and m4; trait 2 uses m3 and m5, need to get these effects separately


// Trait 1: m3, m4
// Genome output 1 and 2: Binary for whether a mutation has occurred at a given QTL position or not - the segregating sites table, and the size effects of those in the size effects table: The effects of each of these QTL mutations to a separate matrix, the size-effects table
	// Using genomes, subs, and positions from genome output 1 declarations

1000 late() {
	genomes = sim.subpopulations.genomes;
	subs = sim.substitutions[sim.substitutions.mutationType == m3 | sim.substitutions.mutationType == m4];
	positions = sim.getValue("chr_QTL");
	segsitesfile = NULL;
	segsiteslines = NULL;
	sizefxfile = NULL;
	
	if (length(subs) == 0 & length(c(genomes.positionsOfMutationsOfType(m3), genomes.positionsOfMutationsOfType(m4))) == 0) {		// Skip the loop if there are no mutations to put in
		segsitesline = rep(0, length(positions));	
		segsitesfile = paste0(c(rep(paste(c(segsitesline, "\n"), ", "), length(genomes) - 1), paste(segsitesline, ", ")));
	// Since if there are no mutations table 1 and 2 will just be 0s and identical, set sizefxfile = segsitesfile
		sizefxfile = segsitesfile;
	}
	
	else {
		
		
		segsiteslines = sapply(genomes, 
			"segsitesline = rep(0, sim.chromosome.lastPosition); muts = applyValue.mutations[applyValue.mutations.mutationType == m3 | applyValue.mutations.mutationType == m4]; segsitesline[muts.position] = 1; segsitesline[subs.position] = 1; segsitesline = (applyValue != genomes[genomes.size() - 1] ? ((segsitesline[positions] + ','),'\\n') else (segsitesline[positions] + ',') ); segsitesline;"); 
		
		segsitesfile = paste0(segsiteslines);
		
//if (applyValue != genomes.size() - 1) segsitesfile = paste0(c(segsitesfile, paste(segsitesline, ', '), '\n')); else segsitesfile = paste0(c(segsitesfile, paste(segsitesline, ', ')));"	);	
		
		
//		// For each genome in the seqence, get a list of all the positions where QTL mutations occur, assign a 1 if that position matches a mutation's position 	
//		for (genome in genomes) {
//		//Table 1: Segregating sites
//			segsitesline = rep(0, (sim.chromosome.lastPosition));
//			muts = genome.mutations[genome.mutations.mutationType == m3 | genome.mutations.mutationType == m4];
//			segsitesline[muts.position] = 1;
//			segsitesline[subs.position] = 1;
//			segsitesline = segsitesline[positions];
//		//Table 2: Size effects
//			sizefxline = rep(0.0, sim.chromosome.lastPosition);
//			if (muts.size() > 0) { // Double check to make sure we can get those values
//			sizefxline[muts.position] = muts.getValue("e0");	// Fill the appropriate vector element in for a given mutation with its selection coef
//				}			
//			if (subs.size() > 0) {							
//			sizefxline[subs.position] = subs.getValue("e0");			
//				}
//			sizefxline = sizefxline[positions];
//			
//			if (genome != genomes[genomes.size() - 1]) { // Check if the genome is the last in the list or not: we shouldn't add a new line for the last genome
//				segsitesfile = paste0(c(segsitesfile, paste(segsitesline, ", "), "\n"));
//				sizefxfile = paste0(c(sizefxfile, paste(sizefxline, ", "), "\n"));
//			}
//			
//			else {
//				segsitesfile = paste0(c(segsitesfile, paste(segsitesline, ", ")));
//				sizefxfile = paste0(c(sizefxfile, paste(sizefxline, ", ")));
//			}
//		
//		}
//	}
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", segsitesoutname, "trait1.csv"))), segsitesfile, append = T); // append is true so we can stick outputs from different model/seed runs into the same file
	}
	}

//	// This is ~/model{modelindex}/seed_segsitesoutname_trait1.csv
//	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", sizefxoutname, "trait1.csv"))), sizefxfile, append = T);
//	
//
//	
//	
//	// Genome output 3: per individual homo/heterozygosity or absence: 0, 1, 2 - the genotype table
//	// Using subs and positions from genome output 1 declarations
//	
//	inds = sim.subpopulations.individuals;
//	zygosout = NULL;
//	zygosfile = NULL;
//	
//	if (length(subs) == 0 & length(c(inds.genomes.positionsOfMutationsOfType(m3), inds.genomes.positionsOfMutationsOfType(m4))) == 0) {		// Skip the loop if there are no mutations to put in
//		zygosline = rep(0, length(positions));	
//		zygosfile = paste0(c(rep(paste(c(zygosline, "\n"), ", "), length(inds) - 1), paste(zygosline, ", ")));
//	}
//	
//	else {
//		
//		// For each individual in the seqence, get a list of all the positions where QTL mutations occur, assign a 1 or 2 if that position matches a mutation's position 	
//		for (ind in inds) {
//			zygosline = rep(0, (sim.chromosome.lastPosition));
//				
//			muts0 = ind.genome1.mutations[ind.genome1.mutations.mutationType == m3 | ind.genome1.mutations.mutationType == m4];
//			muts1 = ind.genome2.mutations[ind.genome2.mutations.mutationType == m3 | ind.genome2.mutations.mutationType == m4];
//			
//			// Count the shared mutations (homozygous - appear in both genomes)
//			shared = sort(c(setIntersection(muts0, muts1).position, subs.position));
//			
//			// Then the heterozygous mutations - exist in either genome but not both
//			unshared = sort(setSymmetricDifference(muts0, muts1).position);
//			
//			
//			if ( size(shared) > 0 ) {  // For all the mutations that exist in both genomes of the individual, return 2; and 1 for those in only 1 genome
//				zygosline[shared] = 2;
//			}
//			if ( size(unshared) > 0 ) {
//				zygosline[unshared] = 1;
//			}
//		
//		zygosline = zygosline[positions];			
//			
//			if (ind != inds[inds.size() - 1]) { // Check if the individual is the last in the list or not: we shouldn't add a new line for the last individual
//				zygosfile = paste0(c(zygosfile, paste(zygosline, ", "), "\n"));
//			}
//			else {
//				zygosfile = paste0(c(zygosfile, paste(zygosline, ", ")));
//			}
//		
//		}
//	}
//	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", zygosoutname, "trait1.csv"))), zygosfile, append = T);
//	
//	
//
//	
//
//
//
//}


// Trait 2: m3, m5
// Genome output 1 and 2: Binary for whether a mutation has occurred at a given QTL position or not - the segregating sites table; as well as table 2 for the size effects of those mutations

//1000 late() {
//	genomes = sim.subpopulations.genomes;
//	subs = sim.substitutions[sim.substitutions.mutationType == m3 | sim.substitutions.mutationType == m5];
//	positions = sim.getValue("chr_QTL");
//	segsitesfile = NULL;
//	sizefxfile = NULL;
//	
//	if (length(subs) == 0 & length(c(genomes.positionsOfMutationsOfType(m3), genomes.positionsOfMutationsOfType(m5))) == 0) {		// Skip the loop if there are no mutations to put in
//		segsitesline = rep(0, length(positions));	
//		segsitesfile = paste0(c(rep(paste(c(segsitesline, "\n"), ", "), length(genomes) - 1), paste(segsitesline, ", ")));
//	// Since if there are no mutations table 1 and 2 will just be 0s and identical, set sizefxfile = segsitesfile
//		sizefxfile = segsitesfile;
//	}
//	
//	else {
//		
//		// For each genome in the seqence, get a list of all the positions where QTL mutations occur, assign a 1 if that position matches a mutation's position 	
//		for (genome in genomes) {
//		//Table 1: Segregating sites
//			segsitesline = rep(0, (sim.chromosome.lastPosition));
//			muts = genome.mutations[genome.mutations.mutationType == m3 | genome.mutations.mutationType == m5];
//			segsitesline[muts.position] = 1;
//			segsitesline[subs.position] = 1;
//			segsitesline = segsitesline[positions];
//		//Table 2: Size effects
//			sizefxline = rep(0.0, sim.chromosome.lastPosition);
//			if (muts.size() > 0) { // Double check to make sure we can get those values
//			sizefxline[muts.position] = muts.getValue("e1");	// Fill the appropriate vector element in for a given mutation with its selection coef
//				}			
//			if (subs.size() > 0) {							
//			sizefxline[subs.position] = subs.getValue("e1");			
//				}
//			sizefxline = sizefxline[positions];
//			
//			if (genome != genomes[genomes.size() - 1]) { // Check if the genome is the last in the list or not: we shouldn't add a new line for the last genome
//				segsitesfile = paste0(c(segsitesfile, paste(segsitesline, ", "), "\n"));
//				sizefxfile = paste0(c(sizefxfile, paste(sizefxline, ", "), "\n"));
//			}
//			
//			else {
//				segsitesfile = paste0(c(segsitesfile, paste(segsitesline, ", ")));
//				sizefxfile = paste0(c(sizefxfile, paste(sizefxline, ", ")));
//			}
//		
//		}
//	}
//	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", segsitesoutname, "trait2.csv"))), segsitesfile); 
//
//	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", sizefxoutname, "_trait2.csv"))), sizefxfile);
//	
//	
//	
//	// Genome output 3: per individual homo/heterozygosity or absence: 0, 1, 2 - the genotype table
//	// Using subs and positions from genome output 1 declarations
//	
//	inds = sim.subpopulations.individuals;
//	zygosout = NULL;
//	zygosfile = NULL;
//	
//	if (length(subs) == 0 & length(c(inds.genomes.positionsOfMutationsOfType(m3), inds.genomes.positionsOfMutationsOfType(m5))) == 0) {		// Skip the loop if there are no mutations to put in
//		zygosline = rep(0, length(positions));	
//		zygosfile = paste0(c(rep(paste(c(zygosline, "\n"), ", "), length(inds) - 1), paste(zygosline, ", ")));
//	}
//	
//	else {
//		
//		// For each individual in the seqence, get a list of all the positions where QTL mutations occur, assign a 1 or 2 if that position matches a mutation's position 	
//		for (ind in inds) {
//			zygosline = rep(0, (sim.chromosome.lastPosition));
//				
//			muts0 = ind.genome1.mutations[ind.genome1.mutations.mutationType == m3 | ind.genome1.mutations.mutationType == m5];
//			muts1 = ind.genome2.mutations[ind.genome2.mutations.mutationType == m3 | ind.genome2.mutations.mutationType == m5];
//			
//			// Count the shared mutations (homozygous - appear in both genomes)
//			shared = sort(c(setIntersection(muts0, muts1).position, subs.position));
//			
//			// Then the heterozygous mutations - exist in either genome but not both
//			unshared = sort(setSymmetricDifference(muts0, muts1).position);
//			
//			
//			if ( size(shared) > 0 ) {  // For all the mutations that exist in both genomes of the individual, return 2; and 1 for those in only 1 genome
//				zygosline[shared] = 2;
//			}
//			if ( size(unshared) > 0 ) {
//				zygosline[unshared] = 1;
//			}
//		
//		zygosline = zygosline[positions];			
//			
//			if (ind != inds[inds.size() - 1]) { // Check if the individual is the last in the list or not: we shouldn't add a new line for the last individual
//				zygosfile = paste0(c(zygosfile, paste(zygosline, ", "), "\n"));
//			}
//			else {
//				zygosfile = paste0(c(zygosfile, paste(zygosline, ", ")));
//			}
//		
//		}
//	}
//	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", zygosoutname, "trait2.csv"))), zygosfile);
//	
//
//}


// Run for 100,000 generations to capture even more neutral evolution
1000 late() {
	sim.simulationFinished();
}

