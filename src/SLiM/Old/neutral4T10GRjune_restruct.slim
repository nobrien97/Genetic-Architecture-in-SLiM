// set up a simple neutral simulation, mu = mutation rate, Ne = eff pop size
// increasing complexity: not all mutations are pleiotropic, pleiotropy rate given by pleio: this is the percentage of mutations that should be pleiotropic
// Also output for all mutations - their effects, frequencies, origin generation and positions. Can get a measurement of linkage by their distance, whether they are 
// in the same region etc. 
// Model now puts neutral mutations which have fixed into substitution objects and adds the effects of substitutions correctly into the phenotypes. These 
// substitutions are also put in the mutation output (freq = 1)
// Mutation file gets massive, possibly need to compress it with writeFile(compress = T), but that will add performance overhead + lots more RAM usage as it will 
// likely keep each line in memory while it appends them and compresses
// Alternative solution (which I've done here) is to get the mutation output less frequently, but this results in missing a lot of the micro-evolution going on 
// through losses of mutations, which are likely to be missed
// We've set the total number of generations to 50,000 to track evolution over longer periods - this may be too long for Awoonga, it is 2.2x longer per run! 
// Although should handle this long period better now since we're converting everything to substitutions - but not by a massive amount

// New genome structure: 10 genomic regions, each of 100 QTL loci: these loci can be synonymous (m1), or nonsynonymous (m3, m4, m5), being either pleiotropic (m3), or randomly chosen from the non-pleiotropic mutations (m4, m5). Perhaps I should change this: so we have QTL loci for each trait.



initialize() {
	setCfgParam("seed", asInteger(round(runif(1, 1, 2^62 - 1))));	// random seed
	setSeed(asInteger(seed));			// sets the seed from either a command line input, -d seed=i, or from the above CfgParam
	catn("Actual seed: " + asInteger(seed));
	setCfgParam("mu", 6.3e-6); // Genome-wide mutation rate per locus, Schug et al. 1996, as above
	setCfgParam("Ne", 100); // Population size
	setCfgParam("pleiorate", 0.44); // Proportion of QTL mutations that should be pleiotropic - given by Chesmore et al. 2017, based on human disease GWAS studies!
	setCfgParam("del_mean", -0.03); // Mean used for the gamma distribution that deleterious mutations are pulled function
	setCfgParam("del_shape", 0.2); // Shape parameter for gamma distribution used for deleterious mutations
	setCfgParam("delmu", 0.0); // Proportion of deleterious mutations compared to others (relative to others, 0.1 compared to 1 of neutral)
	setCfgParam("rregion", 0.0); // Recombination rate between genomic regions
	setCfgParam("rwide", 1.346e-5); // Recombination rate across the whole genome (aside from the between genomic regions rate)
	setCfgParam("nloci", 100); // Number of QTL positions along the chromosome - where QTL mutations can appear, sampled from sample()
	setCfgParam("genomelength", 20680); // Taken from my own analysis from Ensembl, and from Elliott and Gregory 2015 
	
	setCfgParam("outname", 'out_4T100L_means.csv'); // Output filename/path for the trait means/variance
	setCfgParam("outnamemuts", 'out_4T100L_muts.csv'); //Output filename/path for the mutation information
	setCfgParam("segsitesoutname", 'out_4T100L_segsites'); // Output filename for genomes - the 0s and 1s for whether a mutation is present at a certain position
	setCfgParam("zygosoutname", 'out_4T100L_zygosity'); // Output filename for zygosity of mutations for each individual for each locus position	
	setCfgParam("sizefxoutname", 'out_4T100L_sizefx'); // Output filename for size effects table of mutations and substitutions
	
	setCfgParam("modelindex", 1); // Identifier for the combination of predictors used in latin square: this is the row number in the lscombos.csv file
	
	initializeMutationRate(mu);
	
	initializeMutationType("m1", 0.5, "f", 0.0); // Neutral, non-trait-affecting mutations: remove these?
	
	//m2 mutation type: deleterious/background selection
	initializeMutationType("m2", 0.5, "g", del_mean, del_shape);  // del_mean and del_shape are defined in the batch run script, or the rwide script
	m2.color = "red";
	
	//m3 mutation type: pleiotropic QTL for both traits, fixed, we pull effects from rmvnorm
	initializeMutationType("m3", 0.5, "f", 0.0);
	//	m3.convertToSubstitution = F;
	m3.color = "green";
	
	//m4 mutation type: QTL for phenotype 0 only
	initializeMutationType("m4", 0.5, "n", 0.0, 1.0);
	//	m4.convertToSubstitution = F;
	m4.color = "blue";
	
	//m5 mutation type: QTL for phenotype 1 only
	initializeMutationType("m5", 0.5, "n", 0.0, 1.0);
	//	m5.convertToSubstitution = F;
	m5.color = "gray";
	
	//m6 mutation type: QTL for phenotype 2 only
	initializeMutationType("m6", 0.5, "n", 0.0, 1.0);	
	m6.color = "pink";
	
	//m7 mutation type: QTL for phenotype 3 only
	initializeMutationType("m7", 0.5, "n", 0.0, 1.0);
	m7.color = "cyan";
	
	
	
	// g1 genomic element type: uses m1 and m2 for all mutations - get other effects only if determined for m1 
	initializeGenomicElementType("g1", c(m1, m2), c(1, delmu));
	
	//g2 genomic element type: includes QTLS - pleiotropic is at a different rate to regular mutations
	initializeGenomicElementType("g2", c(m1, m2, m3, m4, m5), c(1, delmu, pleiorate, 1, 1));
	
	
	// Chromosome set up with 10 genomic regions, where there are 200 potential QTL sites, the rest are neutral sites (m1, m2)
	initializeGenomicElement(g1, 0, genomelength - 1);
	
	recomseq = seq(0, genomelength - 1, by = 0.1*genomelength); // Create 10 equally-distanced chromosomes
	ends = asInteger(round(recomseq[1:9])); 	// Convert to int from float
	ends = c(sort(c(ends, ends+1)), genomelength);
	rbtwnQTL = c(rep(rregion, length(ends)));
	rgenome = c(rep(rwide, length(ends))); 
	rates = c(rbind(rgenome, rbtwnQTL), rwide);
	rates = rates[0:(length(ends) - 1)];
	
	initializeRecombinationRate(rates, ends); // We set this later, when we get the positions of QTLs

	
	// QTL constants
	
	setCfgParam("QTL_mu", c(0, 0, 0, 0)); // mean distribution value for multivariate normal we are pulling effects of all four traits from
	setCfgParam("QTL_cov01", 0.0); // covariance between the pulls in the multivariate normal (pleiotropic correlation between traits)
	setCfgParam("QTL_cov02", 0.0);
	setCfgParam("QTL_cov03", 0.0);
	setCfgParam("QTL_cov12", 0.0);
	setCfgParam("QTL_cov13", 0.0);
	setCfgParam("QTL_cov23", 0.0);
	
	setCfgParam("QTL_sigma", matrix(c(1, QTL_cov01, QTL_cov02, QTL_cov03,
										QTL_cov01, 1, QTL_cov12, QTL_cov13,
										QTL_cov02, QTL_cov12, 1, QTL_cov23,
										QTL_cov03, QTL_cov13, QTL_cov23, 1), nrow=4)); // sigma used in multivariate normal pull - variance covariance matrix, where variance of each trait = 1
	
	catn("\nQTL DFE means: ");
	print(QTL_mu);
	catn("\nQTL DFE variance-covariance matrix (M matrix): ");
	print(QTL_sigma);
}

// This M matrix defines the direction of pleiotropy via the covariance. Covariance between traits at the end 
// of the simulation is due to a combination of this covariance term, random effects of drift, recombination,
// and deleterious mutation on the population. 


function (void) setCfgParam (s$ name, ifls value) // setup function for automating constant definitions between gui and command line
{
	if (!exists(name))
		defineConstant(name, value);
}


// create a population of Ne individuals
1 {
	sim.addSubpop("p1", Ne);
	chr_QTL = sort(sample(1:(sim.chromosome.lastPosition-1), nloci));
	//	chr_QTL = NULL;
	//	for (chr in sim.chromosome.genomicElements) { chr_QTL = c(chr_QTL, rdunif(ploci, chr.startPosition, chr.endPosition)); } // for each genomic element, get 100 random positions from a discrete uniform distribution and store them as QTL positions
	sim.setValue("chr_QTL", chr_QTL); //store these positions in a sim value
}

// Set fitness of m4 and m5 to be neutral
fitness(m4) {
	return 1.0;
}

fitness(m5) {
	return 1.0;
}

fitness(m5) {
	return 1.0;
}

fitness(m6) {
	return 1.0;
}

fitness(m7) {
	return 1.0;
}

// Check if the m1 mutation's position is at a chr_QTL position, if it is than redraw the mutationType

mutation(m1) {
	if (any(mut.position == sim.getValue("chr_QTL"))) { // If the mutation falls in any of our defined QTL loci within a region
	
			pleio = rbinom(1, 1, 0.5); // Redraw the mutation type, determining whether the nonsyn mutation should be pleiotropic or not 
			if (pleio == 1) {
				mut.setMutationType(m3);
				effects = rmvnorm(1, QTL_mu, QTL_sigma);		// Calculate effects for m3 here since a mutation callback won't be called since it isn't autogenerated
				mut.setValue("e0", effects[0]);
				mut.setValue("e1", effects[1]);
				mut.setValue("e2", effects[2]);
				mut.setValue("e3", effects[3]);
				mut.setValue("fe", 0.0); //fitness effect
				}
			else {
				type = rdunif(1, 3, (length(sim.mutationTypes) - 1)); // If it isn't pleiotropic, randomly choose one of the phenotypes for the QTL to affect
				mut.setMutationType(sim.mutationTypes[type]);
				mut.setSelectionCoeff(mut.mutationType.drawSelectionCoefficient(1));
				
					
				if (mut.mutationType == m4)	{
					mut.setValue("e0", mut.selectionCoeff);				// Calculate effects for the appropriate phenotype, since it isn't pleiotropic
					mut.setValue("e1", 0.0);
					mut.setValue("e2", 0.0);
					mut.setValue("e3", 0.0);
					mut.setValue("fe", 0.0); //fitness effect
					}
					
				if (mut.mutationType == m5) {
					mut.setValue("e0", 0.0);
					mut.setValue("e1", mut.selectionCoeff);
					mut.setValue("e2", 0.0);
					mut.setValue("e3", 0.0);
					mut.setValue("fe", 0.0); //fitness effect	
					}		
				if (mut.mutationType == m6) {
					mut.setValue("e0", 0.0);
					mut.setValue("e1", 0.0);
					mut.setValue("e2", mut.selectionCoeff);
					mut.setValue("e3", 0.0);
					mut.setValue("fe", 0.0); //fitness effect	
					}		
				if (mut.mutationType == m7) {
					mut.setValue("e0", 0.0);
					mut.setValue("e1", 0.0);
					mut.setValue("e2", 0.0);
					mut.setValue("e3", mut.selectionCoeff);
					mut.setValue("fe", 0.0); //fitness effect	
					}							
				}
							
		return T;
		}
	else
	
		return T;
}


// For non-pleiotropic mutations, set their e0 and e1 values so we can have standardised output in that format

mutation(m2) {
	mut.setValue("e0", 0.0);
	mut.setValue("e1", 0.0);
	mut.setValue("e2", 0.0);
	mut.setValue("e3", 0.0);
	mut.setValue("fe", mut.selectionCoeff); // fitness effect
	
	return T;

}

// Output and phenotype calculation
1:100000 late() {
	
	if (sim.generation % 500 != 0) // !CHECK THIS! Grab a sample every 500 generations: results in 200 time points per run, just like old model, file size should be the same as before
		return;
	// For each individual, grab the mutation effects and store them as a phenotype value for each phenotype, summing the effects of m3, m4, and/or, m5. This is additive!
	
	// First, collect the substitutions to apply to all individuals' phenotypes
	inds = sim.subpopulations.individuals;
	fixed = sim.substitutions;
	sizem3 = size(fixed[fixed.mutationType == m3]);
	sizem4 = size(fixed[fixed.mutationType == m4]);
	sizem5 = size(fixed[fixed.mutationType == m5]);
	sizem6 = size(fixed[fixed.mutationType == m5]);
	sizem7 = size(fixed[fixed.mutationType == m5]);
	
	fixedfx0 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e0")) else 0.0 + sizem4 ? sum(fixed[fixed.mutationType == m4].getValue("e0")) else 0.0;
	
	fixedfx1 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e1")) else 0.0 + sizem5 ? sum(fixed[fixed.mutationType == m5].getValue("e1")) else 0.0;
	
	fixedfx2 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e2")) else 0.0 + sizem5 ? sum(fixed[fixed.mutationType == m6].getValue("e2")) else 0.0;
	
	fixedfx3 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e3")) else 0.0 + sizem5 ? sum(fixed[fixed.mutationType == m7].getValue("e3")) else 0.0;
	
	
	for (ind in sim.subpopulations.individuals)
	{
		muts = ind.genomes.mutationsOfType(m3);
		mutscount = size(muts);
		
		phenotype0 = (mutscount ? sum(muts.getValue("e0")) else 0.0);
		phenotype0 = phenotype0 + (ind.sumOfMutationsOfType(m4)) + (fixedfx0); // add non-pleiotropic effects and fixed effects
		
		phenotype1 = (mutscount ? sum(muts.getValue("e1")) else 0.0);
		phenotype1 = phenotype1 + (ind.sumOfMutationsOfType(m5)) + (fixedfx1); // add non-pleiotropic effects and fixed effects
		
		phenotype2 = (mutscount ? sum(muts.getValue("e2")) else 0.0);
		phenotype2 = phenotype1 + (ind.sumOfMutationsOfType(m6)) + (fixedfx1); // add non-pleiotropic effects and fixed effects
		
		phenotype3 = (mutscount ? sum(muts.getValue("e2")) else 0.0);
		phenotype3 = phenotype1 + (ind.sumOfMutationsOfType(m7)) + (fixedfx1); // add non-pleiotropic effects and fixed effects
		
		ind.setValue("phenotype0", phenotype0);
		ind.setValue("phenotype1", phenotype1);
		ind.setValue("phenotype2", phenotype2);
		ind.setValue("phenotype3", phenotype3);
	}
	// Get the values for output: mean trait values, variance of those trait values, covariance and correlation coefficients
//	inds = sim.subpopulations.individuals;

	phenotype0 = inds.getValue("phenotype0");
	phenotype1 = inds.getValue("phenotype1");
	phenotype2 = inds.getValue("phenotype2");
	phenotype3 = inds.getValue("phenotype3");

	pheno0mean = mean(phenotype0);
	pheno1mean = mean(phenotype1);
	pheno2mean = mean(phenotype2);
	pheno3mean = mean(phenotype3);
	pheno0var = var(phenotype0);
	pheno1var = var(phenotype1);
	pheno2var = var(phenotype2);
	pheno3var = var(phenotype3);
	
	// Covariances
	phenocov01 = cov(phenotype0, phenotype1);
	phenocov02 = cov(phenotype0, phenotype2);
	phenocov03 = cov(phenotype0, phenotype3);
	phenocov12 = cov(phenotype1, phenotype2);
	phenocov13 = cov(phenotype1, phenotype3);
	phenocov23 = cov(phenotype2, phenotype3);
	
	// Pearson correlation coefficients
	phenocor01 = cor(phenotype0, phenotype1);
	phenocor02 = cor(phenotype0, phenotype2);
	phenocor03 = cor(phenotype0, phenotype3);
	phenocor12 = cor(phenotype1, phenotype2);
	phenocor13 = cor(phenotype1, phenotype3);
	phenocor23 = cor(phenotype2, phenotype3);
	
	// Stick those values in the output, along with predictors - there are a lot of predictors now... do we replace them all with modelindex aside from seed?
	meanline = paste(c(sim.generation, ", ", getSeed(), ", ", modelindex, ", ", rregion, ", ", rwide, ", ", delmu, ", ", QTL_cov01, ", ", Ne, ", ", pheno0mean, ", ", pheno0var, ", ", pheno1mean, ", ", pheno1var, ", ", pheno2mean, ", ", pheno2var, ", ", pheno3mean, ", ", pheno3var, ", ", phenocov01, ", ", phenocov02, ", ", phenocov03, ", ", phenocor01, ""), "");
	file = paste(meanline, "");
	
	// Write the file
	writeFile(outname, file, append = T);
	
	
// Mutation output: only do this once every 25000 generations: missing a lot of micro-evolution, but we keep fixations, and the files get too big otherwise	
	
	if (sim.generation % 25000 != 0)
		return;
	
	// Output for mutations
	
	// Store vectors of unique mutations, sorted by the generation in which they originated
	muts = sortBy(c(sim.mutationsOfType(m2), sim.mutationsOfType(m3), sim.mutationsOfType(m4), sim.mutationsOfType(m5)), "originGeneration");
	
	// same for substitutions
	subs = sortBy(c(sim.substitutions[sim.substitutions.mutationType != m1]), "originGeneration");
	
	// Set up an empty output to store all our mutations' information for this generation
	mutsLines = NULL;
	revmuts = rev(muts); // Reverse of the vector: the first value in this is the last mutation in the original list
	revsubs = rev(subs); // could instead call muts.size() and use if mut == muts[muts.size() - 1] to check, maybe uses less memory, probably same speed
	
	// Put information on these unique mutations into a separate mutations file	
	
	// Check if there are any substitutions, if not we need to fix the output lines	by not including the \n character at the end of the last mutation line
	
	if (size(subs))
		for (mut in muts) {
			mutFreq = mean(sim.subpopulations.genomes.containsMutations(mut));
			mutType = mut.mutationType.id;
			mutsLine = paste(c(sim.generation, ", ", getSeed(), ", ", modelindex, ", ", rregion, ", ", rwide, ", ", delmu, ", ", QTL_cov, ", ", Ne, ", ", mutType, ", ", mut.id, ", ", mut.position, ", ", mut.originGeneration, ", ", mut.getValue("e0"), ", ", mut.getValue("e1"), ", ", mut.getValue("fe"), ", ", mutFreq, ", ", "N/A", "\n"), "");
			
			mutsLines = c(mutsLines, mutsLine);
		}
	else
		for (mut in muts) {
			mutFreq = mean(sim.subpopulations.genomes.containsMutations(mut));
			mutType = mut.mutationType.id;
			if (mut != revmuts[0]) // Quality hack
				mutsLine = paste(c(sim.generation, ", ", getSeed(), ", ", modelindex, ", ", rregion, ", ", rwide, ", ", delmu, ", ", QTL_cov, ", ", Ne, ", ", mutType, ", ", mut.id, ", ", mut.position, ", ", mut.originGeneration, ", ", mut.getValue("e0"), ", ", mut.getValue("e1"), ", ", mut.getValue("fe"), ", ", mutFreq, ", ", "N/A", "\n"), "");
			else
				mutsLine = paste(c(sim.generation, ", ", getSeed(), ", ", modelindex, ", ", rregion, ", ", rwide, ", ", delmu, ", ", QTL_cov, ", ", Ne, ", ", mutType, ", ", mut.id, ", ", mut.position, ", ", mut.originGeneration, ", ", mut.getValue("e0"), ", ", mut.getValue("e1"), ", ", mut.getValue("fe"), ", ", mutFreq, ", ", "N/A", ""), "");
			mutsLines = c(mutsLines, mutsLine);
		}
	
	
	
	for (sub in subs) {
		subFreq = 1.0;
		subType = sub.mutationType.id;
		
		if (sub != revsubs[0]) // THIS IS THE HACK THAT I MUST RESORT TO THANKS TO NO \b OR REPLACE() 	GOSH BLESS EIDOS
			subLine = paste(c(sim.generation, ", ", getSeed(), ", ", modelindex, ", ", rregion, ", ", rwide, ", ", delmu, ", ", QTL_cov01, ", ", Ne, ", ", subType, ", ", sub.id, ", ", sub.position, ", ", sub.originGeneration, ", ", sub.getValue("e0"), ", ", sub.getValue("e1"), ", ", sub.getValue("fe"), ", ", subFreq, ", ", sub.fixationGeneration, "\n"), "");
		else
			subLine = paste(c(sim.generation, ", ", getSeed(), ", ", modelindex, ", ", rregion, ", ", rwide, ", ", delmu, ", ", QTL_cov01, ", ", Ne, ", ", subType, ", ", sub.id, ", ", sub.position, ", ", sub.originGeneration, ", ", sub.getValue("e0"), ", ", sub.getValue("e1"), ", ", sub.getValue("fe"), ", ", subFreq, ", ", sub.fixationGeneration, ""), "");
		
		mutsLines = c(mutsLines, subLine); // Add substitutions to mutation output
	
	}
	
	mutsFile = paste(mutsLines, ""); // n.b. does \b exist in eidos? Would make it easier
	
	// Write the mutations file
	// Fail safe in case there are no mutations at some point and the for loop doesn't run
	if (exists('mutsLine'))
		writeFile(outnamemuts, mutsFile, append = T);
	
	
	// SLiMGUI test output 	
	//	catn(paste(c("Generation: ", sim.generation, " Phenotype 0 Mean: ", pheno0mean, " Phenotype 1 Mean: ", pheno1mean, " covariance: ", phenocov)));

	
}

// Genome output: We have to do this for each trait! So Trait 1 uses mutation types m3 and m4; trait 2 uses m3 and m5, need to get these effects separately


// Trait 1: m3, m4
// Genome output 1 and 2: Binary for whether a mutation has occurred at a given QTL position or not - the segregating sites table, and the size effects of those in the size effects table: The effects of each of these QTL mutations to a separate matrix, the size-effects table
	// Using genomes, subs, and positions from genome output 1 declarations

100000 late() {
	genomes = sim.subpopulations.genomes;
	subs = sim.substitutions[sim.substitutions.mutationType == m3 | sim.substitutions.mutationType == m4];
	positions = sim.getValue("chr_QTL");
	segsitesfile = NULL;
	sizefxfile = NULL;
	
	if (length(subs) == 0 & length(c(genomes.positionsOfMutationsOfType(m3), genomes.positionsOfMutationsOfType(m4))) == 0) {		// Skip the loop if there are no mutations to put in
		segsitesline = rep(0, length(positions));	
		segsitesfile = paste0(c(rep(paste(c(segsitesline, "\n"), ", "), length(genomes) - 1), paste(segsitesline, ", ")));
	// Since if there are no mutations table 1 and 2 will just be 0s and identical, set sizefxfile = segsitesfile
		sizefxfile = segsitesfile;
	}
	
	else {
		
		// For each genome in the seqence, get a list of all the positions where QTL mutations occur, assign a 1 if that position matches a mutation's position 	
		for (genome in genomes) {
		//Table 1: Segregating sites
			segsitesline = rep(0, (sim.chromosome.lastPosition));
			muts = genome.mutations[genome.mutations.mutationType == m3 | genome.mutations.mutationType == m4];
			segsitesline[muts.position] = 1;
			segsitesline[subs.position] = 1;
			segsitesline = segsitesline[positions];
		//Table 2: Size effects
			sizefxline = rep(0.0, sim.chromosome.lastPosition);
			if (muts.size() > 0) { // Double check to make sure we can get those values
			sizefxline[muts.position] = muts.getValue("e0");	// Fill the appropriate vector element in for a given mutation with its selection coef
				}			
			if (subs.size() > 0) {							
			sizefxline[subs.position] = subs.getValue("e0");			
				}
			sizefxline = sizefxline[positions];
			
			if (genome != genomes[genomes.size() - 1]) { // Check if the genome is the last in the list or not: we shouldn't add a new line for the last genome
				segsitesfile = paste0(c(segsitesfile, paste(segsitesline, ", "), "\n"));
				sizefxfile = paste0(c(sizefxfile, paste(sizefxline, ", "), "\n"));
			}
			
			else {
				segsitesfile = paste0(c(segsitesfile, paste(segsitesline, ", ")));
				sizefxfile = paste0(c(sizefxfile, paste(sizefxline, ", ")));
			}
		
		}
	}
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", segsitesoutname, "trait1.csv"))), segsitesfile, append = T); // append is true so we can stick outputs from different model/seed runs into the same file
//	// This is ~/model{modelindex}/seed_segsitesoutname_trait1.csv
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", sizefxoutname, "trait1.csv"))), sizefxfile, append = T);
	

	
	
	// Genome output 3: per individual homo/heterozygosity or absence: 0, 1, 2 - the genotype table
	// Using subs and positions from genome output 1 declarations
	
	inds = sim.subpopulations.individuals;
	zygosout = NULL;
	zygosfile = NULL;
	
	if (length(subs) == 0 & length(c(inds.genomes.positionsOfMutationsOfType(m3), inds.genomes.positionsOfMutationsOfType(m4))) == 0) {		// Skip the loop if there are no mutations to put in
		zygosline = rep(0, length(positions));	
		zygosfile = paste0(c(rep(paste(c(zygosline, "\n"), ", "), length(inds) - 1), paste(zygosline, ", ")));
	}
	
	else {
		
		// For each individual in the seqence, get a list of all the positions where QTL mutations occur, assign a 1 or 2 if that position matches a mutation's position 	
		for (ind in inds) {
			zygosline = rep(0, (sim.chromosome.lastPosition));
				
			muts0 = ind.genome1.mutations[ind.genome1.mutations.mutationType == m3 | ind.genome1.mutations.mutationType == m4];
			muts1 = ind.genome2.mutations[ind.genome2.mutations.mutationType == m3 | ind.genome2.mutations.mutationType == m4];
			
			// Count the shared mutations (homozygous - appear in both genomes)
			shared = sort(c(setIntersection(muts0, muts1).position, subs.position));
			
			// Then the heterozygous mutations - exist in either genome but not both
			unshared = sort(setSymmetricDifference(muts0, muts1).position);
			
			
			if ( size(shared) > 0 ) {  // For all the mutations that exist in both genomes of the individual, return 2; and 1 for those in only 1 genome
				zygosline[shared] = 2;
			}
			if ( size(unshared) > 0 ) {
				zygosline[unshared] = 1;
			}
		
		zygosline = zygosline[positions];			
			
			if (ind != inds[inds.size() - 1]) { // Check if the individual is the last in the list or not: we shouldn't add a new line for the last individual
				zygosfile = paste0(c(zygosfile, paste(zygosline, ", "), "\n"));
			}
			else {
				zygosfile = paste0(c(zygosfile, paste(zygosline, ", ")));
			}
		
		}
	}
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", zygosoutname, "trait1.csv"))), zygosfile, append = T);
	
	

	



}


// Trait 2: m3, m5
// Genome output 1 and 2: Binary for whether a mutation has occurred at a given QTL position or not - the segregating sites table; as well as table 2 for the size effects of those mutations

100000 late() {
	genomes = sim.subpopulations.genomes;
	subs = sim.substitutions[sim.substitutions.mutationType == m3 | sim.substitutions.mutationType == m5];
	positions = sim.getValue("chr_QTL");
	segsitesfile = NULL;
	sizefxfile = NULL;
	
	if (length(subs) == 0 & length(c(genomes.positionsOfMutationsOfType(m3), genomes.positionsOfMutationsOfType(m5))) == 0) {		// Skip the loop if there are no mutations to put in
		segsitesline = rep(0, length(positions));	
		segsitesfile = paste0(c(rep(paste(c(segsitesline, "\n"), ", "), length(genomes) - 1), paste(segsitesline, ", ")));
	// Since if there are no mutations table 1 and 2 will just be 0s and identical, set sizefxfile = segsitesfile
		sizefxfile = segsitesfile;
	}
	
	else {
		
		// For each genome in the seqence, get a list of all the positions where QTL mutations occur, assign a 1 if that position matches a mutation's position 	
		for (genome in genomes) {
		//Table 1: Segregating sites
			segsitesline = rep(0, (sim.chromosome.lastPosition));
			muts = genome.mutations[genome.mutations.mutationType == m3 | genome.mutations.mutationType == m5];
			segsitesline[muts.position] = 1;
			segsitesline[subs.position] = 1;
			segsitesline = segsitesline[positions];
		//Table 2: Size effects
			sizefxline = rep(0.0, sim.chromosome.lastPosition);
			if (muts.size() > 0) { // Double check to make sure we can get those values
			sizefxline[muts.position] = muts.getValue("e1");	// Fill the appropriate vector element in for a given mutation with its selection coef
				}			
			if (subs.size() > 0) {							
			sizefxline[subs.position] = subs.getValue("e1");			
				}
			sizefxline = sizefxline[positions];
			
			if (genome != genomes[genomes.size() - 1]) { // Check if the genome is the last in the list or not: we shouldn't add a new line for the last genome
				segsitesfile = paste0(c(segsitesfile, paste(segsitesline, ", "), "\n"));
				sizefxfile = paste0(c(sizefxfile, paste(sizefxline, ", "), "\n"));
			}
			
			else {
				segsitesfile = paste0(c(segsitesfile, paste(segsitesline, ", ")));
				sizefxfile = paste0(c(sizefxfile, paste(sizefxline, ", ")));
			}
		
		}
	}
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", segsitesoutname, "trait2.csv"))), segsitesfile); 

	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", sizefxoutname, "_trait2.csv"))), sizefxfile);
	
	
	
	// Genome output 3: per individual homo/heterozygosity or absence: 0, 1, 2 - the genotype table
	// Using subs and positions from genome output 1 declarations
	
	inds = sim.subpopulations.individuals;
	zygosout = NULL;
	zygosfile = NULL;
	
	if (length(subs) == 0 & length(c(inds.genomes.positionsOfMutationsOfType(m3), inds.genomes.positionsOfMutationsOfType(m5))) == 0) {		// Skip the loop if there are no mutations to put in
		zygosline = rep(0, length(positions));	
		zygosfile = paste0(c(rep(paste(c(zygosline, "\n"), ", "), length(inds) - 1), paste(zygosline, ", ")));
	}
	
	else {
		
		// For each individual in the seqence, get a list of all the positions where QTL mutations occur, assign a 1 or 2 if that position matches a mutation's position 	
		for (ind in inds) {
			zygosline = rep(0, (sim.chromosome.lastPosition));
				
			muts0 = ind.genome1.mutations[ind.genome1.mutations.mutationType == m3 | ind.genome1.mutations.mutationType == m5];
			muts1 = ind.genome2.mutations[ind.genome2.mutations.mutationType == m3 | ind.genome2.mutations.mutationType == m5];
			
			// Count the shared mutations (homozygous - appear in both genomes)
			shared = sort(c(setIntersection(muts0, muts1).position, subs.position));
			
			// Then the heterozygous mutations - exist in either genome but not both
			unshared = sort(setSymmetricDifference(muts0, muts1).position);
			
			
			if ( size(shared) > 0 ) {  // For all the mutations that exist in both genomes of the individual, return 2; and 1 for those in only 1 genome
				zygosline[shared] = 2;
			}
			if ( size(unshared) > 0 ) {
				zygosline[unshared] = 1;
			}
		
		zygosline = zygosline[positions];			
			
			if (ind != inds[inds.size() - 1]) { // Check if the individual is the last in the list or not: we shouldn't add a new line for the last individual
				zygosfile = paste0(c(zygosfile, paste(zygosline, ", "), "\n"));
			}
			else {
				zygosfile = paste0(c(zygosfile, paste(zygosline, ", ")));
			}
		
		}
	}
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", zygosoutname, "trait2.csv"))), zygosfile);
	

}

// Trait 3: m3, m6
// Genome output 1 and 2: Binary for whether a mutation has occurred at a given QTL position or not - the segregating sites table; as well as table 2 for the size effects of those mutations

100000 late() {
	genomes = sim.subpopulations.genomes;
	subs = sim.substitutions[sim.substitutions.mutationType == m3 | sim.substitutions.mutationType == m6];
	positions = sim.getValue("chr_QTL");
	segsitesfile = NULL;
	sizefxfile = NULL;
	
	if (length(subs) == 0 & length(c(genomes.positionsOfMutationsOfType(m3), genomes.positionsOfMutationsOfType(m6))) == 0) {		// Skip the loop if there are no mutations to put in
		segsitesline = rep(0, length(positions));	
		segsitesfile = paste0(c(rep(paste(c(segsitesline, "\n"), ", "), length(genomes) - 1), paste(segsitesline, ", ")));
	// Since if there are no mutations table 1 and 2 will just be 0s and identical, set sizefxfile = segsitesfile
		sizefxfile = segsitesfile;
	}
	
	else {
		
		// For each genome in the seqence, get a list of all the positions where QTL mutations occur, assign a 1 if that position matches a mutation's position 	
		for (genome in genomes) {
		//Table 1: Segregating sites
			segsitesline = rep(0, (sim.chromosome.lastPosition));
			muts = genome.mutations[genome.mutations.mutationType == m3 | genome.mutations.mutationType == m6];
			segsitesline[muts.position] = 1;
			segsitesline[subs.position] = 1;
			segsitesline = segsitesline[positions];
		//Table 2: Size effects
			sizefxline = rep(0.0, sim.chromosome.lastPosition);
			if (muts.size() > 0) { // Double check to make sure we can get those values
			sizefxline[muts.position] = muts.getValue("e1");	// Fill the appropriate vector element in for a given mutation with its selection coef
				}			
			if (subs.size() > 0) {							
			sizefxline[subs.position] = subs.getValue("e1");			
				}
			sizefxline = sizefxline[positions];
			
			if (genome != genomes[genomes.size() - 1]) { // Check if the genome is the last in the list or not: we shouldn't add a new line for the last genome
				segsitesfile = paste0(c(segsitesfile, paste(segsitesline, ", "), "\n"));
				sizefxfile = paste0(c(sizefxfile, paste(sizefxline, ", "), "\n"));
			}
			
			else {
				segsitesfile = paste0(c(segsitesfile, paste(segsitesline, ", ")));
				sizefxfile = paste0(c(sizefxfile, paste(sizefxline, ", ")));
			}
		
		}
	}
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", segsitesoutname, "trait3.csv"))), segsitesfile); 

	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", sizefxoutname, "_trait3.csv"))), sizefxfile);
	
	
	
	// Genome output 3: per individual homo/heterozygosity or absence: 0, 1, 2 - the genotype table
	// Using subs and positions from genome output 1 declarations
	
	inds = sim.subpopulations.individuals;
	zygosout = NULL;
	zygosfile = NULL;
	
	if (length(subs) == 0 & length(c(inds.genomes.positionsOfMutationsOfType(m3), inds.genomes.positionsOfMutationsOfType(m6))) == 0) {		// Skip the loop if there are no mutations to put in
		zygosline = rep(0, length(positions));	
		zygosfile = paste0(c(rep(paste(c(zygosline, "\n"), ", "), length(inds) - 1), paste(zygosline, ", ")));
	}
	
	else {
		
		// For each individual in the seqence, get a list of all the positions where QTL mutations occur, assign a 1 or 2 if that position matches a mutation's position 	
		for (ind in inds) {
			zygosline = rep(0, (sim.chromosome.lastPosition));
				
			muts0 = ind.genome1.mutations[ind.genome1.mutations.mutationType == m3 | ind.genome1.mutations.mutationType == m6];
			muts1 = ind.genome2.mutations[ind.genome2.mutations.mutationType == m3 | ind.genome2.mutations.mutationType == m6];
			
			// Count the shared mutations (homozygous - appear in both genomes)
			shared = sort(c(setIntersection(muts0, muts1).position, subs.position));
			
			// Then the heterozygous mutations - exist in either genome but not both
			unshared = sort(setSymmetricDifference(muts0, muts1).position);
			
			
			if ( size(shared) > 0 ) {  // For all the mutations that exist in both genomes of the individual, return 2; and 1 for those in only 1 genome
				zygosline[shared] = 2;
			}
			if ( size(unshared) > 0 ) {
				zygosline[unshared] = 1;
			}
		
		zygosline = zygosline[positions];			
			
			if (ind != inds[inds.size() - 1]) { // Check if the individual is the last in the list or not: we shouldn't add a new line for the last individual
				zygosfile = paste0(c(zygosfile, paste(zygosline, ", "), "\n"));
			}
			else {
				zygosfile = paste0(c(zygosfile, paste(zygosline, ", ")));
			}
		
		}
	}
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", zygosoutname, "trait3.csv"))), zygosfile);
	

}

// Trait 4: m3, m7
// Genome output 1 and 2: Binary for whether a mutation has occurred at a given QTL position or not - the segregating sites table; as well as table 2 for the size effects of those mutations

100000 late() {
	genomes = sim.subpopulations.genomes;
	subs = sim.substitutions[sim.substitutions.mutationType == m3 | sim.substitutions.mutationType == m7];
	positions = sim.getValue("chr_QTL");
	segsitesfile = NULL;
	sizefxfile = NULL;
	
	if (length(subs) == 0 & length(c(genomes.positionsOfMutationsOfType(m3), genomes.positionsOfMutationsOfType(m7))) == 0) {		// Skip the loop if there are no mutations to put in
		segsitesline = rep(0, length(positions));	
		segsitesfile = paste0(c(rep(paste(c(segsitesline, "\n"), ", "), length(genomes) - 1), paste(segsitesline, ", ")));
	// Since if there are no mutations table 1 and 2 will just be 0s and identical, set sizefxfile = segsitesfile
		sizefxfile = segsitesfile;
	}
	
	else {
		
		// For each genome in the seqence, get a list of all the positions where QTL mutations occur, assign a 1 if that position matches a mutation's position 	
		for (genome in genomes) {
		//Table 1: Segregating sites
			segsitesline = rep(0, (sim.chromosome.lastPosition));
			muts = genome.mutations[genome.mutations.mutationType == m3 | genome.mutations.mutationType == m7];
			segsitesline[muts.position] = 1;
			segsitesline[subs.position] = 1;
			segsitesline = segsitesline[positions];
		//Table 2: Size effects
			sizefxline = rep(0.0, sim.chromosome.lastPosition);
			if (muts.size() > 0) { // Double check to make sure we can get those values
			sizefxline[muts.position] = muts.getValue("e1");	// Fill the appropriate vector element in for a given mutation with its selection coef
				}			
			if (subs.size() > 0) {							
			sizefxline[subs.position] = subs.getValue("e1");			
				}
			sizefxline = sizefxline[positions];
			
			if (genome != genomes[genomes.size() - 1]) { // Check if the genome is the last in the list or not: we shouldn't add a new line for the last genome
				segsitesfile = paste0(c(segsitesfile, paste(segsitesline, ", "), "\n"));
				sizefxfile = paste0(c(sizefxfile, paste(sizefxline, ", "), "\n"));
			}
			
			else {
				segsitesfile = paste0(c(segsitesfile, paste(segsitesline, ", ")));
				sizefxfile = paste0(c(sizefxfile, paste(sizefxline, ", ")));
			}
		
		}
	}
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", segsitesoutname, "trait4.csv"))), segsitesfile); 

	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", sizefxoutname, "_trait4.csv"))), sizefxfile);
	
	
	
	// Genome output 3: per individual homo/heterozygosity or absence: 0, 1, 2 - the genotype table
	// Using subs and positions from genome output 1 declarations
	
	inds = sim.subpopulations.individuals;
	zygosout = NULL;
	zygosfile = NULL;
	
	if (length(subs) == 0 & length(c(inds.genomes.positionsOfMutationsOfType(m3), inds.genomes.positionsOfMutationsOfType(m7))) == 0) {		// Skip the loop if there are no mutations to put in
		zygosline = rep(0, length(positions));	
		zygosfile = paste0(c(rep(paste(c(zygosline, "\n"), ", "), length(inds) - 1), paste(zygosline, ", ")));
	}
	
	else {
		
		// For each individual in the seqence, get a list of all the positions where QTL mutations occur, assign a 1 or 2 if that position matches a mutation's position 	
		for (ind in inds) {
			zygosline = rep(0, (sim.chromosome.lastPosition));
				
			muts0 = ind.genome1.mutations[ind.genome1.mutations.mutationType == m3 | ind.genome1.mutations.mutationType == m7];
			muts1 = ind.genome2.mutations[ind.genome2.mutations.mutationType == m3 | ind.genome2.mutations.mutationType == m7];
			
			// Count the shared mutations (homozygous - appear in both genomes)
			shared = sort(c(setIntersection(muts0, muts1).position, subs.position));
			
			// Then the heterozygous mutations - exist in either genome but not both
			unshared = sort(setSymmetricDifference(muts0, muts1).position);
			
			
			if ( size(shared) > 0 ) {  // For all the mutations that exist in both genomes of the individual, return 2; and 1 for those in only 1 genome
				zygosline[shared] = 2;
			}
			if ( size(unshared) > 0 ) {
				zygosline[unshared] = 1;
			}
		
		zygosline = zygosline[positions];			
			
			if (ind != inds[inds.size() - 1]) { // Check if the individual is the last in the list or not: we shouldn't add a new line for the last individual
				zygosfile = paste0(c(zygosfile, paste(zygosline, ", "), "\n"));
			}
			else {
				zygosfile = paste0(c(zygosfile, paste(zygosline, ", ")));
			}
		
		}
	}
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", zygosoutname, "trait4.csv"))), zygosfile);
	

}

// Run for 100,000 generations to capture even more neutral evolution
100000 late() {
	sim.simulationFinished();
}

