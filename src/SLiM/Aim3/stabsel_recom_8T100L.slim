// set up a balancing selection simulation, mu = mutation rate, Ne = eff pop size
// increasing complexity: not all mutations are pleiotropic, pleiotropy rate given by pleio: this is the percentage of mutations that should be pleiotropic
// Also output for all mutations - their effects, frequencies, origin generation and positions. Can get a measurement of linkage by their distance, whether they are 
// in the same region etc. 
// Model now puts mutations which have fixed into substitution objects and adds the effects of substitutions correctly into the phenotypes. These 
// substitutions are also put in the mutation output (freq = 1)
// Mutation file gets massive, possibly need to compress it with writeFile(compress = T), but that will add performance overhead + lots more RAM usage as it will 
// likely keep each line in memory while it appends them and compresses
// Alternative solution (which I've done here) is to get the mutation output less frequently, but this results in missing a lot of the micro-evolution going on 
// through losses of mutations, which are likely to be missed
// We've set the total number of generations to 50,000 to track evolution over longer periods - this may be too long for Awoonga, it is 2.2x longer per run! 
// Although should handle this long period better now since we're converting everything to substitutions - but not by a massive amount

// New genome structure: 10 genomic regions, each of 100 QTL loci: these loci can be synonymous (m1), or nonsynonymous (m3, m4, m5), being either pleiotropic (m3), or randomly chosen from the non-pleiotropic mutations (m4, m5). Perhaps I should change this: so we have QTL loci for each trait.



initialize() {
	if (!exists("slimgui")) {
		setCfgParam("seed", getSeed());	// random seed
	}
	else {
		setSeed(asInteger(round(runif(1, 1, 2^62 - 1))));			// sets the seed from either a command line input, -s, or from the above CfgParam
		setCfgParam("seed", getSeed());
		catn("Actual seed: " + asInteger(seed));
	}
	setCfgParam("mu", 8.045e-6); // Mutation rate averaged across five species from Table 1 Aston et al. 2017 
	setCfgParam("Ne", 8000); // Population size: Fixed at 8000
	setCfgParam("pleiorate", 0.44); // Proportion of QTL mutations that should be pleiotropic - given by Chesmore et al. 2017, based on human disease GWAS studies!
	setCfgParam("del_mean", -0.03); // Mean used for the gamma distribution that deleterious mutations are pulled function
	setCfgParam("del_shape", 0.2); // Shape parameter for gamma distribution used for deleterious mutations
	setCfgParam("delmu", 1.0); // Proportion of deleterious mutations compared to others (relative to others, 0.1 compared to 1 of neutral)
	setCfgParam("rwide", 1.241e-4); // Recombination rate across the whole genome (used as mean in rnorm)
	setCfgParam("rsd", rwide*0.1); // Recombination rate standard deviation (used in rnorm)
	setCfgParam("nloci", 100); // Number of QTL positions along the chromosome - where QTL mutations can appear, sampled from sample(): Fixed at 100
	setCfgParam("genomelength", 800); // 800 QTLs, no neutral non-trait loci
	setCfgParam("locisigma", 1.0); // Variance used for normal disttribution pulls - effectively the additive effect size
	setCfgParam("tau", 10.0); // scalar for shape of fitness curve: smaller = narrower curve, greater selection pressure: need to be careful with values, they need to be relative to the mean phenotype after burn-in, and the initial distance from the optimum.
	
	setCfgParam("outpositions", 'out_8T_stabsel_chr.csv'); // Output filename/path for chromosome endpoints and QTL loci positions
	setCfgParam("outburn", 'out_8T_stabsel_burnin.csv'); // Output burn-in heterozygosities
	setCfgParam("outname", 'out_8T_stabsel_means.csv'); // Output filename/path for the trait means/variance
	setCfgParam("outopt", 'out_8T_stabsel_opt.csv'); // Output filename/path for the trait optimum values for each run
	setCfgParam("outnamemuts", 'out_8T_stabsel_muts.csv'); //Output filename/path for the mutation information
	setCfgParam("segsitesoutname", 'out_8T_stabsel_segsites'); // Output filename for genomes - the 0s and 1s for whether a mutation is present at a certain position
	setCfgParam("zygosoutname", 'out_8T_stabsel_zygosity'); // Output filename for zygosity of mutations for each individual for each locus position	
	setCfgParam("sizefxoutname", 'out_8T_stabsel_sizefx'); // Output filename for size effects table of mutations and substitutions
	
	setCfgParam("modelindex", 1); // Identifier for the combination of predictors used in latin square: this is the row number in the lscombos.csv file
	
	initializeMutationRate(mu);
	
	initializeMutationType("m1", 0.5, "f", 0.0); // Neutral, non-trait-affecting mutations
	
	//m2 mutation type: deleterious/background selection
	initializeMutationType("m2", 0.5, "g", del_mean, del_shape);  // del_mean and del_shape are defined in the batch run script, or the cfg parameters
	m2.color = "red";
	
	//m3 mutation type: pleiotropic QTL for both traits, fixed, we pull effects from rmvnorm
	initializeMutationType("m3", 0.5, "f", 0.0);
	//	m3.convertToSubstitution = F;
	m3.color = "green";
	
	//m4 mutation type: QTL for phenotype 0 only
	initializeMutationType("m4", 0.5, "n", 0.0, locisigma);
	//	m4.convertToSubstitution = F;
	m4.color = "blue";
	
	//m5 mutation type: QTL for phenotype 1 only
	initializeMutationType("m5", 0.5, "n", 0.0, locisigma);
	//	m5.convertToSubstitution = F;
	m5.color = "gray";
	
	//m6 mutation type: QTL for phenotype 2 only
	initializeMutationType("m6", 0.5, "n", 0.0, locisigma);	
	m6.color = "pink";
	
	//m7 mutation type: QTL for phenotype 3 only
	initializeMutationType("m7", 0.5, "n", 0.0, locisigma);
	m7.color = "cyan";
	
	//m8 mutation type: QTL for phenotype 4 only
	initializeMutationType("m8", 0.5, "n", 0.0, locisigma);
	//	m8.convertToSubstitution = F;
	m8.color = "purple";
	
	//m9 mutation type: QTL for phenotype 5 only
	initializeMutationType("m9", 0.5, "n", 0.0, locisigma);
	//	m9.convertToSubstitution = F;
	m9.color = "aquamarine";
	
	//m10 mutation type: QTL for phenotype 6 only
	initializeMutationType("m10", 0.5, "n", 0.0, locisigma);	
	m10.color = "chartreuse";
	
	//m11 mutation type: QTL for phenotype 7 only
	initializeMutationType("m11", 0.5, "n", 0.0, locisigma);
	m11.color = "orangered";
	
	
	// g1 genomic element type: uses m1 and m2 for all mutations - get other effects only if determined for m1 
	initializeGenomicElementType("g1", c(m1, m2), c(1, delmu));
	
	
// Single chromosome modelled for simplicity
	
	initializeGenomicElement(g1, 0, genomelength - 1);

	// recombination rate
	initializeRecombinationRate(rwide); 

	
	// QTL constants - UNIVERSAL PLEIOTROPY assumed!
	
	setCfgParam("pleio_mu", float(8)); // mean distribution value for multivariate normal we are pulling effects of all 8 traits from
	setCfgParam("pleio_cov", 0.5); // Default covariance term for use in pleio_covs - 0 is our null: pleiotropy, but with no direction
	if (pleio_cov != 0.0) {
		
		defineConstant("pleio_covs", rnorm(28, pleio_cov, abs(pleio_cov/5)));		// If we set our pleio_cov to something other than 0.0 (some directionality to the covariance), use a norm distribution to randomise effects around that value, so we aren't assuming every covariance value is identical
	}
	else {
		defineConstant("pleio_covs", rep(pleio_cov, 28)); // If pleio_cov is 0, expand that to a full vector of all covariance terms
	}
		
									
	sigma = matrix(c(			1.0, pleio_covs[0], pleio_covs[1], pleio_covs[2], pleio_covs[3], pleio_covs[4], pleio_covs[5], pleio_covs[6],
									pleio_covs[0], 1.0, pleio_covs[7], pleio_covs[8], pleio_covs[9], pleio_covs[10], pleio_covs[11], pleio_covs[12],
									pleio_covs[1], pleio_covs[7], 1.0, pleio_covs[13], pleio_covs[14], pleio_covs[15], pleio_covs[16], pleio_covs[17],
									pleio_covs[2], pleio_covs[8], pleio_covs[13], 1.0, pleio_covs[18], pleio_covs[19], pleio_covs[20], pleio_covs[21],
									pleio_covs[3], pleio_covs[9], pleio_covs[14], pleio_covs[18], 1.0, pleio_covs[22], pleio_covs[23], pleio_covs[24],
									pleio_covs[4], pleio_covs[10], pleio_covs[15], pleio_covs[19], pleio_covs[22], 1.0, pleio_covs[25], pleio_covs[26],
									pleio_covs[5], pleio_covs[11], pleio_covs[16], pleio_covs[20], pleio_covs[23], pleio_covs[25], 1.0, pleio_covs[27],
									pleio_covs[6], pleio_covs[12], pleio_covs[17], pleio_covs[21], pleio_covs[24], pleio_covs[26], pleio_covs[27], 1.0), nrow=8); // sigma used in multivariate normal pull - this is a correlation matrix, we scale by locisigma to convert to variance-covariance

	sigma = sigma * t(sigma); // A * A^t ensures matrices are positive definite
	sigma = locisigma * sigma;

	
	defineConstant("pleio_sigma", sigma);	
	catn("\nPleiotropic QTL DFE means: ");
	print(pleio_mu);
	catn("\nPleiotropic QTL DFE variance-covariance matrix (M matrix): ");
	print(pleio_sigma);
}


// This M matrix defines the direction of pleiotropy via the covariance. Covariance between traits at the end 
// of the simulation is due to a combination of this covariance term, random effects of drift, recombination,
// and deleterious mutation on the population. 


function (void) setCfgParam (s$ name, ifls value) // setup function for automating constant definitions between gui and command line
{
	if (!exists(name))
		defineConstant(name, value);
}

/*

  Estimate the average nucleotide heterozygosity in a subpopulation by sampling individuals at random and averaging the heterozygosity of all of the individuals sampled.  Note that this function normally uses a sample of individuals, of a size supplied in the optional parameter sampleSize; but if sampleSize is equal to the number of individuals in subpop, it will instead compute the heterozygosity exactly, as the mean of the heterozygosities of all individuals, rather than taking a sample.  For large subpopulations, that will of course be much slower than using a sample, however.

From SLiM-Extras, https://github.com/MesserLab/SLiM-Extras

*/

function (f$)genomicHeterozygosity(o<Genome>$ genome1, o<Genome>$ genome2)
{
	muts1 = genome1.mutations;
	muts2 = genome2.mutations;
	unshared = setSymmetricDifference(muts1, muts2);
	pi = size(unshared) / genomelength;
	return pi;
}


function (f$)subpopHeterozygosity(o<Subpopulation>$ subpop, [i$ sampleSize=100])
{
	if (sampleSize == subpop.individualCount)
		sampledIndividuals = subpop.individuals;
	else
		sampledIndividuals = sample(subpop.individuals, sampleSize, replace=T);
	
	pi_total = 0;
	for (individual in sampledIndividuals)
	{
		genomes = individual.genomes;
		individual_pi = genomicHeterozygosity(genomes[0], genomes[1]);
		pi_total = pi_total + individual_pi;
	}
	return pi_total / sampleSize;
}


// create a population of Ne individuals
1 {
	sim.addSubpop("p1", Ne);
	chr_QTL = sample(0:799, 800); // Set the positions of our loci, from position 1 to the length of the chromosome;

	sim.setValue("chr_QTL", chr_QTL); //store these positions in a sim value
	
	
	chrfile = paste(c(modelindex, asString(seed), nloci, chr_QTL), ","); // Output information on where the QTLs are, and the recombination structure of the genome
	
	writeFile(outpositions, chrfile, append = T);
	
}

// Set fitness of m4 and m5 to be neutral
fitness(m4) {
	return 1.0;
}

fitness(m5) {
	return 1.0;
}

fitness(m6) {
	return 1.0;
}

fitness(m7) {
	return 1.0;
}

fitness(m8) {
	return 1.0;
}

fitness(m9) {
	return 1.0;
}

fitness(m10) {
	return 1.0;
}

fitness(m11) {
	return 1.0;
}

// Check if the m1 mutation's position is at a chr_QTL position, if it is than redraw the mutationType
			// From McGuigan et al. 2014: "...multivariate modeling indicated that 21% (1 in every 4.8) of five-trait matrices displayed significant mutational 							pleiotropy." But only found pleiotropy in 0.52% of bivariate covariances - so most pleiotropic mutations affect > 2 traits
			// Decide how many traits to affect: pull a number from a gamma (? CHECK LITERATURE ?) distribution with some mean and shape parameter, then choose traits uniformly based on the number we want.
			// Or we could leave the model assuming universal pleiotropy, rather than restricted modularity		

mutation(m1) {
	if (any(mut.position == sim.getValue("chr_QTL") )) { // If the mutation falls in any of our defined QTL loci within a region 
		
		pleio = rbinom(1, 1, pleiorate); // Redraw the mutation type, determining whether the nonsyn mutation should be pleiotropic or not 
		if (pleio == 1 & all(sim.mutations.position != mut.position) & all(sim.substitutions.position != mut.position)) { // If a prior mutation has occurred there, don't change mutation type!
			mut.setMutationType(m3);
		}
		else {
			if (any(sim.substitutions.position == mut.position)) { // If a substitution has occurred, set the mutation type to that: subsetting by 0 in case there are more than 1 subsitution, they will all have the same mut type anyway, only need 1
				mut.setMutationType(sim.substitutions[sim.substitutions.position == mut.position][0].mutationType); 
			}	
				else if (any(sim.mutations.position == mut.position)) { // Otherwise check if there are any mutations segregating with that type, and set it to that
					mut.setMutationType(sim.mutations[sim.mutations.position == mut.position][0].mutationType);
			}
			
			else { // I know it's ugly, I don't have time to make it better :( SLiM has no switch() function
				if (any(sim.getValue("chr_QTL")[0:(nloci-1)] == mut.position)) // Check if our mut.position is in the right subset of chr_QTL associated with the trait
					type = m4; // If it isn't pleiotropic, set the mutation type according to the values defined in chr_QTL
				if (any(sim.getValue("chr_QTL")[nloci:(2*nloci - 1)] == mut.position))
					type = m5;				
				if (any(sim.getValue("chr_QTL")[(2*nloci):(3*nloci - 1)] == mut.position))
					type = m6;
				if (any(sim.getValue("chr_QTL")[(3*nloci):(4*nloci - 1)] == mut.position))
					type = m7;
				if (any(sim.getValue("chr_QTL")[(4*nloci):(5*nloci - 1)] == mut.position))
					type = m8;
				if (any(sim.getValue("chr_QTL")[(5*nloci):(6*nloci - 1)] == mut.position))
					type = m9;
				if (any(sim.getValue("chr_QTL")[(6*nloci):(7*nloci - 1)] == mut.position))
					type = m10;
				if (any(sim.getValue("chr_QTL")[(7*nloci):(8*nloci - 1)] == mut.position))
					type = m11;
				mut.setMutationType(type);
			}
			
			if (mut.mutationType != m3) {
				mut.setSelectionCoeff(mut.mutationType.drawSelectionCoefficient(1)); // Draw the selection coefficient for the given mutation type
			}
			
				mut.setValue("e0", 0.0);				// Initialise effects for all the traits
				mut.setValue("e1", 0.0);
				mut.setValue("e2", 0.0);
				mut.setValue("e3", 0.0);
				mut.setValue("e4", 0.0);
				mut.setValue("e5", 0.0);
				mut.setValue("e6", 0.0);
				mut.setValue("e7", 0.0);
				mut.setValue("fe", 0.0); //fitness effect
				
			if (mut.mutationType == m4)	{
				mut.setValue("e0", mut.selectionCoeff);				// Calculate effects for the appropriate phenotype, since it isn't pleiotropic
			}
			
			if (mut.mutationType == m5) {
				mut.setValue("e1", mut.selectionCoeff);
			}
			if (mut.mutationType == m6) {
				mut.setValue("e2", mut.selectionCoeff);
			}
			if (mut.mutationType == m7) {
				mut.setValue("e3", mut.selectionCoeff);
			}
			if (mut.mutationType == m8) {
				mut.setValue("e4", mut.selectionCoeff);
			}
			if (mut.mutationType == m9) {
				mut.setValue("e5", mut.selectionCoeff);	
			}
			if (mut.mutationType == m10) {
				mut.setValue("e6", mut.selectionCoeff);
			}
			if (mut.mutationType == m11) {
				mut.setValue("e7", mut.selectionCoeff);
			}
		}
		if (mut.mutationType == m3) {
			effects = rmvnorm(1, pleio_mu, pleio_sigma);		// Calculate effects for m3 here since a mutation callback won't be called since it isn't autogenerated
			mut.setValue("e0", effects[0]);
			mut.setValue("e1", effects[1]);
			mut.setValue("e2", effects[2]);
			mut.setValue("e3", effects[3]);
			mut.setValue("e4", effects[4]);
			mut.setValue("e5", effects[5]);
			mut.setValue("e6", effects[6]);
			mut.setValue("e7", effects[7]);
			mut.setValue("fe", 0.0); //fitness effect
		}
		
		return T;
	}
	else
		return F; // If the mutation is outside of the range of QTL values, something has gone wrong (since the genome is made of entirely QTLs now), so kill the mutation
}



// For non-pleiotropic mutations, set their e0 and e1 values so we can have standardised output in that format

mutation(m2) {
	mut.setValue("e0", 0.0);
	mut.setValue("e1", 0.0);
	mut.setValue("e2", 0.0);
	mut.setValue("e3", 0.0);
	mut.setValue("e4", 0.0);
	mut.setValue("e5", 0.0);
	mut.setValue("e6", 0.0);
	mut.setValue("e7", 0.0);
	mut.setValue("fe", mut.selectionCoeff); // fitness effect
	
	return T;

}

// Burn-in period
1:50000 late() {
	if (sim.generation % 500 != 0) // Grab a sample every 500 generations
		return;
		
	meanH = paste(subpopHeterozygosity(p1, Ne), ",");
	Hfile = paste(c(sim.generation, asString(seed), modelindex, meanH), ",");
	writeFile(outburn, Hfile, append = T);
}

// At the end of burn-in, we get the phenotypes and output that. We also choose fitness optimums based on 10*the mean phenotype value, which populations will move towards.
50000 late() {
	inds = sim.subpopulations.individuals;
	fixed = sim.substitutions;
	sizem3 = size(fixed[fixed.mutationType == m3]);
	sizem4 = size(fixed[fixed.mutationType == m4]);
	sizem5 = size(fixed[fixed.mutationType == m5]);
	sizem6 = size(fixed[fixed.mutationType == m6]);
	sizem7 = size(fixed[fixed.mutationType == m7]);
	sizem8 = size(fixed[fixed.mutationType == m8]);
	sizem9 = size(fixed[fixed.mutationType == m9]);
	sizem10 = size(fixed[fixed.mutationType == m10]);
	sizem11 = size(fixed[fixed.mutationType == m11]);
	
	fixedfx0 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e0")) else 0.0 + sizem4 ? sum(fixed[fixed.mutationType == m4].getValue("e0")) else 0.0;
	
	fixedfx1 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e1")) else 0.0 + sizem5 ? sum(fixed[fixed.mutationType == m5].getValue("e1")) else 0.0;
	
	fixedfx2 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e2")) else 0.0 + sizem6 ? sum(fixed[fixed.mutationType == m6].getValue("e2")) else 0.0;
	
	fixedfx3 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e3")) else 0.0 + sizem7 ? sum(fixed[fixed.mutationType == m7].getValue("e3")) else 0.0;

	fixedfx4 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e4")) else 0.0 + sizem8 ? sum(fixed[fixed.mutationType == m8].getValue("e4")) else 0.0;
	
	fixedfx5 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e5")) else 0.0 + sizem9 ? sum(fixed[fixed.mutationType == m9].getValue("e5")) else 0.0;	
	
	fixedfx6 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e6")) else 0.0 + sizem10 ? sum(fixed[fixed.mutationType == m10].getValue("e6")) else 0.0;
	
	fixedfx7 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e7")) else 0.0 + sizem11 ? sum(fixed[fixed.mutationType == m11].getValue("e7")) else 0.0;
	
	for (ind in sim.subpopulations.individuals)
	{
		muts = ind.genomes.mutationsOfType(m3);			// Get only pleiotropic mutations first, then add the other effects later
		mutscount = size(muts);
		
		phenotype0 = (mutscount ? sum(muts.getValue("e0")) else 0.0);
		phenotype0 = phenotype0 + (ind.sumOfMutationsOfType(m4)) + (fixedfx0); // add non-pleiotropic effects and fixed effects
		
		phenotype1 = (mutscount ? sum(muts.getValue("e1")) else 0.0);
		phenotype1 = phenotype1 + (ind.sumOfMutationsOfType(m5)) + (fixedfx1); // add non-pleiotropic effects and fixed effects
		
		phenotype2 = (mutscount ? sum(muts.getValue("e2")) else 0.0);
		phenotype2 = phenotype2 + (ind.sumOfMutationsOfType(m6)) + (fixedfx2); // add non-pleiotropic effects and fixed effects
		
		phenotype3 = (mutscount ? sum(muts.getValue("e3")) else 0.0);
		phenotype3 = phenotype3 + (ind.sumOfMutationsOfType(m7)) + (fixedfx3); // add non-pleiotropic effects and fixed effects
		
		phenotype4 = (mutscount ? sum(muts.getValue("e4")) else 0.0);
		phenotype4 = phenotype4 + (ind.sumOfMutationsOfType(m8)) + (fixedfx4); // add non-pleiotropic effects and fixed effects
		
		phenotype5 = (mutscount ? sum(muts.getValue("e5")) else 0.0);
		phenotype5 = phenotype5 + (ind.sumOfMutationsOfType(m9)) + (fixedfx5); // add non-pleiotropic effects and fixed effects
		
		phenotype6 = (mutscount ? sum(muts.getValue("e6")) else 0.0);
		phenotype6 = phenotype6 + (ind.sumOfMutationsOfType(m10)) + (fixedfx6); // add non-pleiotropic effects and fixed effects
		
		phenotype7 = (mutscount ? sum(muts.getValue("e7")) else 0.0);
		phenotype7 = phenotype7 + (ind.sumOfMutationsOfType(m11)) + (fixedfx7); // add non-pleiotropic effects and fixed effects
		
		ind.setValue("phenotype0", phenotype0);
		ind.setValue("phenotype1", phenotype1);
		ind.setValue("phenotype2", phenotype2);
		ind.setValue("phenotype3", phenotype3);
		ind.setValue("phenotype4", phenotype4);
		ind.setValue("phenotype5", phenotype5);
		ind.setValue("phenotype6", phenotype6);
		ind.setValue("phenotype7", phenotype7);
	}
	// Get the values for output: mean trait values, variance of those trait values, covariance and correlation coefficients
//	inds = sim.subpopulations.individuals;

	phenotype0 = inds.getValue("phenotype0");
	phenotype1 = inds.getValue("phenotype1");
	phenotype2 = inds.getValue("phenotype2");
	phenotype3 = inds.getValue("phenotype3");
	phenotype4 = inds.getValue("phenotype4");
	phenotype5 = inds.getValue("phenotype5");
	phenotype6 = inds.getValue("phenotype6");
	phenotype7 = inds.getValue("phenotype7");

	phenomeans = c(mean(phenotype0), mean(phenotype1), mean(phenotype2), mean(phenotype3), mean(phenotype4), mean(phenotype5), mean(phenotype6), mean(phenotype7));
	
	phenovars = c(var(phenotype0), var(phenotype1), var(phenotype2), var(phenotype3), var(phenotype4), var(phenotype5), var(phenotype6), var(phenotype7));
	
	
	// Covariances
	phenocov = float(asInteger(((size(sim.mutationTypes) - 3) - 1) * ((size(sim.mutationTypes) - 3) * 0.5))); // number of covariance terms: ntraits - 1 * ntraits/2
	phenocov[0] = cov(phenotype0, phenotype1);
	phenocov[1] = cov(phenotype0, phenotype2);
	phenocov[2] = cov(phenotype0, phenotype3);
	phenocov[3] = cov(phenotype0, phenotype4);
	phenocov[4] = cov(phenotype0, phenotype5);
	phenocov[5] = cov(phenotype0, phenotype6);
	phenocov[6] = cov(phenotype0, phenotype7);
	phenocov[7] = cov(phenotype1, phenotype2);
	phenocov[8] = cov(phenotype1, phenotype3);
	phenocov[9] = cov(phenotype1, phenotype4);
	phenocov[10] = cov(phenotype1, phenotype5);
	phenocov[11] = cov(phenotype1, phenotype6);
	phenocov[12] = cov(phenotype1, phenotype7);
	phenocov[13] = cov(phenotype2, phenotype3);
	phenocov[14] = cov(phenotype2, phenotype4);
	phenocov[15] = cov(phenotype2, phenotype5);
	phenocov[16] = cov(phenotype2, phenotype6);
	phenocov[17] = cov(phenotype2, phenotype7);
	phenocov[18] = cov(phenotype3, phenotype4);
	phenocov[19] = cov(phenotype3, phenotype5);
	phenocov[20] = cov(phenotype3, phenotype6);
	phenocov[21] = cov(phenotype3, phenotype7);
	phenocov[22] = cov(phenotype4, phenotype5);
	phenocov[23] = cov(phenotype4, phenotype6);
	phenocov[24] = cov(phenotype4, phenotype7);
	phenocov[25] = cov(phenotype5, phenotype6);
	phenocov[26] = cov(phenotype5, phenotype7);
	phenocov[27] = cov(phenotype6, phenotype7);
	
	phenocov = paste(phenocov, ",");
	
	
	// Pearson correlation coefficients
	phenocor = float(asInteger(((size(sim.mutationTypes) - 3) - 1) * ((size(sim.mutationTypes) - 3) * 0.5))); // number of covariance terms: ntraits - 1 * ntraits/2
	phenocor[0] = cor(phenotype0, phenotype1);
	phenocor[1] = cor(phenotype0, phenotype2);
	phenocor[2] = cor(phenotype0, phenotype3);
	phenocor[3] = cor(phenotype0, phenotype4);
	phenocor[4] = cor(phenotype0, phenotype5);
	phenocor[5] = cor(phenotype0, phenotype6);
	phenocor[6] = cor(phenotype0, phenotype7);
	phenocor[7] = cor(phenotype1, phenotype2);
	phenocor[8] = cor(phenotype1, phenotype3);
	phenocor[9] = cor(phenotype1, phenotype4);
	phenocor[10] = cor(phenotype1, phenotype5);
	phenocor[11] = cor(phenotype1, phenotype6);
	phenocor[12] = cor(phenotype1, phenotype7);
	phenocor[13] = cor(phenotype2, phenotype3);
	phenocor[14] = cor(phenotype2, phenotype4);
	phenocor[15] = cor(phenotype2, phenotype5);
	phenocor[16] = cor(phenotype2, phenotype6);
	phenocor[17] = cor(phenotype2, phenotype7);
	phenocor[18] = cor(phenotype3, phenotype4);
	phenocor[19] = cor(phenotype3, phenotype5);
	phenocor[20] = cor(phenotype3, phenotype6);
	phenocor[21] = cor(phenotype3, phenotype7);
	phenocor[22] = cor(phenotype4, phenotype5);
	phenocor[23] = cor(phenotype4, phenotype6);
	phenocor[24] = cor(phenotype4, phenotype7);
	phenocor[25] = cor(phenotype5, phenotype6);
	phenocor[26] = cor(phenotype5, phenotype7);
	phenocor[27] = cor(phenotype6, phenotype7);
	
	phenocor = paste(phenocor, ",");
	
	// Calculate Heterozygosity

	meanH = paste(subpopHeterozygosity(p1, Ne), ",");
	
	// Stick those values in the output, along with predictors - there are a lot of predictors now... do we replace them all with modelindex aside from seed?
	meanline = paste(c(sim.generation, ",", asString(seed), ",", modelindex, ",", rsd, ",", rwide, ",", delmu, ",", tau, ",", paste(pleio_covs, ","), ",",  paste(phenomeans, ","), ",", paste(phenovars, ","), ",", phenocov, ",", phenocor, ",", meanH, ""), "");
	file = paste(meanline, "");
	
	// Write the file
	writeFile(outname, file, append = T);
	
	
	// Optima are designated according to average number of mutational steps that will occur

	catn("\nTrait means");
	print(phenomeans);
	// Calculate optima as 100 steps from the mean - first find total steps/mutations in burn-in: mu*nloci*50000 generations
	
	// steps = 31.5; //mu*(nloci)*50000; nloci fixed at 100
	
	// Optima are 100 steps from mean, that's 100/steps * phenomeans
	defineConstant("optima", (phenomeans+(phenomeans*(3.1746)))); // 100/31.5 = 3.1746
	catn("\nTrait optima: ");
	print(optima);
	
	// Optima file
	
	optline = paste(c(asString(seed), modelindex, optima), ",");
	writeFile(outopt, optline, append = T);
}

// Output and phenotype calculation : We get the phenotypes at the end of burn-in as well for model 2
50000:150000 late() {
	
	// For each individual, grab the mutation effects and store them as a phenotype value for each phenotype, summing the effects of m3, m4, and/or, m5. This is additive!
	
	// First, collect the substitutions to apply to all individuals' phenotypes
	inds = sim.subpopulations.individuals;
	fixed = sim.substitutions;
	sizem3 = size(fixed[fixed.mutationType == m3]);
	sizem4 = size(fixed[fixed.mutationType == m4]);
	sizem5 = size(fixed[fixed.mutationType == m5]);
	sizem6 = size(fixed[fixed.mutationType == m6]);
	sizem7 = size(fixed[fixed.mutationType == m7]);
	sizem8 = size(fixed[fixed.mutationType == m8]);
	sizem9 = size(fixed[fixed.mutationType == m9]);
	sizem10 = size(fixed[fixed.mutationType == m10]);
	sizem11 = size(fixed[fixed.mutationType == m11]);
	
	fixedfx0 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e0")) else 0.0 + sizem4 ? sum(fixed[fixed.mutationType == m4].getValue("e0")) else 0.0;
	
	fixedfx1 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e1")) else 0.0 + sizem5 ? sum(fixed[fixed.mutationType == m5].getValue("e1")) else 0.0;
	
	fixedfx2 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e2")) else 0.0 + sizem6 ? sum(fixed[fixed.mutationType == m6].getValue("e2")) else 0.0;
	
	fixedfx3 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e3")) else 0.0 + sizem7 ? sum(fixed[fixed.mutationType == m7].getValue("e3")) else 0.0;

	fixedfx4 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e4")) else 0.0 + sizem8 ? sum(fixed[fixed.mutationType == m8].getValue("e4")) else 0.0;
	
	fixedfx5 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e5")) else 0.0 + sizem9 ? sum(fixed[fixed.mutationType == m9].getValue("e5")) else 0.0;	
	
	fixedfx6 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e6")) else 0.0 + sizem10 ? sum(fixed[fixed.mutationType == m10].getValue("e6")) else 0.0;
	
	fixedfx7 = sizem3 ? sum(fixed[fixed.mutationType == m3].getValue("e7")) else 0.0 + sizem11 ? sum(fixed[fixed.mutationType == m11].getValue("e7")) else 0.0;
	

	
//	sapply	 to generate phenotypes: This is horrible to look at but faster than the old way: First we grab the pleiotropic mutations (m3), 
// and combine their effects with those of the appropriate regular mutation types to get each phenotype. We then set some values to grab later for output,
// and calculate their fitness effect using this equation: 1.0 + dnorm(optima[0] - phenotype0, 0, abs(optima[0])) * 100.0;
// These are summed together for each trait to give the final fitness Scaling value.

// New fitness equation: probably faster, less mathematically complicated: w(i) = (1-s(exp(-(1/tau) * sum((optimum - phenotype)^2)))) * 10.0
// Max fitness is 1 and minimum is 0, so we add 1 to the end to ensure nothing dies - can then multiply by a scalar to get strength of selection - tau also acts as strength (wsd in old function),
// s is fixed at 1, but would have some effect on the curve
// w(i) = ((1-s(exp(-(1/tau) * sum((optimum - phenotype)^2)))) * 10.0) 
// 10.0 is to scale the function so that we can reach the optimum after so many generations
// minimum this fitness can be is 1

	phenotype = float(8);
	phenotype = sapply(inds, <<
	muts = applyValue.genomes.mutationsOfType(m3); mutscount = size(muts); phenotype[0] = (mutscount ? sum(muts.getValue("e0")) else 0.0) + (applyValue.sumOfMutationsOfType(m4) + fixedfx0); phenotype[1] = (mutscount ? sum(muts.getValue("e1")) else 0.0) + (applyValue.sumOfMutationsOfType(m5) + fixedfx1); phenotype[2] = (mutscount ? sum(muts.getValue("e2")) else 0.0) + (applyValue.sumOfMutationsOfType(m6) + fixedfx2); phenotype[3] = (mutscount ? sum(muts.getValue("e3")) else 0.0) + (applyValue.sumOfMutationsOfType(m7) + fixedfx3); phenotype[4] = (mutscount ? sum(muts.getValue("e4")) else 0.0) + (applyValue.sumOfMutationsOfType(m8) + fixedfx4); phenotype[5] = (mutscount ? sum(muts.getValue("e5")) else 0.0) + (applyValue.sumOfMutationsOfType(m9) + fixedfx5); phenotype[6] = (mutscount ? sum(muts.getValue("e6")) else 0.0) + (applyValue.sumOfMutationsOfType(m10) + fixedfx6);		 phenotype[7] = (mutscount ? sum(muts.getValue("e7")) else 0.0) + (applyValue.sumOfMutationsOfType(m11) + fixedfx7); applyValue.setValue("phenotype0", phenotype[0]); applyValue.setValue("phenotype1", phenotype[1]); applyValue.setValue("phenotype2", phenotype[2]); applyValue.setValue("phenotype3", phenotype[3]); applyValue.setValue("phenotype4", phenotype[4]); applyValue.setValue("phenotype5", phenotype[5]); applyValue.setValue("phenotype6", phenotype[6]); applyValue.setValue("phenotype7", phenotype[7]); sumx2 = sum((optima - phenotype)^2); applyValue.fitnessScaling = ((1-0.9*(1-exp(-(1/(tau)) * sumx2)))) ; phenotype;
>>);
	
	// Diagnostics to check fitness is working correctly
//	print(mean(inds.fitnessScaling));

	
		
	if (sim.generation % 500 != 0) // Grab a sample every 500 generations: results in 200 time points per run, just like old model, file size should be the same as before
		return;
		
	// Get the values for output: mean trait values, variance of those trait values, covariance and correlation coefficients
//	inds = sim.subpopulations.individuals;

	phenotype0 = inds.getValue("phenotype0");
	phenotype1 = inds.getValue("phenotype1");
	phenotype2 = inds.getValue("phenotype2");
	phenotype3 = inds.getValue("phenotype3");
	phenotype4 = inds.getValue("phenotype4");
	phenotype5 = inds.getValue("phenotype5");
	phenotype6 = inds.getValue("phenotype6");
	phenotype7 = inds.getValue("phenotype7");

	phenomeans = c(mean(phenotype0), mean(phenotype1), mean(phenotype2), mean(phenotype3), mean(phenotype4), mean(phenotype5), mean(phenotype6), mean(phenotype7));
	
	phenovars = c(var(phenotype0), var(phenotype1), var(phenotype2), var(phenotype3), var(phenotype4), var(phenotype5), var(phenotype6), var(phenotype7));
	
	
	// Covariances
	phenocov = float(asInteger(((size(sim.mutationTypes) - 3) - 1) * ((size(sim.mutationTypes) - 3) * 0.5))); // number of covariance terms: ntraits - 1 * ntraits/2
	phenocov[0] = cov(phenotype0, phenotype1);
	phenocov[1] = cov(phenotype0, phenotype2);
	phenocov[2] = cov(phenotype0, phenotype3);
	phenocov[3] = cov(phenotype0, phenotype4);
	phenocov[4] = cov(phenotype0, phenotype5);
	phenocov[5] = cov(phenotype0, phenotype6);
	phenocov[6] = cov(phenotype0, phenotype7);
	phenocov[7] = cov(phenotype1, phenotype2);
	phenocov[8] = cov(phenotype1, phenotype3);
	phenocov[9] = cov(phenotype1, phenotype4);
	phenocov[10] = cov(phenotype1, phenotype5);
	phenocov[11] = cov(phenotype1, phenotype6);
	phenocov[12] = cov(phenotype1, phenotype7);
	phenocov[13] = cov(phenotype2, phenotype3);
	phenocov[14] = cov(phenotype2, phenotype4);
	phenocov[15] = cov(phenotype2, phenotype5);
	phenocov[16] = cov(phenotype2, phenotype6);
	phenocov[17] = cov(phenotype2, phenotype7);
	phenocov[18] = cov(phenotype3, phenotype4);
	phenocov[19] = cov(phenotype3, phenotype5);
	phenocov[20] = cov(phenotype3, phenotype6);
	phenocov[21] = cov(phenotype3, phenotype7);
	phenocov[22] = cov(phenotype4, phenotype5);
	phenocov[23] = cov(phenotype4, phenotype6);
	phenocov[24] = cov(phenotype4, phenotype7);
	phenocov[25] = cov(phenotype5, phenotype6);
	phenocov[26] = cov(phenotype5, phenotype7);
	phenocov[27] = cov(phenotype6, phenotype7);
	
	phenocov = paste(phenocov, ",");
	
	
	// Pearson correlation coefficients
	phenocor = float(asInteger(((size(sim.mutationTypes) - 3) - 1) * ((size(sim.mutationTypes) - 3) * 0.5))); // number of covariance terms: ntraits - 1 * ntraits/2
	phenocor[0] = cor(phenotype0, phenotype1);
	phenocor[1] = cor(phenotype0, phenotype2);
	phenocor[2] = cor(phenotype0, phenotype3);
	phenocor[3] = cor(phenotype0, phenotype4);
	phenocor[4] = cor(phenotype0, phenotype5);
	phenocor[5] = cor(phenotype0, phenotype6);
	phenocor[6] = cor(phenotype0, phenotype7);
	phenocor[7] = cor(phenotype1, phenotype2);
	phenocor[8] = cor(phenotype1, phenotype3);
	phenocor[9] = cor(phenotype1, phenotype4);
	phenocor[10] = cor(phenotype1, phenotype5);
	phenocor[11] = cor(phenotype1, phenotype6);
	phenocor[12] = cor(phenotype1, phenotype7);
	phenocor[13] = cor(phenotype2, phenotype3);
	phenocor[14] = cor(phenotype2, phenotype4);
	phenocor[15] = cor(phenotype2, phenotype5);
	phenocor[16] = cor(phenotype2, phenotype6);
	phenocor[17] = cor(phenotype2, phenotype7);
	phenocor[18] = cor(phenotype3, phenotype4);
	phenocor[19] = cor(phenotype3, phenotype5);
	phenocor[20] = cor(phenotype3, phenotype6);
	phenocor[21] = cor(phenotype3, phenotype7);
	phenocor[22] = cor(phenotype4, phenotype5);
	phenocor[23] = cor(phenotype4, phenotype6);
	phenocor[24] = cor(phenotype4, phenotype7);
	phenocor[25] = cor(phenotype5, phenotype6);
	phenocor[26] = cor(phenotype5, phenotype7);
	phenocor[27] = cor(phenotype6, phenotype7);
	
	phenocor = paste(phenocor, ",");
	
	// Stick those values in the output, along with predictors - there are a lot of predictors now... do we replace them all with modelindex aside from seed?
	meanline = paste(c(sim.generation, ",", asString(seed), ",", modelindex, ",", rsd, ",", rwide, ",", delmu, ",", tau, ",", paste(pleio_covs, ","), ",",  paste(phenomeans, ","), ",", paste(phenovars, ","), ",", phenocov, ",", phenocor, ""), "");
	file = paste(meanline, "");
	
	// Write the file
	writeFile(outname, file, append = T);
	
	
// Mutation output: only do this once every 25000 generations: missing a lot of micro-evolution, but we keep fixations, and the files get too big otherwise	
	
	if (sim.generation % 25000 != 0)
		return;
	
	// Output for mutations
	
	// Store vectors of unique mutations, sorted by the generation in which they originated
	muts = sortBy(c(sim.mutations[sim.mutations.mutationType != m1]), "originGeneration");
	
	// same for substitutions
	subs = sortBy(c(sim.substitutions[sim.substitutions.mutationType != m1]), "originGeneration");
	
	// Set up an empty output to store all our mutations' information for this generation
	mutsLines = NULL;
	revmuts = rev(muts); // Reverse of the vector: the first value in this is the last mutation in the original list
	revsubs = rev(subs); // could instead call muts.size() and use if mut == muts[muts.size() - 1] to check, maybe uses less memory, probably same speed
	
	// Put information on these unique mutations into a separate mutations file	
	
	// Check if there are any substitutions, if not we need to fix the output lines	by not including the \n character at the end of the last mutation line
	
	if (size(subs))
		for (mut in muts) {
			mutFreq = mean(sim.subpopulations.genomes.containsMutations(mut));
			mutType = mut.mutationType.id;
			mutValues = paste(c(mut.getValue("e0"), mut.getValue("e1"), mut.getValue("e2"), mut.getValue("e3"), mut.getValue("e4"), mut.getValue("e5"), mut.getValue("e6"), mut.getValue("e7")), ",");
			mutsLine = paste(c(sim.generation, ",", asString(seed), ",", modelindex, ",", rsd, ",", rwide, ",", delmu, ",", tau, ",", paste(pleio_covs, ","), ",",  mutType, ",", mut.id, ",", mut.position, ",", mut.originGeneration, ",", mutValues, ",", mutFreq, ",", "N/A", "\n"), "");
			
			mutsLines = c(mutsLines, mutsLine);
		}
	else
		for (mut in muts) {
			mutFreq = mean(sim.subpopulations.genomes.containsMutations(mut));
			mutType = mut.mutationType.id;
			mutValues = paste(c(mut.getValue("e0"), mut.getValue("e1"), mut.getValue("e2"), mut.getValue("e3"), mut.getValue("e4"), mut.getValue("e5"), mut.getValue("e6"), mut.getValue("e7")), ",");
			if (mut != revmuts[0]) // Quality hack
				mutsLine = paste(c(sim.generation, ",", asString(seed), ",", modelindex, ",", rsd, ",", rwide, ",", delmu, ",", tau, ",", paste(pleio_covs, ","), ",",  mutType, ",", mut.id, ",", mut.position, ",", mut.originGeneration, ",", mutValues, ",", mut.getValue("fe"), ",", mutFreq, ",", "N/A", "\n"), "");
			else
				mutsLine = paste(c(sim.generation, ",", asString(seed), ",", modelindex, ",", rsd, ",", rwide, ",", delmu, ",", tau, ",", paste(pleio_covs, ","), ",",  mutType, ",", mut.id, ",", mut.position, ",", mut.originGeneration, ",", mutValues, ",", mut.getValue("fe"), ",", mutFreq, ",", "N/A", ""), "");
			mutsLines = c(mutsLines, mutsLine);
		}
	
	
	
	for (sub in subs) {
		subFreq = 1.0;
		subType = sub.mutationType.id;
		subValues = paste(c(sub.getValue("e0"), sub.getValue("e1"), sub.getValue("e2"), sub.getValue("e3"), sub.getValue("e4"), sub.getValue("e5"), sub.getValue("e6"), sub.getValue("e7")), ",");

		
		if (sub != revsubs[0]) // THIS IS THE HACK THAT I MUST RESORT TO THANKS TO NO \b OR REPLACE() 	GOSH BLESS EIDOS
			subLine = paste(c(sim.generation, ",", asString(seed), ",", modelindex, ",", rsd, ",", rwide, ",", delmu, ",", tau, ",", paste(pleio_covs, ","), ",",  subType, ",", sub.id, ",", sub.position, ",", sub.originGeneration, ",", subValues, ",", sub.getValue("fe"), ",", subFreq, ",", sub.fixationGeneration, "\n"), "");
		else
			subLine = paste(c(sim.generation, ",", asString(seed), ",", modelindex, ",", rsd, ",", rwide, ",", delmu, ",", tau, ",", paste(pleio_covs, ","), ",",  subType, ",", sub.id, ",", sub.position, ",", sub.originGeneration, ",", subValues, ",", sub.getValue("fe"), ",", subFreq, ",", sub.fixationGeneration, ""), "");
		
		mutsLines = c(mutsLines, subLine); // Add substitutions to mutation output
	
	}
	
	mutsFile = paste(mutsLines, ""); // n.b. does \b exist in eidos? Would make it easier
	
	// Write the mutations file
	// Fail safe in case there are no mutations at some point and the for loop doesn't run
	if (exists('mutsLine'))
		writeFile(outnamemuts, mutsFile, append = T);
	
	
	// SLiMGUI test output 	
	//	catn(paste(c("Generation: ", sim.generation, " Phenotype 0 Mean: ", pheno0mean, " Phenotype 1 Mean: ", pheno1mean, " covariance: ", phenocov)));

	
}

/* Files are hUGE: need to implement compression algorithm for matrices

// Genome output: We have to do this for each trait! So Trait 1 uses mutation types m3 and m4; trait 2 uses m3 and m5, need to get these effects separately


// Trait 1: m3, m4; e0
// Genome output 1 and 2: Binary for whether a mutation has occurred at a given QTL position or not - the segregating sites table, and the size effects of those in the size effects table: The effects of each of these QTL mutations to a separate matrix, the size-effects table
// Using genomes, subs, and positions from genome output 1 declarations

150000 late() {
	genomes = sim.subpopulations.genomes;
	subs = sim.substitutions[sim.substitutions.mutationType == m3 | sim.substitutions.mutationType == m4];
	positions = sim.getValue("chr_QTL")[0:(nloci-1)]; // subset of chr_QTL that contributes to trait 1
	segsitesfile = NULL;
	sizefxfile = NULL;
	
	if (length(subs) == 0 & length(c(genomes.positionsOfMutationsOfType(m3), genomes.positionsOfMutationsOfType(m4))) == 0) {		// Skip the loop if there are no mutations to put in
		segsitesline = (c('t1', rep(0, length(positions))) + ',');
		segsitesline = c(segsitesline[0:(size(segsitesline) - 2)], substr(segsitesline[size(segsitesline) - 1], 0, nchar(segsitesline[size(segsitesline) - 1]) - 2)); // Here we do some hacky stuff to remove the comma from the last entry in our segsitesline vector (using substr to take off the last entry (nchar - 2) of the last element of segsitesline (size(segsitesline) - 1)
		segsitesfile = paste0(c(rep(paste0(c(segsitesline, "\n")), length(genomes) - 1), paste0(segsitesline)));
		// Since if there are no mutations table 1 and 2 will just be 0s and identical, set sizefxfile = segsitesfile
		sizefxfile = segsitesfile;
	}
	
	else {
		
		// Looks horrible, but this is a vectorised version of what I was doing before, which is much faster. Here's what the code looks like spread out so it's more readable:
		
		//	segsiteslines = sapply(genomes, 
		//		"segsitesline = c('t1', rep(0, sim.chromosome.lastPosition+1)); // t1 for trait 1
		//		muts = c(applyValue.mutationsOfType(m3), applyValue.mutationsOfType(m4)); 
		//		segsitesline[muts.position + 1] = 1; // position + 1 because we added an extra column for t1
		//		segsitesline[subs.position + 1] = 1; 
		//		segsitesline = (c(segsitesline[0], segsitesline[positions]) + ','); // subset segsitesline to the trait column and the loci, separate with ','
		//		segsitesline = c(segsitesline[0:(size(segsitesline) - 2)], substr(segsitesline[size(segsitesline) - 1], 0, nchar(segsitesline[size(segsitesline) - 1]) - 2));
		//		segsitesline = (applyValue != genomes[genomes.size() - 1] ? c(segsitesline, '\\n') else (segsitesline)); 
		//		segsitesline;");  
		//		
		//		segsitesfile = paste0(segsiteslines); // paste the complete vector into a string for output
		
		// The bit in the middle, where we use substr() is there to remove the comma from the last element in segsitesline, so we don't have a trailing N/A column added

// This same code is repeated for sizefx and zygosity for all traits, and each are concatenating per seed: so one file per seed with a matrix for each trait's genomes/individuals as rows and loci as columns
		
		segsiteslines = sapply(genomes,
			"segsitesline = c('t1', rep(0, sim.chromosome.lastPosition+1)); 	muts = c(applyValue.mutationsOfType(m3), applyValue.mutationsOfType(m4));	segsitesline[muts.position + 1] = 1; 	segsitesline[subs.position + 1] = 1; 	segsitesline = (c(segsitesline[0], segsitesline[positions]) + ','); 	segsitesline = c(segsitesline[0:(size(segsitesline) - 2)], substr(segsitesline[size(segsitesline) - 1], 0, nchar(segsitesline[size(segsitesline) - 1]) - 2)); segsitesline = (applyValue != genomes[genomes.size() - 1] ? c(segsitesline, '\\n') else (segsitesline)); 	segsitesline;");
		
		segsitesfile = paste0(segsiteslines);
		
		sizefxlines = sapply(genomes,
			"sizefxline = c('t1', rep(0.0, sim.chromosome.lastPosition+1)); muts = c(applyValue.mutationsOfType(m3), applyValue.mutationsOfType(m4)); if (muts.size() > 0) { sizefxline[muts.position + 1] = muts.getValue('e0'); } if (subs.size() > 0) {sizefxline[subs.position + 1] = subs.getValue('e0'); } sizefxline = (c(sizefxline[0], sizefxline[positions]) + ','); 	sizefxline = c(sizefxline[0:(size(sizefxline) - 2)], substr(sizefxline[size(sizefxline) - 1], 0, nchar(sizefxline[size(sizefxline) - 1]) - 2)); sizefxline = (applyValue != genomes[genomes.size() - 1] ? c(sizefxline, '\\n') else (sizefxline)); sizefxline;");
		
		sizefxfile = paste0(sizefxlines);
	
	}
	
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", segsitesoutname, ".csv"))), segsitesfile, append = T); // append is true so we can stick trait values together
	//	// This is ~/model{modelindex}/seed_segsitesoutname.csv
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", sizefxoutname, ".csv"))), sizefxfile, append = T);
	
	
	
	
	// Genome output 3: per individual homo/heterozygosity or absence: 0, 1, 2 - the genotype table
	// Using subs and positions from genome output 1 declarations
	
	inds = sim.subpopulations.individuals;
	zygosout = NULL;
	zygosfile = NULL;
	
	if (length(subs) == 0 & length(c(inds.genomes.positionsOfMutationsOfType(m3), inds.genomes.positionsOfMutationsOfType(m4))) == 0) {		// Skip the loop if there are no mutations to put in	
		zygosline = (c('t1', rep(0, length(positions))) + ',');
		zygosline = c(zygosline[0:(size(zygosline) - 2)], substr(zygosline[(size(zygosline) - 1)], 0, nchar(zygosline[size(zygosline) - 1]) - 2));
		zygosfile = paste0(c(rep(paste0(c(zygosline, "\n")), length(inds) - 1), paste0(zygosline)));
	}
	
	else {
		
		zygoslines = sapply(inds, "zygosline = c('t1', rep(0, sim.chromosome.lastPosition+1)); muts0 = c(applyValue.genome1.mutationsOfType(m3), applyValue.genome1.mutationsOfType(m4)); muts1 = c(applyValue.genome2.mutationsOfType(m3), applyValue.genome2.mutationsOfType(m4)); shared = sort(c(setIntersection(muts0, muts1).position, subs.position)); unshared = sort(setSymmetricDifference(muts0, muts1).position); if ( size(shared) > 0 ) { zygosline[shared + 1] = 2; } if (size(unshared) > 0 ) { zygosline[unshared + 1] = 1; } zygosline = (c(zygosline[0], zygosline[positions]) + ','); 	zygosline = c(zygosline[0:(size(zygosline) - 2)], substr(zygosline[size(zygosline) - 1], 0, nchar(zygosline[size(zygosline) - 1]) - 2)); zygosline = (applyValue != inds[inds.size() - 1] ? c(zygosline, '\\n') else (zygosline)); zygosline;");
		
		zygosfile = paste0(zygoslines);
	
	
	}
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", zygosoutname, ".csv"))), zygosfile, append = T);
}


// Trait 2: m3, m5; e1
// Genome output 1 and 2: Binary for whether a mutation has occurred at a given QTL position or not - the segregating sites table; as well as table 2 for the size effects of those mutations

150000 late() {
	genomes = sim.subpopulations.genomes;
	subs = sim.substitutions[sim.substitutions.mutationType == m3 | sim.substitutions.mutationType == m5];
	positions = sim.getValue("chr_QTL")[nloci:(2*nloci - 1)];
	segsitesfile = NULL;
	sizefxfile = NULL;
	
	if (length(subs) == 0 & length(c(genomes.positionsOfMutationsOfType(m3), genomes.positionsOfMutationsOfType(m5))) == 0) {		// Skip the loop if there are no mutations to put in
		segsitesline = (c('t2', rep(0, length(positions))) + ',');
		segsitesline = c(segsitesline[0:(size(segsitesline) - 2)], substr(segsitesline[size(segsitesline) - 1], 0, nchar(segsitesline[size(segsitesline) - 1]) - 2)); // Here we do some hacky stuff to remove the comma from the last entry in our segsitesline vector (using substr to take off the last entry (nchar - 2) of the last element of segsitesline (size(segsitesline) - 1)
		segsitesfile = paste0(c(rep(paste0(c(segsitesline, "\n")), length(genomes) - 1), paste0(segsitesline)));
		// Since if there are no mutations table 1 and 2 will just be 0s and identical, set sizefxfile = segsitesfile
		sizefxfile = segsitesfile;
	}
	
	else {
		
		segsiteslines = sapply(genomes,
			"segsitesline = c('t2', rep(0, sim.chromosome.lastPosition+1)); 	muts = c(applyValue.mutationsOfType(m3), applyValue.mutationsOfType(m5));	segsitesline[muts.position + 1] = 1; 	segsitesline[subs.position + 1] = 1; 	segsitesline = (c(segsitesline[0], segsitesline[positions]) + ','); 	segsitesline = c(segsitesline[0:(size(segsitesline) - 2)], substr(segsitesline[size(segsitesline) - 1], 0, nchar(segsitesline[size(segsitesline) - 1]) - 2)); segsitesline = (applyValue != genomes[genomes.size() - 1] ? c(segsitesline, '\\n') else (segsitesline)); 	segsitesline;");
		
		segsitesfile = paste0(segsiteslines);
		
		sizefxlines = sapply(genomes,
			"sizefxline = c('t2', rep(0.0, sim.chromosome.lastPosition+1)); muts = c(applyValue.mutationsOfType(m3), applyValue.mutationsOfType(m5)); if (muts.size() > 0) { sizefxline[muts.position + 1] = muts.getValue('e1'); } if (subs.size() > 0) {sizefxline[subs.position + 1] = subs.getValue('e1'); } sizefxline = (c(sizefxline[0], sizefxline[positions]) + ','); 	sizefxline = c(sizefxline[0:(size(sizefxline) - 2)], substr(sizefxline[size(sizefxline) - 1], 0, nchar(sizefxline[size(sizefxline) - 1]) - 2)); sizefxline = (applyValue != genomes[genomes.size() - 1] ? c(sizefxline, '\\n') else (sizefxline)); sizefxline;");
		
		sizefxfile = paste0(sizefxlines);
	
	}
	
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", segsitesoutname, ".csv"))), segsitesfile, append = T);
	
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", sizefxoutname, ".csv"))), sizefxfile, append = T);
	
	
	
	// Genome output 3: per individual homo/heterozygosity or absence: 0, 1, 2 - the genotype table
	// Using subs and positions from genome output 1 declarations
	
	inds = sim.subpopulations.individuals;
	zygosout = NULL;
	zygosfile = NULL;
	
	if (length(subs) == 0 & length(c(inds.genomes.positionsOfMutationsOfType(m3), inds.genomes.positionsOfMutationsOfType(m5))) == 0) {		// Skip the loop if there are no mutations to put in	
		zygosline = (c('t2', rep(0, length(positions))) + ',');
		zygosline = c(zygosline[0:(size(zygosline) - 2)], substr(zygosline[(size(zygosline) - 1)], 0, nchar(zygosline[size(zygosline) - 1]) - 2));
		zygosfile = paste0(c(rep(paste0(c(zygosline, "\n")), length(inds) - 1), paste0(zygosline)));
	}
	
	else {
		
		// For each individual in the seqence, get a list of all the positions where QTL mutations occur, assign a 1 or 2 if that position matches a mutation's position 	
		zygoslines = sapply(inds, "zygosline = c('t2', rep(0, sim.chromosome.lastPosition+1)); muts0 = c(applyValue.genome1.mutationsOfType(m3), applyValue.genome1.mutationsOfType(m5)); muts1 = c(applyValue.genome2.mutationsOfType(m3), applyValue.genome2.mutationsOfType(m5)); shared = sort(c(setIntersection(muts0, muts1).position, subs.position)); unshared = sort(setSymmetricDifference(muts0, muts1).position); if ( size(shared) > 0 ) { zygosline[shared + 1] = 2; } if (size(unshared) > 0 ) { zygosline[unshared + 1] = 1; } zygosline = (c(zygosline[0], zygosline[positions]) + ','); 	zygosline = c(zygosline[0:(size(zygosline) - 2)], substr(zygosline[size(zygosline) - 1], 0, nchar(zygosline[size(zygosline) - 1]) - 2)); zygosline = (applyValue != inds[inds.size() - 1] ? c(zygosline, '\\n') else (zygosline)); zygosline;");
		
		zygosfile = paste0(zygoslines);
	
	}
	
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", zygosoutname, ".csv"))), zygosfile, append = T);
}

// Trait 3: m3, m6; e2
// Genome output 1 and 2: Binary for whether a mutation has occurred at a given QTL position or not - the segregating sites table; as well as table 2 for the size effects of those mutations

150000 late() {
	genomes = sim.subpopulations.genomes;
	subs = sim.substitutions[sim.substitutions.mutationType == m3 | sim.substitutions.mutationType == m6];
	positions = sim.getValue("chr_QTL")[(2*nloci):(3*nloci - 1)];
	segsitesfile = NULL;
	sizefxfile = NULL;
	
	if (length(subs) == 0 & length(c(genomes.positionsOfMutationsOfType(m3), genomes.positionsOfMutationsOfType(m6))) == 0) {		// Skip the loop if there are no mutations to put in
		segsitesline = (c('t3', rep(0, length(positions))) + ',');
		segsitesline = c(segsitesline[0:(size(segsitesline) - 2)], substr(segsitesline[size(segsitesline) - 1], 0, nchar(segsitesline[size(segsitesline) - 1]) - 2)); // Here we do some hacky stuff to remove the comma from the last entry in our segsitesline vector (using substr to take off the last entry (nchar - 2) of the last element of segsitesline (size(segsitesline) - 1)
		segsitesfile = paste0(c(rep(paste0(c(segsitesline, "\n")), length(genomes) - 1), paste0(segsitesline)));
		// Since if there are no mutations table 1 and 2 will just be 0s and identical, set sizefxfile = segsitesfile
		sizefxfile = segsitesfile;
	}
	
	else {
		
		segsiteslines = sapply(genomes,
			"segsitesline = c('t3', rep(0, sim.chromosome.lastPosition+1)); 	muts = c(applyValue.mutationsOfType(m3), applyValue.mutationsOfType(m6));	segsitesline[muts.position + 1] = 1; 	segsitesline[subs.position + 1] = 1; 	segsitesline = (c(segsitesline[0], segsitesline[positions]) + ','); 	segsitesline = c(segsitesline[0:(size(segsitesline) - 2)], substr(segsitesline[size(segsitesline) - 1], 0, nchar(segsitesline[size(segsitesline) - 1]) - 2)); segsitesline = (applyValue != genomes[genomes.size() - 1] ? c(segsitesline, '\\n') else (segsitesline)); 	segsitesline;");
		
		segsitesfile = paste0(segsiteslines);
		
		sizefxlines = sapply(genomes,
			"sizefxline = c('t3', rep(0.0, sim.chromosome.lastPosition+1)); muts = c(applyValue.mutationsOfType(m3), applyValue.mutationsOfType(m6)); if (muts.size() > 0) { sizefxline[muts.position + 1] = muts.getValue('e2'); } if (subs.size() > 0) {sizefxline[subs.position + 1] = subs.getValue('e2'); } sizefxline = (c(sizefxline[0], sizefxline[positions]) + ','); 	sizefxline = c(sizefxline[0:(size(sizefxline) - 2)], substr(sizefxline[size(sizefxline) - 1], 0, nchar(sizefxline[size(sizefxline) - 1]) - 2)); sizefxline = (applyValue != genomes[genomes.size() - 1] ? c(sizefxline, '\\n') else (sizefxline)); sizefxline;");
		
		sizefxfile = paste0(sizefxlines);
	
	}
	
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", segsitesoutname, ".csv"))), segsitesfile, append = T);
	
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", sizefxoutname, ".csv"))), sizefxfile, append = T);
	
	
	
	// Genome output 3: per individual homo/heterozygosity or absence: 0, 1, 2 - the genotype table
	// Using subs and positions from genome output 1 declarations
	
	inds = sim.subpopulations.individuals;
	zygosout = NULL;
	zygosfile = NULL;
	
	if (length(subs) == 0 & length(c(inds.genomes.positionsOfMutationsOfType(m3), inds.genomes.positionsOfMutationsOfType(m6))) == 0) {		// Skip the loop if there are no mutations to put in	
		zygosline = (c('t3', rep(0, length(positions))) + ',');
		zygosline = c(zygosline[0:(size(zygosline) - 2)], substr(zygosline[(size(zygosline) - 1)], 0, nchar(zygosline[size(zygosline) - 1]) - 2));
		zygosfile = paste0(c(rep(paste0(c(zygosline, "\n")), length(inds) - 1), paste0(zygosline)));
	}
	
	else {
		
		zygoslines = sapply(inds, "zygosline = c('t3', rep(0, sim.chromosome.lastPosition+1)); muts0 = c(applyValue.genome1.mutationsOfType(m3), applyValue.genome1.mutationsOfType(m6)); muts1 = c(applyValue.genome2.mutationsOfType(m3), applyValue.genome2.mutationsOfType(m6)); shared = sort(c(setIntersection(muts0, muts1).position, subs.position)); unshared = sort(setSymmetricDifference(muts0, muts1).position); if ( size(shared) > 0 ) { zygosline[shared + 1] = 2; } if (size(unshared) > 0 ) { zygosline[unshared + 1] = 1; } zygosline = (c(zygosline[0], zygosline[positions]) + ','); 	zygosline = c(zygosline[0:(size(zygosline) - 2)], substr(zygosline[size(zygosline) - 1], 0, nchar(zygosline[size(zygosline) - 1]) - 2)); zygosline = (applyValue != inds[inds.size() - 1] ? c(zygosline, '\\n') else (zygosline)); zygosline;");
		
		zygosfile = paste0(zygoslines);
	
	}
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", zygosoutname, ".csv"))), zygosfile, append = T);
}

// Trait 4: m3, m7; e3
// Genome output 1 and 2: Binary for whether a mutation has occurred at a given QTL position or not - the segregating sites table; as well as table 2 for the size effects of those mutations

150000 late() {
	genomes = sim.subpopulations.genomes;
	subs = sim.substitutions[sim.substitutions.mutationType == m3 | sim.substitutions.mutationType == m7];
	positions = sim.getValue("chr_QTL")[(3*nloci):(4*nloci - 1)];
	segsitesfile = NULL;
	sizefxfile = NULL;
	
	if (length(subs) == 0 & length(c(genomes.positionsOfMutationsOfType(m3), genomes.positionsOfMutationsOfType(m7))) == 0) {		// Skip the loop if there are no mutations to put in
		segsitesline = (c('t4', rep(0, length(positions))) + ',');
		segsitesline = c(segsitesline[0:(size(segsitesline) - 2)], substr(segsitesline[size(segsitesline) - 1], 0, nchar(segsitesline[size(segsitesline) - 1]) - 2)); // Here we do some hacky stuff to remove the comma from the last entry in our segsitesline vector (using substr to take off the last entry (nchar - 2) of the last element of segsitesline (size(segsitesline) - 1)
		segsitesfile = paste0(c(rep(paste0(c(segsitesline, "\n")), length(genomes) - 1), paste0(segsitesline)));
		// Since if there are no mutations table 1 and 2 will just be 0s and identical, set sizefxfile = segsitesfile
		sizefxfile = segsitesfile;
	}
	
	else {
		
		// For each genome in the seqence, get a list of all the positions where QTL mutations occur, assign a 1 if that position matches a mutation's position 	
		segsiteslines = sapply(genomes,
			"segsitesline = c('t4', rep(0, sim.chromosome.lastPosition+1)); 	muts = c(applyValue.mutationsOfType(m3), applyValue.mutationsOfType(m7));	segsitesline[muts.position + 1] = 1; 	segsitesline[subs.position + 1] = 1; 	segsitesline = (c(segsitesline[0], segsitesline[positions]) + ','); 	segsitesline = c(segsitesline[0:(size(segsitesline) - 2)], substr(segsitesline[size(segsitesline) - 1], 0, nchar(segsitesline[size(segsitesline) - 1]) - 2)); segsitesline = (applyValue != genomes[genomes.size() - 1] ? c(segsitesline, '\\n') else (segsitesline)); 	segsitesline;");
		
		segsitesfile = paste0(segsiteslines);
		
		sizefxlines = sapply(genomes,
			"sizefxline = c('t4', rep(0.0, sim.chromosome.lastPosition+1)); muts = c(applyValue.mutationsOfType(m3), applyValue.mutationsOfType(m7)); if (muts.size() > 0) { sizefxline[muts.position + 1] = muts.getValue('e3'); } if (subs.size() > 0) {sizefxline[subs.position + 1] = subs.getValue('e3'); } sizefxline = (c(sizefxline[0], sizefxline[positions]) + ','); 	sizefxline = c(sizefxline[0:(size(sizefxline) - 2)], substr(sizefxline[size(sizefxline) - 1], 0, nchar(sizefxline[size(sizefxline) - 1]) - 2)); sizefxline = (applyValue != genomes[genomes.size() - 1] ? c(sizefxline, '\\n') else (sizefxline)); sizefxline;");
		
		sizefxfile = paste0(sizefxlines);
	
	}
	
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", segsitesoutname, ".csv"))), segsitesfile, append = T);
	
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", sizefxoutname, ".csv"))), sizefxfile, append = T);
	
	
	
	// Genome output 3: per individual homo/heterozygosity or absence: 0, 1, 2 - the genotype table
	// Using subs and positions from genome output 1 declarations
	
	inds = sim.subpopulations.individuals;
	zygosout = NULL;
	zygosfile = NULL;
	
	if (length(subs) == 0 & length(c(inds.genomes.positionsOfMutationsOfType(m3), inds.genomes.positionsOfMutationsOfType(m7))) == 0) {		// Skip the loop if there are no mutations to put in	
		zygosline = (c('t4', rep(0, length(positions))) + ',');
		zygosline = c(zygosline[0:(size(zygosline) - 2)], substr(zygosline[(size(zygosline) - 1)], 0, nchar(zygosline[size(zygosline) - 1]) - 2));
		zygosfile = paste0(c(rep(paste0(c(zygosline, "\n")), length(inds) - 1), paste0(zygosline)));
	}
	
	else {
		
		zygoslines = sapply(inds, "zygosline = c('t4', rep(0, sim.chromosome.lastPosition+1)); muts0 = c(applyValue.genome1.mutationsOfType(m3), applyValue.genome1.mutationsOfType(m7)); muts1 = c(applyValue.genome2.mutationsOfType(m3), applyValue.genome2.mutationsOfType(m7)); shared = sort(c(setIntersection(muts0, muts1).position, subs.position)); unshared = sort(setSymmetricDifference(muts0, muts1).position); if ( size(shared) > 0 ) { zygosline[shared + 1] = 2; } if (size(unshared) > 0 ) { zygosline[unshared + 1] = 1; } zygosline = (c(zygosline[0], zygosline[positions]) + ','); 	zygosline = c(zygosline[0:(size(zygosline) - 2)], substr(zygosline[size(zygosline) - 1], 0, nchar(zygosline[size(zygosline) - 1]) - 2)); zygosline = (applyValue != inds[inds.size() - 1] ? c(zygosline, '\\n') else (zygosline)); zygosline;");
		
		zygosfile = paste0(zygoslines);
	
	
	}
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", zygosoutname, ".csv"))), zygosfile, append = T);
}


// Trait 5: m3, m8; e4
// Genome output 1 and 2: Binary for whether a mutation has occurred at a given QTL position or not - the segregating sites table, and the size effects of those in the size effects table: The effects of each of these QTL mutations to a separate matrix, the size-effects table
// Using genomes, subs, and positions from genome output 1 declarations

150000 late() {
	genomes = sim.subpopulations.genomes;
	subs = sim.substitutions[sim.substitutions.mutationType == m3 | sim.substitutions.mutationType == m8];
	positions = sim.getValue("chr_QTL")[(4*nloci):(5*nloci - 1)];
	segsitesfile = NULL;
	sizefxfile = NULL;
	
	if (length(subs) == 0 & length(c(genomes.positionsOfMutationsOfType(m3), genomes.positionsOfMutationsOfType(m8))) == 0) {		// Skip the loop if there are no mutations to put in
		segsitesline = (c('t5', rep(0, length(positions))) + ',');
		segsitesline = c(segsitesline[0:(size(segsitesline) - 2)], substr(segsitesline[size(segsitesline) - 1], 0, nchar(segsitesline[size(segsitesline) - 1]) - 2)); // Here we do some hacky stuff to remove the comma from the last entry in our segsitesline vector (using substr to take off the last entry (nchar - 2) of the last element of segsitesline (size(segsitesline) - 1)
		segsitesfile = paste0(c(rep(paste0(c(segsitesline, "\n")), length(genomes) - 1), paste0(segsitesline)));
		// Since if there are no mutations table 1 and 2 will just be 0s and identical, set sizefxfile = segsitesfile
		sizefxfile = segsitesfile;
	}
	
	else {
		
		// Looks horrible, but this is a vectorised version of what I was doing before, which is much faster. Here's what the code looks like spread out so it's more readable:
		
		//		segsiteslines = sapply(genomes, 
		//			"segsitesline = rep(0, sim.chromosome.lastPosition+1)); 		// initialise the line with some 0s
		//			muts = applyValue.mutations[applyValue.mutations.mutationType == m3 | applyValue.mutations.mutationType == m4]; // get the appropriate mutations
		//			segsitesline[muts.position] = 1; // fill in positions in the line where a mutation/substitution is with a 1
		//			segsitesline[subs.position] = 1; 
		//			segsitesline = (applyValue != genomes[genomes.size() - 1] ? c((segsitesline[positions] + ','),'\\n') else (segsitesline[positions] + ',') ); // check if the current genome in the apply loop is the last one or not - if it isn't, add a new line, otherwise don't; also, add commas between the positions for csv
		//			segsitesline;"); 
		//		
		//		segsitesfile = paste0(segsiteslines); // paste the complete vector into a string for output
		
		
		segsiteslines = sapply(genomes,
			"segsitesline = c('t5', rep(0, sim.chromosome.lastPosition+1)); 	muts = c(applyValue.mutationsOfType(m3), applyValue.mutationsOfType(m8));	segsitesline[muts.position + 1] = 1; 	segsitesline[subs.position + 1] = 1; 	segsitesline = (c(segsitesline[0], segsitesline[positions]) + ','); 	segsitesline = c(segsitesline[0:(size(segsitesline) - 2)], substr(segsitesline[size(segsitesline) - 1], 0, nchar(segsitesline[size(segsitesline) - 1]) - 2)); segsitesline = (applyValue != genomes[genomes.size() - 1] ? c(segsitesline, '\\n') else (segsitesline)); 	segsitesline;");
		
		segsitesfile = paste0(segsiteslines);
		
		sizefxlines = sapply(genomes,
			"sizefxline = c('t5', rep(0.0, sim.chromosome.lastPosition+1)); muts = c(applyValue.mutationsOfType(m3), applyValue.mutationsOfType(m8)); if (muts.size() > 0) { sizefxline[muts.position + 1] = muts.getValue('e4'); } if (subs.size() > 0) {sizefxline[subs.position + 1] = subs.getValue('e4'); } sizefxline = (c(sizefxline[0], sizefxline[positions]) + ','); 	sizefxline = c(sizefxline[0:(size(sizefxline) - 2)], substr(sizefxline[size(sizefxline) - 1], 0, nchar(sizefxline[size(sizefxline) - 1]) - 2)); sizefxline = (applyValue != genomes[genomes.size() - 1] ? c(sizefxline, '\\n') else (sizefxline)); sizefxline;");
		
		sizefxfile = paste0(sizefxlines);
	
	}
	
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", segsitesoutname, ".csv"))), segsitesfile, append = T); // append is true so we can stick outputs from different model/seed runs into the same file
	//	// This is ~/model{modelindex}/seed_segsitesoutname_trait1.csv
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", sizefxoutname, ".csv"))), sizefxfile, append = T);
	
	
	
	
	// Genome output 3: per individual homo/heterozygosity or absence: 0, 1, 2 - the genotype table
	// Using subs and positions from genome output 1 declarations
	
	inds = sim.subpopulations.individuals;
	zygosout = NULL;
	zygosfile = NULL;
	
	if (length(subs) == 0 & length(c(inds.genomes.positionsOfMutationsOfType(m3), inds.genomes.positionsOfMutationsOfType(m8))) == 0) {		// Skip the loop if there are no mutations to put in	
		zygosline = (c('t5', rep(0, length(positions))) + ',');
		zygosline = c(zygosline[0:(size(zygosline) - 2)], substr(zygosline[(size(zygosline) - 1)], 0, nchar(zygosline[size(zygosline) - 1]) - 2));
		zygosfile = paste0(c(rep(paste0(c(zygosline, "\n")), length(inds) - 1), paste0(zygosline)));
	}
	
	else {
		
		zygoslines = sapply(inds, "zygosline = c('t5', rep(0, sim.chromosome.lastPosition+1)); muts0 = c(applyValue.genome1.mutationsOfType(m3), applyValue.genome1.mutationsOfType(m8)); muts1 = c(applyValue.genome2.mutationsOfType(m3), applyValue.genome2.mutationsOfType(m8)); shared = sort(c(setIntersection(muts0, muts1).position, subs.position)); unshared = sort(setSymmetricDifference(muts0, muts1).position); if ( size(shared) > 0 ) { zygosline[shared + 1] = 2; } if (size(unshared) > 0 ) { zygosline[unshared + 1] = 1; } zygosline = (c(zygosline[0], zygosline[positions]) + ','); 	zygosline = c(zygosline[0:(size(zygosline) - 2)], substr(zygosline[size(zygosline) - 1], 0, nchar(zygosline[size(zygosline) - 1]) - 2)); zygosline = (applyValue != inds[inds.size() - 1] ? c(zygosline, '\\n') else (zygosline)); zygosline;");
		
		zygosfile = paste0(zygoslines);
	
	
	}
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", zygosoutname, ".csv"))), zygosfile, append = T);
}

// Trait 6: m3, m9; e5
// Genome output 1 and 2: Binary for whether a mutation has occurred at a given QTL position or not - the segregating sites table, and the size effects of those in the size effects table: The effects of each of these QTL mutations to a separate matrix, the size-effects table
// Using genomes, subs, and positions from genome output 1 declarations

150000 late() {
	genomes = sim.subpopulations.genomes;
	subs = sim.substitutions[sim.substitutions.mutationType == m3 | sim.substitutions.mutationType == m9];
	positions = sim.getValue("chr_QTL")[(5*nloci):(6*nloci - 1)];
	segsitesfile = NULL;
	sizefxfile = NULL;
	
	if (length(subs) == 0 & length(c(genomes.positionsOfMutationsOfType(m3), genomes.positionsOfMutationsOfType(m9))) == 0) {		// Skip the loop if there are no mutations to put in
		segsitesline = (c('t6', rep(0, length(positions))) + ',');
		segsitesline = c(segsitesline[0:(size(segsitesline) - 2)], substr(segsitesline[size(segsitesline) - 1], 0, nchar(segsitesline[size(segsitesline) - 1]) - 2)); // Here we do some hacky stuff to remove the comma from the last entry in our segsitesline vector (using substr to take off the last entry (nchar - 2) of the last element of segsitesline (size(segsitesline) - 1)
		segsitesfile = paste0(c(rep(paste0(c(segsitesline, "\n")), length(genomes) - 1), paste0(segsitesline)));
		// Since if there are no mutations table 1 and 2 will just be 0s and identical, set sizefxfile = segsitesfile
		sizefxfile = segsitesfile;
	}
	
	else {
		
		// Looks horrible, but this is a vectorised version of what I was doing before, which is much faster. Here's what the code looks like spread out so it's more readable:
		
		//		segsiteslines = sapply(genomes, 
		//			"segsitesline = rep(0, sim.chromosome.lastPosition+1)); 		// initialise the line with some 0s
		//			muts = applyValue.mutations[applyValue.mutations.mutationType == m3 | applyValue.mutations.mutationType == m4]; // get the appropriate mutations
		//			segsitesline[muts.position] = 1; // fill in positions in the line where a mutation/substitution is with a 1
		//			segsitesline[subs.position] = 1; 
		//			segsitesline = (applyValue != genomes[genomes.size() - 1] ? c((segsitesline[positions] + ','),'\\n') else (segsitesline[positions] + ',') ); // check if the current genome in the apply loop is the last one or not - if it isn't, add a new line, otherwise don't; also, add commas between the positions for csv
		//			segsitesline;"); 
		//		
		//		segsitesfile = paste0(segsiteslines); // paste the complete vector into a string for output
		
		
		segsiteslines = sapply(genomes,
			"segsitesline = c('t6', rep(0, sim.chromosome.lastPosition+1)); 	muts = c(applyValue.mutationsOfType(m3), applyValue.mutationsOfType(m9));	segsitesline[muts.position + 1] = 1; 	segsitesline[subs.position + 1] = 1; 	segsitesline = (c(segsitesline[0], segsitesline[positions]) + ','); 	segsitesline = c(segsitesline[0:(size(segsitesline) - 2)], substr(segsitesline[size(segsitesline) - 1], 0, nchar(segsitesline[size(segsitesline) - 1]) - 2)); segsitesline = (applyValue != genomes[genomes.size() - 1] ? c(segsitesline, '\\n') else (segsitesline)); 	segsitesline;");
		
		segsitesfile = paste0(segsiteslines);
		
		sizefxlines = sapply(genomes,
			"sizefxline = c('t6', rep(0.0, sim.chromosome.lastPosition+1)); muts = c(applyValue.mutationsOfType(m3), applyValue.mutationsOfType(m9)); if (muts.size() > 0) { sizefxline[muts.position + 1] = muts.getValue('e5'); } if (subs.size() > 0) {sizefxline[subs.position + 1] = subs.getValue('e5'); } sizefxline = (c(sizefxline[0], sizefxline[positions]) + ','); 	sizefxline = c(sizefxline[0:(size(sizefxline) - 2)], substr(sizefxline[size(sizefxline) - 1], 0, nchar(sizefxline[size(sizefxline) - 1]) - 2)); sizefxline = (applyValue != genomes[genomes.size() - 1] ? c(sizefxline, '\\n') else (sizefxline)); sizefxline;");
		
		sizefxfile = paste0(sizefxlines);
	
	}
	
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", segsitesoutname, ".csv"))), segsitesfile, append = T); // append is true so we can stick outputs from different model/seed runs into the same file
	//	// This is ~/model{modelindex}/seed_segsitesoutname_trait1.csv
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", sizefxoutname, ".csv"))), sizefxfile, append = T);
	
	
	
	
	// Genome output 3: per individual homo/heterozygosity or absence: 0, 1, 2 - the genotype table
	// Using subs and positions from genome output 1 declarations
	
	inds = sim.subpopulations.individuals;
	zygosout = NULL;
	zygosfile = NULL;
	
	if (length(subs) == 0 & length(c(inds.genomes.positionsOfMutationsOfType(m3), inds.genomes.positionsOfMutationsOfType(m9))) == 0) {		// Skip the loop if there are no mutations to put in	
		zygosline = (c('t6', rep(0, length(positions))) + ',');
		zygosline = c(zygosline[0:(size(zygosline) - 2)], substr(zygosline[(size(zygosline) - 1)], 0, nchar(zygosline[size(zygosline) - 1]) - 2));
		zygosfile = paste0(c(rep(paste0(c(zygosline, "\n")), length(inds) - 1), paste0(zygosline)));
	}
	
	else {
		
		zygoslines = sapply(inds, "zygosline = c('t6', rep(0, sim.chromosome.lastPosition+1)); muts0 = c(applyValue.genome1.mutationsOfType(m3), applyValue.genome1.mutationsOfType(m9)); muts1 = c(applyValue.genome2.mutationsOfType(m3), applyValue.genome2.mutationsOfType(m9)); shared = sort(c(setIntersection(muts0, muts1).position, subs.position)); unshared = sort(setSymmetricDifference(muts0, muts1).position); if ( size(shared) > 0 ) { zygosline[shared + 1] = 2; } if (size(unshared) > 0 ) { zygosline[unshared + 1] = 1; } zygosline = (c(zygosline[0], zygosline[positions]) + ','); 	zygosline = c(zygosline[0:(size(zygosline) - 2)], substr(zygosline[size(zygosline) - 1], 0, nchar(zygosline[size(zygosline) - 1]) - 2)); zygosline = (applyValue != inds[inds.size() - 1] ? c(zygosline, '\\n') else (zygosline)); zygosline;");
		
		zygosfile = paste0(zygoslines);
	
	
	}
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", zygosoutname, ".csv"))), zygosfile, append = T);
}

// Trait 7: m3, m10; e6
// Genome output 1 and 2: Binary for whether a mutation has occurred at a given QTL position or not - the segregating sites table, and the size effects of those in the size effects table: The effects of each of these QTL mutations to a separate matrix, the size-effects table
// Using genomes, subs, and positions from genome output 1 declarations

150000 late() {
	genomes = sim.subpopulations.genomes;
	subs = sim.substitutions[sim.substitutions.mutationType == m3 | sim.substitutions.mutationType == m10];
	positions = sim.getValue("chr_QTL")[(6*nloci):(7*nloci - 1)];
	segsitesfile = NULL;
	sizefxfile = NULL;
	
	if (length(subs) == 0 & length(c(genomes.positionsOfMutationsOfType(m3), genomes.positionsOfMutationsOfType(m10))) == 0) {		// Skip the loop if there are no mutations to put in
		segsitesline = (c('t7', rep(0, length(positions))) + ',');
		segsitesline = c(segsitesline[0:(size(segsitesline) - 2)], substr(segsitesline[size(segsitesline) - 1], 0, nchar(segsitesline[size(segsitesline) - 1]) - 2)); // Here we do some hacky stuff to remove the comma from the last entry in our segsitesline vector (using substr to take off the last entry (nchar - 2) of the last element of segsitesline (size(segsitesline) - 1)
		segsitesfile = paste0(c(rep(paste0(c(segsitesline, "\n")), length(genomes) - 1), paste0(segsitesline)));
		// Since if there are no mutations table 1 and 2 will just be 0s and identical, set sizefxfile = segsitesfile
		sizefxfile = segsitesfile;
	}
	
	else {
		
		// Looks horrible, but this is a vectorised version of what I was doing before, which is much faster. Here's what the code looks like spread out so it's more readable:
		
		//		segsiteslines = sapply(genomes, 
		//			"segsitesline = rep(0, sim.chromosome.lastPosition+1)); 		// initialise the line with some 0s
		//			muts = applyValue.mutations[applyValue.mutations.mutationType == m3 | applyValue.mutations.mutationType == m4]; // get the appropriate mutations
		//			segsitesline[muts.position] = 1; // fill in positions in the line where a mutation/substitution is with a 1
		//			segsitesline[subs.position] = 1; 
		//			segsitesline = (applyValue != genomes[genomes.size() - 1] ? c((segsitesline[positions] + ','),'\\n') else (segsitesline[positions] + ',') ); // check if the current genome in the apply loop is the last one or not - if it isn't, add a new line, otherwise don't; also, add commas between the positions for csv
		//			segsitesline;"); 
		//		
		//		segsitesfile = paste0(segsiteslines); // paste the complete vector into a string for output
		
		
		segsiteslines = sapply(genomes,
			"segsitesline = c('t7', rep(0, sim.chromosome.lastPosition+1)); 	muts = c(applyValue.mutationsOfType(m3), applyValue.mutationsOfType(m10));	segsitesline[muts.position + 1] = 1; 	segsitesline[subs.position + 1] = 1; 	segsitesline = (c(segsitesline[0], segsitesline[positions]) + ','); 	segsitesline = c(segsitesline[0:(size(segsitesline) - 2)], substr(segsitesline[size(segsitesline) - 1], 0, nchar(segsitesline[size(segsitesline) - 1]) - 2)); segsitesline = (applyValue != genomes[genomes.size() - 1] ? c(segsitesline, '\\n') else (segsitesline)); 	segsitesline;");
		
		segsitesfile = paste0(segsiteslines);
		
		sizefxlines = sapply(genomes,
			"sizefxline = c('t7', rep(0.0, sim.chromosome.lastPosition+1)); muts = c(applyValue.mutationsOfType(m3), applyValue.mutationsOfType(m10)); if (muts.size() > 0) { sizefxline[muts.position + 1] = muts.getValue('e6'); } if (subs.size() > 0) {sizefxline[subs.position + 1] = subs.getValue('e6'); } sizefxline = (c(sizefxline[0], sizefxline[positions]) + ','); 	sizefxline = c(sizefxline[0:(size(sizefxline) - 2)], substr(sizefxline[size(sizefxline) - 1], 0, nchar(sizefxline[size(sizefxline) - 1]) - 2)); sizefxline = (applyValue != genomes[genomes.size() - 1] ? c(sizefxline, '\\n') else (sizefxline)); sizefxline;");
		
		sizefxfile = paste0(sizefxlines);
	
	}
	
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", segsitesoutname, ".csv"))), segsitesfile, append = T); // append is true so we can stick outputs from different model/seed runs into the same file
	//	// This is ~/model{modelindex}/seed_segsitesoutname_trait1.csv
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", sizefxoutname, ".csv"))), sizefxfile, append = T);
	
	
	
	
	// Genome output 3: per individual homo/heterozygosity or absence: 0, 1, 2 - the genotype table
	// Using subs and positions from genome output 1 declarations
	
	inds = sim.subpopulations.individuals;
	zygosout = NULL;
	zygosfile = NULL;
	
	if (length(subs) == 0 & length(c(inds.genomes.positionsOfMutationsOfType(m3), inds.genomes.positionsOfMutationsOfType(m10))) == 0) {		// Skip the loop if there are no mutations to put in	
		zygosline = (c('t7', rep(0, length(positions))) + ',');
		zygosline = c(zygosline[0:(size(zygosline) - 2)], substr(zygosline[(size(zygosline) - 1)], 0, nchar(zygosline[size(zygosline) - 1]) - 2));
		zygosfile = paste0(c(rep(paste0(c(zygosline, "\n")), length(inds) - 1), paste0(zygosline)));
	}
	
	else {
		
		zygoslines = sapply(inds, "zygosline = c('t7', rep(0, sim.chromosome.lastPosition+1)); muts0 = c(applyValue.genome1.mutationsOfType(m3), applyValue.genome1.mutationsOfType(m10)); muts1 = c(applyValue.genome2.mutationsOfType(m3), applyValue.genome2.mutationsOfType(m10)); shared = sort(c(setIntersection(muts0, muts1).position, subs.position)); unshared = sort(setSymmetricDifference(muts0, muts1).position); if ( size(shared) > 0 ) { zygosline[shared + 1] = 2; } if (size(unshared) > 0 ) { zygosline[unshared + 1] = 1; } zygosline = (c(zygosline[0], zygosline[positions]) + ','); 	zygosline = c(zygosline[0:(size(zygosline) - 2)], substr(zygosline[size(zygosline) - 1], 0, nchar(zygosline[size(zygosline) - 1]) - 2)); zygosline = (applyValue != inds[inds.size() - 1] ? c(zygosline, '\\n') else (zygosline)); zygosline;");
		
		zygosfile = paste0(zygoslines);
	
	
	}
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", zygosoutname, ".csv"))), zygosfile, append = T);
}

// Trait 8: m3, m11; e7
// Genome output 1 and 2: Binary for whether a mutation has occurred at a given QTL position or not - the segregating sites table, and the size effects of those in the size effects table: The effects of each of these QTL mutations to a separate matrix, the size-effects table
// Using genomes, subs, and positions from genome output 1 declarations

150000 late() {
	genomes = sim.subpopulations.genomes;
	subs = sim.substitutions[sim.substitutions.mutationType == m3 | sim.substitutions.mutationType == m11];
	positions = sim.getValue("chr_QTL")[(7*nloci):(8*nloci - 1)];
	segsitesfile = NULL;
	sizefxfile = NULL;
	
	if (length(subs) == 0 & length(c(genomes.positionsOfMutationsOfType(m3), genomes.positionsOfMutationsOfType(m11))) == 0) {		// Skip the loop if there are no mutations to put in
		segsitesline = (c('t8', rep(0, length(positions))) + ',');
		segsitesline = c(segsitesline[0:(size(segsitesline) - 2)], substr(segsitesline[size(segsitesline) - 1], 0, nchar(segsitesline[size(segsitesline) - 1]) - 2)); // Here we do some hacky stuff to remove the comma from the last entry in our segsitesline vector (using substr to take off the last entry (nchar - 2) of the last element of segsitesline (size(segsitesline) - 1)
		segsitesfile = paste0(c(rep(paste0(c(segsitesline, "\n")), length(genomes) - 1), paste0(segsitesline)));
		// Since if there are no mutations table 1 and 2 will just be 0s and identical, set sizefxfile = segsitesfile
		sizefxfile = segsitesfile;
	}
	
	else {
		
		// Looks horrible, but this is a vectorised version of what I was doing before, which is much faster. Here's what the code looks like spread out so it's more readable:
		
		//		segsiteslines = sapply(genomes, 
		//			"segsitesline = rep(0, sim.chromosome.lastPosition+1)); 		// initialise the line with some 0s
		//			muts = applyValue.mutations[applyValue.mutations.mutationType == m3 | applyValue.mutations.mutationType == m4]; // get the appropriate mutations
		//			segsitesline[muts.position] = 1; // fill in positions in the line where a mutation/substitution is with a 1
		//			segsitesline[subs.position] = 1; 
		//			segsitesline = (applyValue != genomes[genomes.size() - 1] ? c((segsitesline[positions] + ','),'\\n') else (segsitesline[positions] + ',') ); // check if the current genome in the apply loop is the last one or not - if it isn't, add a new line, otherwise don't; also, add commas between the positions for csv
		//			segsitesline;"); 
		//		
		//		segsitesfile = paste0(segsiteslines); // paste the complete vector into a string for output
		
		
		segsiteslines = sapply(genomes,
			"segsitesline = c('t8', rep(0, sim.chromosome.lastPosition+1)); 	muts = c(applyValue.mutationsOfType(m3), applyValue.mutationsOfType(m11));	segsitesline[muts.position + 1] = 1; 	segsitesline[subs.position + 1] = 1; 	segsitesline = (c(segsitesline[0], segsitesline[positions]) + ','); 	segsitesline = c(segsitesline[0:(size(segsitesline) - 2)], substr(segsitesline[size(segsitesline) - 1], 0, nchar(segsitesline[size(segsitesline) - 1]) - 2)); segsitesline = (applyValue != genomes[genomes.size() - 1] ? c(segsitesline, '\\n') else (segsitesline)); 	segsitesline;");
		
		segsitesfile = paste0(segsiteslines);
		
		sizefxlines = sapply(genomes,
			"sizefxline = c('t8', rep(0.0, sim.chromosome.lastPosition+1)); muts = c(applyValue.mutationsOfType(m3), applyValue.mutationsOfType(m11)); if (muts.size() > 0) { sizefxline[muts.position + 1] = muts.getValue('e7'); } if (subs.size() > 0) {sizefxline[subs.position + 1] = subs.getValue('e7'); } sizefxline = (c(sizefxline[0], sizefxline[positions]) + ','); 	sizefxline = c(sizefxline[0:(size(sizefxline) - 2)], substr(sizefxline[size(sizefxline) - 1], 0, nchar(sizefxline[size(sizefxline) - 1]) - 2)); sizefxline = (applyValue != genomes[genomes.size() - 1] ? c(sizefxline, '\\n') else (sizefxline)); sizefxline;");
		
		sizefxfile = paste0(sizefxlines);
	
	}
	
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", segsitesoutname, ".csv"))), segsitesfile, append = T); // append is true so we can stick outputs from different model/seed runs into the same file
	//	// This is ~/model{modelindex}/seed_segsitesoutname_trait1.csv
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", sizefxoutname, ".csv"))), sizefxfile, append = T);
	
	
	
	
	// Genome output 3: per individual homo/heterozygosity or absence: 0, 1, 2 - the genotype table
	// Using subs and positions from genome output 1 declarations
	
	inds = sim.subpopulations.individuals;
	zygosout = NULL;
	zygosfile = NULL;
	
	if (length(subs) == 0 & length(c(inds.genomes.positionsOfMutationsOfType(m3), inds.genomes.positionsOfMutationsOfType(m11))) == 0) {		// Skip the loop if there are no mutations to put in	
		zygosline = (c('t8', rep(0, length(positions))) + ',');
		zygosline = c(zygosline[0:(size(zygosline) - 2)], substr(zygosline[(size(zygosline) - 1)], 0, nchar(zygosline[size(zygosline) - 1]) - 2));
		zygosfile = paste0(c(rep(paste0(c(zygosline, "\n")), length(inds) - 1), paste0(zygosline)));
	}
	
	else {
		
		zygoslines = sapply(inds, "zygosline = c('t8', rep(0, sim.chromosome.lastPosition+1)); muts0 = c(applyValue.genome1.mutationsOfType(m3), applyValue.genome1.mutationsOfType(m11)); muts1 = c(applyValue.genome2.mutationsOfType(m3), applyValue.genome2.mutationsOfType(m11)); shared = sort(c(setIntersection(muts0, muts1).position, subs.position)); unshared = sort(setSymmetricDifference(muts0, muts1).position); if ( size(shared) > 0 ) { zygosline[shared + 1] = 2; } if (size(unshared) > 0 ) { zygosline[unshared + 1] = 1; } zygosline = (c(zygosline[0], zygosline[positions]) + ','); 	zygosline = c(zygosline[0:(size(zygosline) - 2)], substr(zygosline[size(zygosline) - 1], 0, nchar(zygosline[size(zygosline) - 1]) - 2)); zygosline = (applyValue != inds[inds.size() - 1] ? c(zygosline, '\\n') else (zygosline)); zygosline;");
		
		zygosfile = paste0(zygoslines);
	
	
	}
	writeFile(asString(paste0(c("./matrices/model", modelindex, "/", asString(seed), "_", zygosoutname, ".csv"))), zygosfile, append = T);
}

*/


// Run for 100,000 generations to capture even more neutral evolution - plus 50,000 generations of burn-in
150000 late() {
	sim.simulationFinished();
}